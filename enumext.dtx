% \iffalse meta-comment
% arara: lualatex: { branch: developer, draft: true }
% arara: lualatex: { branch: developer }
% arara: clean: { extensions: [ aux, log, out, glo, gls, hd, ind, ilg, idx, toc, atfi ] }
% arara: clean: { files: [ userdoc.idx, userdoc.ilg, userdoc.ind ] }
% arara: halt
% File: enumext.dtx
% Copyright (C) 2024 by Pablo González L <pablgonz@educarchile.cl>
%
% This work may be distributed and/or modified under the conditions of the
% LaTeX Project Public License, either version 1.3c of this license or (at
% your option) any later version. The latest version of this license is in
%
%  https://www.latex-project.org/lppl.txt
%
% and version 1.3c or later is part of all distributions of LaTeX version
% 2005/12/01 or later.
%
% This work is "maintained" (as per the LPPL maintenance status)
% by Pablo González Luengo.
%
% This work consists of the files enumext.dtx and enumext.sty.
%
%<*install>
\def\enumtmp{LaTeX2e}
\ifx\fmtname\enumtmp \begingroup \fi
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
Copyright (C) 2024 by Pablo González L <pablgonz@educarchile.cl>

This work may be distributed and/or modified under the conditions of the
LaTeX Project Public License, either version 1.3c of this license or (at
your option) any later version. The latest version of this license is in

 https://www.latex-project.org/lppl.txt

and version 1.3c or later is part of all distributions of LaTeX version
2005/12/01 or later.

This work is "maintained" (as per the LPPL maintenance status)
by Pablo González L.

This work consists of the files enumext.dtx and enumext.sty.

\endpreamble
% Stop docstrip adding \endinput (from l3doc.dtx)
\postamble
\endpostamble
\usedir{tex/latex/enumext}%
\generate{\file{enumext.sty}{\from{enumext.dtx}{package}}}%
\Msg{*****************************************************************}%
\Msg{*}
\Msg{* To finish the installation you have to move the files into a }
\Msg{* TDS directory searched by your TeX distribution.}
\Msg{*}
\Msg{* To produce the documentation with source code run arara }%
\Msg{* on file enumext.dtx }%
\Msg{*}
\Msg{* Happy TeXing!}
\Msg{*}
\Msg{*****************************************************************}%
\ifx\fmtname\enumtmp \endgroup
\else \expandafter\endbatchfile
\fi
%</install>
%<*driver>
\documentclass[full]{l3doc}
% Remove `"` and `|` for short verbatim defined in l3doc, then set short |...|
\AtBeginDocument
  {
    \DeleteShortVerb \"
    \DeleteShortVerb \|
    \lstMakeShortInline[language=enumext-doc,basicstyle=\ttfamily]\|
  }
% imakeidx also opens a write stream for the .idx file, and that conflicts
% with the one opened by l3doc. Here we close that write stream:
\makeatletter
\immediate\closeout\@indexfile
\makeatother
% and later we will copy the write stream opened by imakeidx into \@indexfile
% so that entries written to both streams end up in the same file.
\usepackage[english]{babel}
\usepackage[top=0.5in,bottom=0.3in,left=1.95in,right=0.7in,footskip=0.2in,headheight=1cm,headsep=0.27cm]{geometry}
\usepackage[osf,nomath,mono=false,ScaleSF=0.95,ScaleRM=0.95]{libertinus-otf}
% Set Monospace font, fix 'quotes' in verbatim
\usepackage{sourcecodepro}
\defaultfontfeatures[\ttfamily]
  {
    Numbers   = OldStyle,
    Scale     = 0.84249,
    Extension = .otf,
  }
\setmonofont[
    UprightFont    = *-Regular,
    ItalicFont     = *-RegularIt,
    BoldFont       = *-Semibold,
    BoldItalicFont = *-SemiboldIt,
    RawFeature     = {+zero,+ss01}]{SourceCodePro}
\newfontfamily\mysourcecodeprolight{SourceCodePro-Regular.otf}[
    Scale = 0.80,FakeStretch =0.75,
    FontFace = {m}{it}{Font =SourceCodePro-RegularIt.otf,Color=FF0000}]
\RenewDocumentCommand{\MacroLongFont}{}
  {
    \mysourcecodeprolight\small
  }
% The character of visible space is now taken from Latin Modern Mono
% to prevent fonts in T1. The original definition for xetex/luatex is
% \def\verbvisiblespace{\usefont{OT1}{cmtt}{m}{n}\asciispace}
\def\verbvisiblespace{{\fontfamily{lmtt}\selectfont\char"2423}}

\usepackage{unicode-math}
\setmathfont[Scale = 0.95]{latinmodern-math.otf}
\usepackage{fontawesome5}
\newfontfamily\fetamontotf{ffmw10.otf}[
   Scale             = 0.95,%
   RawFeature        = {+latn,+rand,+kern,+size},%
   FontFace          = {b}{n}{ffmw10.otf},% fix replace font
   ]
\usepackage[svgnames]{xcolor}
\usepackage[sf,bf,compact,medium,pagestyles]{titlesec}
\usepackage{lastpage,microtype,attachfile2}
\usepackage{adjustbox,multicol,listings,accsupp,titletoc}
\usepackage{imakeidx,tikz,enumext} % main
\usepackage{scontents}
\usepackage[contents]{colordoc}
% \show\docCodelineNo
\def\textnew#1{\color{color-def}#1\/}
\def\AltMacroFont{\fontencoding\encodingdefault
                  \fontfamily\ttdefault
                  \fontseries\mddefault
                  \fontshape\updefault
                  \small
                  }%
% Patching colordoc.sty to work with l3doc.cls
\ExplSyntaxOn
\cs_new_eq:cN { liii@xmacro@code } \__codedoc_xmacro_code:n
\ExplSyntaxOff
\begingroup
\makeatletter
\catcode`\[\@ne\catcode`\]\tw@
\@makebracesactive
\gdef{[\@openingbrace[\char'173]]
\gdef}[\@closingbrace[\char'175]]
\catcode`\|\z@\catcode`\%12
\catcode`\ \active\catcode`\\\active
|gdef|xmacro@code#1%    \end{macrocode}[|liii@xmacro@code[#1]|end[macrocode]]
|catcode`| 12|gdef|sxmacro@code#1%    \end{macrocode*}[|liii@xmacro@code[#1]|end[macrocode*]]
|endgroup
% Patching colordoc.sty to work with doc v3 (TeX Live 2023 & lualatex-dev)
\usepackage{etoolbox}
\makeatletter
\@ifpackagelater{doc}{2022-06-01}%
  {\patchcmd\macro@finish
    {\ifnot@excluded % \if
      \edef\@tempa{\noexpand\SpecialIndex{\bslash\macro@namepart}}%
      \@tempa \fi}%
    {\maybe@index@macro \macro@namepart}
    {}{\FAILED}%
   \let\default@color\current@color
  }%
  {}
\makeatother

\EnableCrossrefs
% \PageIndex, \CodelineIndex undoes what \PageIndex does
% \CodelineIndex tries to open another write stream for the index file. We don't
% want that, so we temporarily make \makeindex a no-op:
\let\ORGmakeindex\makeindex
\def\makeindex{}
\CodelineIndex
\let\makeindex\ORGmakeindex
\DoNotIndex{\ , \1,\^}
\expandafter\DoNotIndex\expandafter{\string\{}
\expandafter\DoNotIndex\expandafter{\string\}}
\expandafter\DoNotIndex\expandafter{\string\begin}
\newcommand{\HP}[1]{\emph{\hyperpage{#1}}\normalsize}
\ExplSyntaxOn
\cs_new_protected:Npn \StartImplementation
  { \bool_set_true:N \l__codedoc_in_implementation_bool }
\bool_set_false:N \l__codedoc_in_implementation_bool
\cs_new_protected:Npn \MYSortIndex #1 #2
  {
    \bool_if:NTF \l__codedoc_in_implementation_bool
      { \index{#1\actualchar#2|HP} }
      { \index[userdoc]{#1\actualchar#2|HP} }
  }
\ExplSyntaxOff
% imakeidx config
\indexsetup{level=\section,firstpagestyle=myheader,othercode=\pagestyle{myheader}}
\makeindex[name=userdoc,options={-q -s gind.ist},columnsep=15pt,title={Index of Documentation}]
\makeindex[options={-q -s gind.ist},columnsep=15pt,title={Index of Implementation}]
% Now, after imakeidx opens the write stream for the index file, we copy
% the reference to \@indexfile:
\makeatletter
\expandafter\let\expandafter\@indexfile\csname \jobname @idxfile\endcsname
\makeatother
% Set \parindent
\setlength{\parindent}{0pt}
% Colors
\definecolor{optcolor}{rgb}{0.281,0.275,0.485}
\definecolor{pkgcolor}{rgb}{0,0.5,0.5}
\definecolor{araracolor}{rgb}{0, 0.72, 0.28}
\definecolor{linkcolor}{rgb}{0.04,0.38,0.04}
\definecolor{rulecolor}{rgb}{0.96,0.96,0.96}
% Only for arara... I like arara :)
\usepackage[scale=0.85]{comfortaa}
\newcommand{\araratext}[1]{{\small\normalfont\comfortaa\color{araracolor}\bfseries#1}}
\newcommand*\arara{\araratext{ar\kern-.03emar\kern-.03ema}}
% User level commands
\ExplSyntaxOn
% Logo with fetamont font
\NewDocumentCommand{\pkglogo}{}
  {
    \group_begin:
      \LibertinusSansOsF{\textcolor{pkgcolor}{enum}\textcolor{OrangeRed}{ext}}
    \group_end:
  }
% Custom \meta[...]{...}, \marg[...]{...} and \oarg[...]{...} with color
\NewDocumentCommand{\mymeta}{O{}m}
  {
    \userdoc_meta_generic:Nnn \userdoc_meta:n { #1 } { #2 }
  }
\NewDocumentCommand{\mymarg}{O{}m}
  {
    \userdoc_meta_generic:Nnn \userdoc_marg:n { #1 } { #2 }
  }
\NewDocumentCommand{\myoarg}{O{}m}
  {
    \userdoc_meta_generic:Nnn \userdoc_oarg:n { #1 } { #2 }
  }
\NewDocumentCommand{\myparg}{O{}m}
  {
    \userdoc_meta_generic:Nnn \userdoc_parg:n { #1 } { #2 }
  }
% Variables and keys
\tl_new:N \l_userdoc_meta_font_tl
\keys_define:nn { userdoc / mymeta }
  {
    type .choice:,
    type / tt .code:n = \tl_set:Nn \l_userdoc_meta_font_tl { \ttfamily },
    type / rm .code:n = \tl_set:Nn \l_userdoc_meta_font_tl { \rmfamily },
    type .initial:n   = tt,
    cf .tl_set:N      = \l_userdoc_meta_color_tl,
    cf .initial:n     = optcolor,
    ac .tl_set:N      = \l_userdoc_meta_anglecolor_tl,
    ac .initial:n     = lightgray,
    sbc .tl_set:N     = \l_userdoc_meta_brackcolor_tl,
    sbc .initial:n    = gray,
    cbc .tl_set:N     = \l_userdoc_meta_bracecolor_tl,
    cbc .initial:n    = gray,
    pbc .tl_set:N     = \l_userdoc_meta_parencolor_tl,
    pbc .initial:n    = gray,
  }
% Internal commands
\cs_new_protected:Npn \userdoc_meta_generic:Nnn #1 #2 #3
  {
    \group_begin:
    \keys_set:nn { userdoc / mymeta } { #2 }
    \color{ \l_userdoc_meta_color_tl }
    \l_userdoc_meta_font_tl
    #1 { #3 } % #1 is \userdoc_meta:n, \userdoc_marg:n or \userdoc_oarg:n
    \group_end:
  }
\cs_new_protected:Npn \userdoc_meta:n #1
  {
    \userdoc_meta_angle:n { \textlangle }
    \userdoc_meta_meta:n { #1 }
    \userdoc_meta_angle:n { \textrangle }
  }
\cs_new_protected:Npn \userdoc_marg:n #1
  {
    \userdoc_meta_brace:n { \textbraceleft }
    \userdoc_meta:n { #1 }
    \userdoc_meta_brace:n { \textbraceright }
  }
\cs_new_protected:Npn \userdoc_oarg:n #1
  {
    \userdoc_meta_brack:n { [ }
    \userdoc_meta:n { #1 }
    \userdoc_meta_brack:n { ] }
  }
\cs_new_protected:Npn \userdoc_parg:n #1
  {
    \userdoc_meta_brace:n { ( }
    \userdoc_meta:n { #1 }
    \userdoc_meta_brace:n { ) }
  }
\cs_new_protected:Npn \userdoc_meta_meta:n #1
  {
    \textnormal{\textit{#1}}
  }
\cs_new_protected:Npn \userdoc_meta_angle:n #1
  {
    \group_begin:
    \fontfamily{lmr}\selectfont
    \textcolor{\l_userdoc_meta_anglecolor_tl}{#1}
    \group_end:
  }
\cs_new_protected:Npn \userdoc_meta_brace:n #1
  {
    \group_begin:
    \color{\l_userdoc_meta_bracecolor_tl}
    #1
    \group_end:
  }
\cs_new_protected:Npn \userdoc_meta_brack:n #1
  {
    \textcolor{\l_userdoc_meta_brackcolor_tl}{#1}
  }
%\cs_new_protected:Npn \userdoc_meta_paren:n #1
%  {
%    \textcolor{\l_userdoc_meta_paren_tl}{#1}
%  }
% \envexamp{m}
\newsavebox{\boxexaenv}
\tl_new:N \l_tempc_tl
\NewDocumentCommand \envexamp { m }
  {
    \tl_set:Nn \l_tempc_tl { #1 }
    \regex_replace_once:nnN { (\*) } { \c{textcolor}\cB\{MediumOrchid\cE\}\cB\{\1\cE\} } \l_tempc_tl
    \begin{lrbox}{\boxexaenv}%
      \begin{minipage}[t]{3\marginparwidth}%
        \raggedright\ttfamily\small
        \textcolor{gray}{\textbackslash begin\{\textcolor{pkgcolor}{{\tl_use:N \l_tempc_tl}}\}\myoarg
        [type=tt,sbc=gray,ac=lightgray,cf=optcolor]{keyval ~ list}}\par%
        \hspace{0.25cm}\ics{item}\space\mymeta[type=tt,ac=lightgray,cf=gray]{item ~ content}\par%
        \hspace{0.25cm}\ics{item}\space\myoarg[type=tt,sbc=gray,ac=lightgray,cf=optcolor]{custom}\space\mymeta[type=tt,ac=lightgray,cf=gray]{item ~ content}\par
        \hspace{0.25cm}\ics*{item*}\myoarg[type=tt,sbc=gray,ac=lightgray,cf=optcolor]{symbol}\myoarg[type=tt,sbc=gray,ac=lightgray,cf=optcolor]{offset}\space\mymeta[type=tt,ac=lightgray,cf=gray]{item ~ content}\par
        \textcolor{gray}{\textbackslash end\{{\textcolor{pkgcolor}{{\tl_use:N \l_tempc_tl}}}\}}\par
      \end{minipage}%
    \end{lrbox}%
    \usebox{\boxexaenv}
  }
% \cmdexamp{o m o m o}
\tl_new:N \l_tempd_tl
\NewDocumentCommand \cmdexamp { o m o m o }
  {
    \group_begin:
    \small\ttfamily
    \textcolor{pkgcolor}{\textbackslash#2}
    \IfValueT{#1}{ \textcolor{MediumOrchid}{#1} }
    \IfValueT{#3}
      {
        % \textnormal{\ttfamily } or \c{texttt}\cB\{  \cE\}
        \tl_set:Nn \l_tempd_tl { #3 }
        % \regex_replace_once:nnN { (\*) } { \c{textcolor}\cB\{MediumOrchid\cE\}\cB\{\1\cE\} } \l_tempd_tl
        \regex_replace_once:nnN { (\*) } { \c{texttt}\cB\{\c{textcolor}\cB\{MediumOrchid\cE\}\cB\{\1\cE\} \cE\} } \l_tempd_tl
        \myoarg[type=tt,sbc=gray,ac=lightgray,cf=optcolor]{\tl_use:N \l_tempd_tl}
      }
    \IfValueTF{#5}
      {
        \mymeta[ac=gray,type=tt,cf=MediumOrchid]{#5}%
        \mymeta[type=tt,ac=gray,cf=optcolor]{#4}
        \mymeta[ac=gray,type=tt,cf=MediumOrchid]{#5}%
      }
      { \mymarg[type=tt,cbc=gray,ac=lightgray,cf=optcolor]{#4} }
    \par
    \group_end:
  }

% \keyexamp*{m m m}
\NewDocumentCommand \keyexamp{s m m m }
  {
    \adjustbox{outer=-\marginparsep}{\textcolor{optcolor}{\small\ttfamily{#2}}}
    \IfBooleanTF{#1}
      {
        \hphantom{\textcolor{white}{\,\bfseries\texttt{=}}\,{}}
        \mymeta[type=tt,cbc=gray,ac=lightgray,cf=lightgray]{\small{#3}}
      }
      {
        \textcolor{gray}{\,\bfseries\texttt{=}}\,{}
        \mymarg[type=tt,cbc=gray,ac=lightgray,cf=optcolor]{\small{#3}}
      }
    \hfill\textcolor{gray}{\small\textsf{default}:~\emph{#4}}\par%
    \MYSortIndex{Keys}{Keys ~ for ~ environments ~ provide ~ by ~ \pkglogo :>\texttt{#2}}
  }
% \mykey{m}
\NewDocumentCommand \mykey{ m }
  {
    \tl_set:Nn \l_tmpa_tl { #1 }
    \regex_replace_once:nnN { (\*) } { \c{textcolor}\cB\{MediumOrchid\cE\}\cB\{\1\cE\} } \l_tmpa_tl
    \textcolor{optcolor}{\ttfamily \tl_use:N \l_tmpa_tl }
    %\textcolor{optcolor}{\texttt{#1}}
    \MYSortIndex{Keys}{Keys ~ for ~ environments ~ provide ~ by ~ \pkglogo :>\texttt{\tl_use:N \l_tmpa_tl}}
  }
% \mypkg{sm}
\NewDocumentCommand \mypkg { s m }
  {
    \group_begin:
    \IfBooleanTF{#1}
      {
        \pkglogo
        \MYSortIndex{packages}{Packages :>\texttt{#2}}
      }
      {
        \textcolor{OrangeRed}{\texttt{#2}}%
        \MYSortIndex{packages}{Packages :>\texttt{#2}}%
      }
     \group_end:
  }
% \myclass{m}
\NewDocumentCommand \myclass { m }
  {
    \mbox{\texttt{\textcolor{OrangeRed}{#1}}}
    \MYSortIndex{class}{Document ~ class :>\texttt{#1}}
  }
% \myenv{sm}
\NewDocumentCommand \myenv { s m O{}}
  {
    \IfBooleanTF{#1}
      {
        \tl_set:Nn \l_tmpa_tl { #2 }
        \regex_replace_once:nnN { (\*) } { \c{textcolor}\cB\{MediumOrchid\cE\}\cB\{\1\cE\} } \l_tmpa_tl
        \textcolor{pkgcolor}{\ttfamily{\tl_use:N \l_tmpa_tl}}%
        \MYSortIndex{environment}{Environments ~ provide ~ by ~\pkglogo :>\texttt{\tl_use:N \l_tmpa_tl}}
      }
      {
        \textcolor{SlateBlue}{\ttfamily{#2}}%
        \MYSortIndex{environment}{Environments :>\texttt{#2}}
      }
  }
% \ics{sm}
\NewDocumentCommand \ics {s m}
  {
    \IfBooleanTF{#1}
      {
        \tl_set:Nn \l_tmpa_tl { #2 }
        \regex_replace_once:nnN { (\*) } { \c{textcolor}\cB\{MediumOrchid\cE\}\cB\{\1\cE\} } \l_tmpa_tl
        \regex_replace_once:nnN { (!) } { \c{textcolor}\cB\{MediumOrchid\cE\}\cB\{\1\cE\} } \l_tmpa_tl
        \textcolor{pkgcolor}{\ttfamily\textbackslash{\tl_use:N \l_tmpa_tl}}
        \MYSortIndex{Commands}{Commands ~ provide  ~ by ~ \pkglogo :>\texttt{\textbackslash#2}}
      }
      {
        \textcolor{blue!75}{\ttfamily\textbackslash{#2}}
        \MYSortIndex{#2}{\texttt{\textbackslash#2}}
      }
  }
% \icounter{m}
\NewDocumentCommand \icounter { m }
  {
    \textcolor{optcolor}{\ttfamily #1}
    \MYSortIndex{Counters}{Counters ~ defined ~ by ~ \pkglogo :>\texttt{#1}}
  }
% \ilabel{sm}
\NewDocumentCommand \ilabel {s m }
  {
    \tl_set:Nn \l_tmpb_tl { #2 }
    \tl_remove_once:Nn \l_tmpb_tl { . }
    \tl_remove_once:Nn \l_tmpb_tl { ) }
    \tl_remove_once:Nn \l_tmpb_tl { ( }
    \MYSortIndex{Labels}{ Labels ~ provide ~ by ~ \pkglogo :>\texttt{\textbackslash \tl_use:N \l_tmpb_tl }}
    \tl_set:Nn \l_tmpa_tl { #2 }
    \regex_replace_once:nnN { (\*) } { \c{textcolor}\cB\{MediumOrchid\cE\}\cB\{\1\cE\} } \l_tmpa_tl
    \regex_replace_once:nnN { (\.) } { \c{textcolor}\cB\{MediumOrchid\cE\}\cB\{\1\cE\} } \l_tmpa_tl
    \regex_replace_once:nnN { (\() } { \c{textcolor}\cB\{MediumOrchid\cE\}\cB\{\1\cE\} } \l_tmpa_tl
    \regex_replace_once:nnN { (\)) } { \c{textcolor}\cB\{MediumOrchid\cE\}\cB\{\1\cE\} } \l_tmpa_tl
    \tl_put_left:Nn \l_tmpa_tl { \textbackslash }
    \IfBooleanT{#1}
      {
        \tl_put_left:Nn \l_tmpa_tl { \textcolor{MediumOrchid}{ ( } }
      }%
    \textcolor{optcolor}{ \ttfamily \tl_use:N \l_tmpa_tl }
  }
% \mydim{m}
\NewDocumentCommand \mydim { m }
  {
    \tl_set:Nn \l_tmpa_tl { #1 }
    \regex_replace_all:nnN { (\d) } { \c{textcolor}\cB\{MediumOrchid\cE\}\cB\{\1\cE\} } \l_tmpa_tl
    \regex_replace_all:nnN  { (\.) } { \c{textcolor}\cB\{MediumOrchid\cE\}\cB\{\1\cE\} } \l_tmpa_tl
    \textcolor{gray}{ \ttfamily \tl_use:N \l_tmpa_tl }
  }
% \myvarenv{m}
\NewDocumentCommand \myvarenv { s m }
  {
    \group_begin:
      \tl_set:Nn \l_tmpa_tl { #2 }
      \regex_replace_once:nnN { @{2} }{ enumext } \l_tmpa_tl
      \regex_replace_once:nnN { (\*) } { \c{textcolor}\cB\{MediumOrchid\cE\}\cB\{\1\cE\} } \l_tmpa_tl
      \regex_replace_once:nnN { (\:) } { \c{textcolor}\cB\{MediumOrchid\cE\}\cB\{\1\cE\} } \l_tmpa_tl
      \IfBooleanTF{#1}
        {
           \textcolor{pkgcolor}{ \ttfamily \tl_use:N \l_tmpa_tl }
        }
        {
           \tl_put_left:Nn \l_tmpa_tl { \textbackslash }
           \textcolor{gray}{ \ttfamily \tl_use:N \l_tmpa_tl }
        }
    \group_end:
  }
% \aviso
\NewDocumentCommand \aviso { }
  {
    \par\hspace*{-0.5\marginparsep}%
    \makebox[0pt][r]
      {
        \makebox[\marginparsep][r]
          {
            \footnotesize\textcolor{lightgray}{\faIcon{exclamation-circle}}% percent
          }
      }
    \hskip 0.5\marginparsep
  }
% \bomba
\NewDocumentCommand \bomba { }
  {
    \par\hspace*{-0.5\marginparsep}%
    \makebox[0pt][r]
      {
        \makebox[\marginparsep][r]
          {
            \footnotesize\textcolor{pkgcolor}{\faIcon{bomb}}
          }
      }
    \hskip 0.5\marginparsep
  }
\NewDocumentEnvironment{important}{ s }
  {
    \small\sffamily
    \IfBooleanTF{#1}
      {
        \bomba%
      }
      { \aviso }
  }{}

\ExplSyntaxOff
% email https://tex.stackexchange.com/a/663
\catcode`\_=11\relax%
\newcommand\email[1]{\_email #1\q_nil}%
\def\_email#1@#2\q_nil{%
  \href{mailto:#1@#2}{{\emailfont #1\emailampersat #2}}%
}%
\newcommand\emailfont{\sffamily}%
\newcommand\emailampersat{{\color{optcolor}\footnotesize @}}%
\catcode`\_=8\relax%
% Don't copy numbers in code example
\newcommand*{\noaccsupp}[1]{\BeginAccSupp{ActualText={}}#1\EndAccSupp{}}
% Create a language for documentation
\lstdefinelanguage{enumext-doc}{
    texcsstyle    = *,%
    escapechar    =`,%
    extendedchars = true,%
    keepspaces    = true,%
    stringstyle   = {\color{red}},%
    basicstyle    = \ttfamily,% \small
    alsoletter    = {-,@,.},%
% comments
    morecomment   = [l]{\%},%
    commentstyle  = \ttfamily\small\color{lightgray},%
% Important words 1
    keywordstyle  = [1]{\color{gray}},%
    keywords      = [1]{begin,end,Verbatim,env,myseq,false,NewDocumentCommand,strut,smash, newlength, settowidth, dimeval, dimexpr, IfBooleanTF,footnotehyper,%
                    },%
% Other words 2
    keywordstyle  = [2]{\color{blue!75}},%
    keywords      = [2]{usepackage,section,documentclass,input,listparindent,linewidth, emph, textbf,makesavenoteenv,%
                    columnseprule, footnote, footnotemark, footnotetext, raggedcolumns, hspace, parindent, %
                    subsection, list,endlist,leftmargin, itemindent,bfseries,endminipage, minipage, parskip, % item,
                    labelwidth,labelsep,labelindent,label,ref,topsep,parsep,includegraphics, itemize, description, %
                    multicolsep,leftmargini,leftmarginii, hfill, small, vspace, par, if@minipage, parbox, ignorespace %
                    itemindent, labelwidth, leftmarginiii,leftmarginiv,itemindent, itemsep, strutbox, raggedright, %
                    labelwidth, fbox, addvspace, Alph, alph, arabic, Roman, roman, partopsep, baselineskip,%
                    textbullet, textendash, textasteriskcentered, textperiodcentered, raggedleft,%
                    triangleright, diamond, circ , star, centering, ast, hyperlink,hypertarget,IfHyperBoolean},%
% Other words 3
    keywordstyle  = [3]{\color{optcolor!85}},%
    keywords      = [3]{document,article,setlength,pagestyle,definecolor},%
% Reserved words 4 (enumext pkg)
    keywordstyle  = [4]{\color{pkgcolor}},%
    keywords      = [4]{enumext,keyans,keyanspic, getkeyans,anskey,anspic, item,%
                    setenumext,printkeyans,miniright,parleft,itembx, descitemwd,theenumXi,theenumXii,theenumXiii,theenumXiv,theenumXv, theenumXvii, theenumXviii},%
% Reserved words 5 (in red)
    keywordstyle  = [5]{\color{red}},%
    keywords      = [5]{makeatletter,makeatother,let,verb,makebox,def,prevdepth,glue,%
                    splittopskip,showboxdepth,topskip,showoutput,nointerlineskip},%
% Reserved words 6 (optcolor) KEYS
    keywordstyle  = [6]{\color{optcolor}},%
    keywords      = [6]{save-ans,wrap-ans,save-ref,show-pos,show-ans,columns,list-offset, eunumXi,%
                    nosep,before,after,start, right, item-sym, item-sep, hyperfootnotes,%
                    scale,wrap-label,font,first,widest,mini-env,list-indent},%
% Reserved words 7 (label values)
    keywordstyle  = [7]{\color{MediumOrchid}},%
    keywords      = [7]{m,s,M,VIII,viii,v,E,t,A,XXIII,true, false,test,sample},%
% literate
    literate      =*{\{}{{{\color{gray}{\char`\{}}}}{1}
                    {\}}{{{\color{gray}{\char`\}}}}}{1}
                    {\|}{{{\color{gray}{\char`\|}}}}{1}
                    {\$}{{{\color{gray}{\char`\$}}}}{1}
                    {\#}{{{\color{optcolor}{\char`\#}}}}{1}
                    {[}{{\textcolor{gray}{[}}}{1}
                    {]}{{\textcolor{gray}{]}}}{1}
                    {,}{{\textcolor{gray}{,}}}{1}
                    {;}{{\textcolor{gray}{;}}}{1}
                    {:}{{\textcolor{red}{:}}}{1}
                    {`}{{\textcolor{gray}{\textasciigrave}}}{1}
                    {\&}{{\textcolor{gray}{\&}}}{1}
                    {>}{{\textcolor{OrangeRed}{\guillemotright}}}{1}
                    {<}{{\textcolor{OrangeRed}{\guillemotleft}}}{1}
                    {*}{{\textcolor{MediumOrchid}{*}}}{1}
                    {!}{{\textcolor{MediumOrchid}{!}}}{1}
                    {\^}{{\textcolor{optcolor}{\textasciicircum}}}{1}
                    {0}{{\textcolor{MediumOrchid}{0}}}{1}
                    {1}{{\textcolor{MediumOrchid}{1}}}{1}
                    {2}{{\textcolor{MediumOrchid}{2}}}{1}
                    {3}{{\textcolor{MediumOrchid}{3}}}{1}
                    {4}{{\textcolor{MediumOrchid}{4}}}{1}
                    {5}{{\textcolor{MediumOrchid}{5}}}{1}
                    {6}{{\textcolor{MediumOrchid}{6}}}{1}
                    {7}{{\textcolor{MediumOrchid}{7}}}{1}
                    {8}{{\textcolor{MediumOrchid}{8}}}{1}
                    {9}{{\textcolor{MediumOrchid}{9}}}{1}
                    {.0}{{\textcolor{MediumOrchid}{.0}}}{2}% Following is to ensure that only periods
                    {.1}{{\textcolor{MediumOrchid}{.1}}}{2}% followed by a digit are changed.
                    {.2}{{\textcolor{MediumOrchid}{.2}}}{2}
                    {.3}{{\textcolor{MediumOrchid}{.3}}}{2}
                    {.4}{{\textcolor{MediumOrchid}{.4}}}{2}
                    {.5}{{\textcolor{MediumOrchid}{.5}}}{2}
                    {.6}{{\textcolor{MediumOrchid}{.6}}}{2}
                    {.7}{{\textcolor{MediumOrchid}{.7}}}{2}
                    {.8}{{\textcolor{MediumOrchid}{.8}}}{2}
                    {.9}{{\textcolor{MediumOrchid}{.9}}}{2}
                    {=}{{\textcolor{gray}{=}}}{1},%
}[keywords,tex,comments,strings]% end language

% \begin{examplecode}[key=val]...\end{examplecode}
\lstnewenvironment{examplecode}[1][]{%
\lstset{
    language    = enumext-doc,%
    stringstyle = {\color{red}},%
    basicstyle  = \ttfamily\small,%
    columns     = fullflexible,%
    fontadjust  = true,%
    aboveskip   = 8pt,%
    belowskip   = 5pt,%
    rulecolor   = \color{gray!50},%
    framesep    = \fboxsep,%
    framerule   = \fboxrule,%
    xleftmargin = \dimexpr\fboxsep+\fboxrule\relax,%
    xrightmargin= \dimexpr\fboxsep+\fboxrule\relax,%
           #1,%
    }% close lstset
}{\vspace{-\parskip}}% close examplecode
% \lstinline[style=inline]|...|
\lstdefinestyle{inline}
  {
    language    = enumext-doc,%
    upquote     = true,%
    numbersep   = 1em,%
    escapechar  =`,%
    basicstyle  =\ttfamily,%\small
    numberstyle = \tiny\color{lightgray}\noaccsupp,%
    literate    =*{\%}{{\textcolor{gray}{\%}}}{1}
                  {i}{{\textcolor{optcolor}{i}}}{1}
                  {ii}{{\textcolor{optcolor}{ii}}}{2}
                  {iii}{{\textcolor{optcolor}{iii}}}{3}
                  {iv}{{\textcolor{optcolor}{iv}}}{2}
                  {v}{{\textcolor{optcolor}{v}}}{1}
                  {vi}{{\textcolor{optcolor}{vi}}}{1}
  }
% Set default \lstinline style
\lstset{style=inline}
% Get file info
\GetFileInfo{enumext.sty}
% Config hyperref
\hypersetup{
   allcolors          = linkcolor,
   colorlinks         = true,
   linktoc            = all,
   pdftitle           = {.:: The enumext package --- \fileinfo{} ::.},
   pdfauthor          = {Pablo González L},
   pdfsubject         = {Documentation for \fileversion{} [\filedate] },
   pdfkeywords        = {worksheets, multiple choice, expl3, l3prop, l3seq, list, enumerate, store answers},
   bookmarksopenlevel = 2,
  }
% Configuration titleps and titlesec
\settitlemarks{section}
\renewpagestyle{plain}[\color{optcolor}\small\sffamily]{%
\setfoot{\rlap{\hskip\dimexpr-\oddsidemargin-1in\relax%
         \parbox{1.93\paperwidth}{\hfil\thepage\,/\,\pageref{LastPage}}}}%
        {}%
        {}%
}
\newpagestyle{myheader}[\color{optcolor}\small\sffamily]{%
\renewcommand\makeheadrule{%
\rlap{\hskip\dimexpr-\oddsidemargin-1in\relax
      \color{rulecolor}\rule[0.3cm]{\paperwidth}{0.7cm}}\hss
}
\setfoot{\rlap{\hskip\dimexpr-\oddsidemargin-1in\relax%
         \parbox{1.93\paperwidth}{\hfil\thepage\,/\,\pageref{LastPage}}}}%
        {\parbox{\textwidth}{\raggedright \textcolor{gray}{\raisebox{-1pt}{\textcopyright}{}2024 by Pablo González L}}}%
        {}%
\sethead{\llap{\raisebox{0.55cm}{\parbox{\dimexpr\oddsidemargin+1in\relax}{\makebox[0pt][l]{\hspace{15pt}\pkglogo\space\fileversion}}}}}
        {\raisebox{0.55cm}{\parbox{\textwidth}{\hspace*{-\oddsidemargin}\centering\small\S.\thesection\space\sectiontitle}}}%
        {}%
}
\titlecontents{section}[0mm]{}%
    {\bfseries\contentspush{\makebox[5mm][l]{\thecontentslabel\hfill}}}%
    {\hspace*{-5mm}}% numberless
    {\hspace{0.25em}\titlerule*[6pt]{.}\contentspage}%
\titlecontents{subsection}[5mm]{}%
    {\contentspush{\makebox[6mm][l]{\thecontentslabel\hfill}}}
    {\hspace*{-11mm}}% numberless
    {\hspace{0.25em}\titlerule*[6pt]{.}\contentspage}%
\titlecontents{subsubsection}[11mm]{}%
    {\contentspush{\makebox[8mm][l]{\thecontentslabel\hfill}}}
    {\hspace*{-19mm}}% numberless
    {\hspace{0.25em}\titlerule*[6pt]{.}\contentspage}%
% Table of contents
\makeatletter
\renewcommand\tableofcontents{%
\begingroup%
\section*{\contentsname\quad{\color{gray}\leaders\hrule height 5pt depth -4.4pt\hfill}%
  \@mkboth{%
    \MakeUppercase\contentsname}{\MakeUppercase\contentsname}}%
\vspace*{-14pt}
\setlength{\columnsep}{10pt}%
 \begin{multicols}{2}%
    \@starttoc{toc}%
\end{multicols}%
\vspace*{-3pt}{\color{gray}\hrule height 0.6pt}%
\vspace*{5pt}
\endgroup
}
\makeatother
% thanks
\makeatletter
\renewcommand*{\@fnsymbol}[1]{\ensuremath{\ifcase#1\or \textcolor{pkgcolor}{*}
\or \textcolor{pkgcolor}{\dagger} \or \ddagger\or \mathsection
\or \mathparagraph\or \|\or **\or \dagger\dagger
\or \ddagger\ddagger \else\@ctrerr\fi}}
\makeatother
%\usepackage{lua-visual-debug}
\usepackage[font=small,skip=2pt]{caption}
% For input samples
\usepackage{tikzducks}
\usepackage{siunitx,amssymb}
\sisetup{output-decimal-marker={,}}
\newcommand*{\myCircled}[1]{%
  \begin{tikzpicture}[baseline=(number.base)]
    \node[circle, draw=green!10!gray, inner sep=1pt, fill=blue!30!green!10] (number) {#1};
  \end{tikzpicture}%
}
\usetikzlibrary{shapes.geometric}
\newcommand*{\mySquared}[1]{%
  \begin{tikzpicture}[baseline=(number.base),square/.style={regular polygon,regular polygon sides=4}]
    \node[square, rounded corners=1pt, inner sep=1pt, draw=none, fill=gray!40] (number) {#1};
  \end{tikzpicture}%
}
% for SAT sample
\newsavebox{\satbox}
\sbox\satbox{\small\textbf{67}}%
\NewDocumentCommand \stylesat { m }
  {%
    \setlength{\fboxsep}{2pt}%
    \raisebox{2\fboxsep}{%
    \noindent\colorbox{black}{\textcolor{white}{\makebox[\dimeval{\labelwidth-2\fboxsep}][c]{\small\textbf{\vphantom{67}#1}}}}%
    \colorbox{lightgray}{\phantom{\rule[-\dp\satbox]{\dimeval{\linewidth-2\fboxsep}}{\dimeval{\dp\satbox+\ht\satbox}}}}}%
  }
% for non-numbered list samples, need % at end (prevent supur spaces)
\NewDocumentCommand \itembx { s +m }
  {%
    \IfBooleanTF{#1}
      {\strut\smash{\parbox[t]{\labelwidth}{\raggedright{#2}}}}%
      {\strut\smash{\parbox[t]{\labelwidth}{\raggedleft{#2}}}}%
  }
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{
%    \scalebox{2.67}{\pkglogo}\\[-10pt]
%    {\large\textcolor{gray}{\fetamontotf{enumerate exercise sheets}}}\\[0pt]
%    \fileversion \quad \filedate\thanks{
%    This file describes a documentation for \fileversion, last revised
%    \filedate.}\\[25pt]
%    \author{
%    \large
%    \raisebox{-1pt}{\textcopyright}{}2024 by Pablo González\thanks{
%    E-mail: \textcolor{OrangeRed}{\textsf{\guillemotleft}}\email{pablgonz@educarchile.cl}\textcolor{OrangeRed}{\textsf{\guillemotright}}.
%       }%
%    }
% \small
% \textsc{ctan}: \url{https://www.ctan.org/pkg/enumext}\\
% \textcolor{gray}{\scriptsize\faIcon[regular]{github}}\,\,\,\url{https://github.com/pablgonz/enumext}
% \vspace*{-2cm}
% }
% \date{}
% \maketitle
%
% \begin{abstract}
% This package provides \emph{\enquote{enumerated list}} environments
% for creating \emph{\enquote{simple exercise sheets}} along with
% \emph{\enquote{multiple choice questions}}, storing the
% \mymeta{answers} to these in memory using the \mypkg{multicol} package
% and the \mypkg{l3seq} and \mypkg{l3prop} modules.
% \end{abstract}
%
% \tableofcontents
%
% \section*{Motivation and acknowledgments}
%
% Usually it is enough to use the classic \myenv{enumerate} environment to
% generate \emph{\enquote{simple exercise sheets}} or
% \emph{\enquote{multiple choice questions}}, the basic idea behind
% \mypkg*{enumext} is to cover three points:
%
% \begin{enumerate}[left=0pt, labelsep=5pt, nosep, label=\small\arabic*.,topsep=2pt]
%   \item To have a simple interface to be able to write \emph{\enquote{lists of
%         exercises}} with \emph{\enquote{answers}}.
%   \item To have a simple interface for writing \emph{\enquote{multiple choice
%         questions}}.
%   \item To have a simple interface for placing \emph{\enquote{columns}}
%         and \emph{\enquote{drawings}} or \emph{\enquote{tables}}.
% \end{enumerate}
%
% This package would not be possible without Phelype Oleinik who has
% collaborated and adapted a large part of the code and all
% \hologo{LaTeX} team for their great work and to the different members
% of the \href{https://tex.stackexchange.com}{TeX-SX} community who have
% provided great answers and ideas. Here a note of the main ones:
%
% \begin{enumerate}[left=0pt, labelsep=5pt, nosep, label=\small\arabic*.,topsep=2pt]
% \item Answer given by Alan Munn in \href{https://tex.stackexchange.com/a/300418}{\textbackslash topsep,  \textbackslash itemsep, \textbackslash partopsep, \textbackslash parsep - what do they each mean (and what about the bottom)?}
%
% \item Answer given by Enrico Gregorio in \href{https://tex.stackexchange.com/a/34172}{Understanding minipages - aligning at top}
%
% \item Answer given by Ulrich Diez in \href{https://tex.stackexchange.com/a/553839/7832}{Different mechanics of hyperlink vs. hyperref}
%
% \item Answer given by Enrico Gregorio in \href{https://tex.stackexchange.com/a/294460/7832}{Minipage and multicols, vertical alignment}
%
% \end{enumerate}
%
% \thispagestyle{plain}
%
% \section*{License and Requirements}
% \label{sec:licence}
%
% Permission is granted to copy, distribute and/or modify this software under
% the terms of the LaTeX Project Public License (lppl), version 1.3 or later
% (\url{https://www.latex-project.org/lppl.txt}).
% The software has the status \enquote{maintained}.
%
% The \mypkg*{enumext} package loads and requires \mypkg{multicol}\cite{multicol}
% package, need to have a modern \hologo{TeX} distribution such as
% \hologo{TeX} Live or \hologo{MiKTeX}. It has been tested with the standard
% classes provided by \hologo{LaTeX}: \myclass{book}, \myclass{report},
% \myclass{article} and \myclass{letter} on \mydim{10pt}, \mydim{11pt} and \mydim{12pt}.
%
% \newpage
% \pagestyle{myheader}
%
% \section{Introduction}
%
% In the \hologo{LaTeX} world world there are many useful packages and
% classes for creating \emph{\enquote{lists of exercises}}, \emph{\enquote{worksheets}}  or
% \emph{\enquote{multiple choice questions}}, classes like \myclass{exam}\cite{exam}
% and packages like \mypkg{xsim}\cite{xsim} do the job perfectly, but
% they don't always fit the basic day to day needs.
%
% \smallskip
%
% In my work (and in the work of many teachers) it is common to use
% \emph{\enquote{simple exercise sheets}} also known as
% \emph{\enquote{informal lists of exercises}}, as an example:
%
% \smallskip
%
% \begin{enumext}[save-ans=temp2,columns=2,nosep,save-ref=true]%
%  \item Factor $x^{2}-2x+1$  \anskey{$\left(x-1\right)^{2}$}
%  \item Factor $3x+3y+3z$    \anskey{$3(x+y+z)$}
%  \item True False
%    \begin{enumext}[nosep]
%      \item $\alpha > \delta$ \anskey{False}
%      \item \LaTeX2e\ is cool? \anskey{Very True!}
%    \end{enumext}
%  \item Related to Linux
%    \begin{enumext}[nosep]
%      \item You use linux? \anskey{Yes}
%      \item Usually uses the package manager? \anskey{Yes, \texttt{dnf}}
%      \item Rate the following package and class
%        \begin{enumext}[nosep]
%          \item \texttt{xsim-exam} \anskey{doesn't exist for now :(}
%          \item \texttt{xsim} \anskey{very good}
%          \item \texttt{exsheets} \anskey{obsolete}
%        \end{enumext}
%    \end{enumext}
% \end{enumext}
%
% \smallskip
%
% Sometimes we are also interested in showing the \emph{\enquote{answers}}
% along with the questions:
%
% \smallskip
%
% \begin{enumext}[save-ans=worksheet,columns=2,show-ans=true,nosep,save-ref=true]
%  \item Factor $x^{2}-2x+1$ \anskey{$\left(x-1\right)^{2}$}
%  \item Factor $3x+3y+3z$ \anskey{$3(x+y+z)$}
%  \item True False
%    \begin{enumext}[nosep]
%      \item $\alpha > \delta$ \anskey{False}
%      \item \LaTeX2e\ is cool? \anskey{Very True!}
%    \end{enumext}
%  \item Related to Linux
%    \begin{enumext}[nosep]
%      \item You use linux? \anskey{Yes}
%      \item Usually uses the package manager? \anskey{Yes, \texttt{dnf}}
%      \item Rate the following package and class
%        \begin{enumext}[nosep]
%          \item \texttt{xsim-exam} \anskey{doesn't exist for now :(}
%          \item \texttt{xsim} \anskey{very good}
%          \item \texttt{exsheets} \anskey{obsolete}
%        \end{enumext}
%    \end{enumext}
% \end{enumext}
%
% \smallskip
%
% Or we are interested in referring to a specific question and its
% \emph{\enquote{answer}}, for example:
%
% \smallskip
%
% The answer to \ref{worksheet:4} is \enquote{\getkeyans{worksheet:4}}
% and the answer to \ref{worksheet:8} is \enquote{\getkeyans{worksheet:8}}.
%
% \smallskip
%
% Or we are interested in printing all the \emph{\enquote{answers}}:
%
% \smallskip
%
% \printkeyans{worksheet}
%
% \smallskip
%
% Another very common thing to use in my work is \emph{\enquote{multiple choice
% questions}}, for example:
%
% \smallskip
%
% \begin{enumext}[save-ans=mytest,columns=2,nosep,save-ref=true]
%   \item First type of questions
%      \begin{keyans}[columns=2,noitemsep]
%        \item value
%        \item*[$x=5$] correct
%        \item value
%        \item value
%      \end{keyans}
%   \item Second type of questions
%      \begin{enumext}[no-store,label=\Roman*.,nosep]
%        \item $2\alpha+2\delta=90^{\circ}$
%        \item $\alpha=\delta$
%        \item $\angle EDF=45^{\circ}$
%      \end{enumext}
%      \begin{keyans}[columns=2,noitemsep]
%        \item I only
%        \item II only
%        \item I and II only
%        \item* I and III only
%        \item I, II, and III
%      \end{keyans}
% \item* Third type of questions
%        \begin{enumext}[no-store,list-offset=0.5cm,label=(\arabic*),nosep]
%            \item $2\alpha+2\delta=90^{\circ}$
%            \item $\angle EDF=45^{\circ}$
%        \end{enumext}
%    \begin{keyans}[columns=2,noitemsep]
%        \item value
%        \item value
%        \item*[some note] value
%        \item value
%        \item value
%    \end{keyans}
%
% \item Question with image and label below:
%
%  \begin{keyanspic}[3,2]
%    \anspic{\includegraphics[scale=0.15]{example-image-a}}
%    \anspic*{\includegraphics[scale=0.15]{example-image-b}}
%    \anspic{\includegraphics[scale=0.15]{example-image-a}}
%    \anspic{\includegraphics[scale=0.15]{example-image-a}}
%    \anspic[A duck]{\includegraphics[scale=0.30]{example-image-duck}}
%  \end{keyanspic}
%
% \item Question with image on left side:
%
%    \begin{keyans}[mini-env=0.5\linewidth, columns=1,noitemsep]
%        \item value
%        \item value
%        \item value
%        \item*[\enquote{other note}] correct
%        \item value
%        \miniright
%        \includegraphics[scale=0.15]{example-image-b}
%    \end{keyans}
% \end{enumext}
%
% \smallskip
%
% Where what we are interested in the \mymeta{label} and a
% \emph{\enquote{short note}} that we leave as an explanation, and then
% print them:
%
% \smallskip
%
% \printkeyans{mytest}
%
% \smallskip
%
% These \emph{\enquote{simple worksheets}} or \emph{\enquote{multiple
% choice questions}} appear to be easy to obtain using a combination of
% the \myenv{enumerate}, \myenv{minipage} and \myenv{multicols}
% environments, but like many things, what \emph{\enquote{looks
% simple}} is not so simple.
%
% \smallskip
%
% The \mypkg*{enumext} package was created and designed to meet these
% small requirements in the creation of \emph{\enquote{simple
% worksheets}} and \emph{\enquote{multiple choice questions}}.
%
% \newpage
%
% \subsection{Description and usage}
%
% The \mypkg*{enumext} package defines enumerated environments using the
% \myenv{list} environment provided by \hologo{LaTeX}, but
% \emph{\enquote{does not redefine}} any internal commands associated with
% it such as |\list|, |\endlist| or \ics{item} outside of the
% \emph{\enquote{scope}} in which they are defined.
%
% \smallskip
%
% \begin{important}*
% This package is NOT intend to replace the \myenv{enumerate} environment
% nor replace the powerful \mypkg{enumitem}\cite{enumitem}, the approach
% is intended to work without hindering either of them.
% \end{important}
%
% This package can be used with |xelatex|, |lualatex|, |pdflatex| and
% the classical |latex>dvips>ps2pdf| and is present in \hologo{TeX} Live and \hologo{MiKTeX},
% use the package manager to install. For manual installation, download
% \href{http://mirrors.ctan.org/macros/latex/contrib/enumext.zip}{enumext.zip}
% and unzip it, run \lstinline[language=enumext-doc,basicstyle=\ttfamily]+lualatex enumext.dtx+
% and move all files to appropriate locations, then run |mktexlsr|. To produce the documentation run
% \lstinline[language=enumext-doc,basicstyle=\ttfamily]+lualatex enumext.dtx+
% two times.
%
% \iffalse
%<*example>
% \fi
\begin{examplecode}[frame=single,language={}]
  enumext.sty  >  TDS:tex/latex/enumext/
  enumext.pdf  >  TDS:doc/latex/enumext/
  README.md    >  TDS:doc/latex/enumext/
  enumext.dtx  >  TDS:source/latex/enumext/
\end{examplecode}
% \iffalse
%</example>
% \fi
%
% The package is loaded in the usual way:
%
% \iffalse
%<*example>
% \fi
\begin{examplecode}[frame=single]
\usepackage{enumext}
\end{examplecode}
% \iffalse
%</example>
% \fi
%
% \subsection{The concept of left margin}
%
% There is a direct relationship between the parameters |\leftmargin|,
% |\itemindent|, \ics{labelwidth} and \ics{labelsep} plus an
% \emph{\enquote{extra space}} that makes it difficult to obtain the
% desired \emph{horizontal spaces} in a \myenv{list} environment.
%
% Usually we don't want the \myenv{list} to go beyond the left margin of the
% page, but since these four values are related, that causes a problem.
% The \mypkg{enumitem}\cite{enumitem} package adds the |\labelindent| parameter to
% solve some of these problems. A simplified representation of this in
% the figure \ref{fig:one}.
% \setlength\intextsep{3pt}
% \begin{figure}[ht]
%   \centering
%   \begin{tikzpicture}[line cap=round,line join=round,x=0.8cm,y=0.8cm,every node/.style={font=\footnotesize}]
%     \draw[<->,color=gray] (-0.5,6.175) --node[below,,text=lightgray,font=\footnotesize\ttfamily]{margin page} (2,6.175);
%     \draw[line width=0.5pt,dash pattern=on 2pt off 2pt,color=gray] (2,4.85) -- (2,7.5);
%     \draw[<->,color=gray] (2.0,7.0) --node[above,text=blue!75]{\texttt{\textbackslash{}labelindent}} (4.5,7.0);
%     \draw[<->,color=gray] (4.5,7.0) --node[above,text=blue!75]{\texttt{\textbackslash{}labelwidth}} (7.5,7.0);
%     \draw[<->,color=gray] (7.5,7.0) --node[above,text=blue!75]{\texttt{\textbackslash{}labelsep}} (9.5,7.0);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (4.5,6.5) rectangle (7.5,6.85);% labelwidth
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.5,6.5) rectangle (9.5,6.85);% labelsep
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (9.5,6.5) rectangle (15,6.85);% item width
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (9.5,6.0) rectangle (15,6.35);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (9.5,5.5) rectangle (15,5.85);
%     \draw[<->,color=gray] (2.0,5.35) --node[below,text=blue!75]{\texttt{\textbackslash{}leftmargin}} (7.5,5.35);
%     \draw[<->,color=gray] (7.5,5.35) --node[below,text=blue!75]{\texttt{\textbackslash{}itemindent}} (9.5,5.35);
%   \end{tikzpicture}
%   \caption{Representation of horizontal lengths in \mypkg{enumitem}.}
%   \label{fig:one}
% \end{figure}
%
% The \mypkg*{enumext} package does NOT provide a user interface to set the values for
% |\leftmargin| and |\itemindent|, instead it provides the keys
% \mykey{list-offset} and \mykey{list-indent} which internally set the
% values for |\leftmargin| and |\itemindent|. The concepts of |\leftmargin| and |\itemindent|
% are different in \mypkg*{enumext}. The figure \ref{fig:two} shows the visual representation of idea.
%
% \begin{figure}[ht]
%   \centering
%   \begin{tikzpicture}[line cap=round,line join=round,x=0.8cm,y=0.8cm,every node/.style={font=\footnotesize}]
%     \draw[<->,color=gray] (-0.5,6.175) --node[below,text=lightgray,font=\footnotesize\ttfamily]{margin page} (2,6.175);
%     \draw[line width=0.5pt,dash pattern=on 2pt off 2pt,color=gray] (2,4.85) -- (2,7.5);
%     \draw[<->,color=gray] (2.0,7.0) --node[above,text=optcolor]{\vphantom{p}\texttt{list-offset}} (4.5,7.0);
%     \draw[<->,color=gray] (4.5,7.0) --node[above,text=blue!75]{\vphantom{p}\texttt{\textbackslash{}labelwidth}} (7.5,7.0);
%     \draw[<->,color=gray] (7.5,7.0) --node[above,text=blue!75]{\texttt{\textbackslash{}labelsep}} (9.5,7.0);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (4.5,6.5) rectangle (7.5,6.85);% labelwidth
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.5,6.5) rectangle (9.5,6.85);% labelsep
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (9.5,6.5) rectangle (15,6.85);% item width
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (9.5,6.0) rectangle (15,6.35);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (9.5,5.5) rectangle (15,5.85);
%     \draw[<->,color=gray] (4.5,5.35) --node[below,text=optcolor]{\texttt{list-indent}} (9.5,5.35);
%   \end{tikzpicture}
%   \caption{Representation of horizontal lengths concept in \mypkg*{enumext}.}
%   \label{fig:two}
% \end{figure}
%
% In this way we reduce a \emph{little} the amount of parameters we have to
% pass. With the default values of keys \mykey{list-offset},
% \mykey{list-indent}, \mykey{labelwidth} and \mykey{labelsep} the lists
% will have the (usually) expected output for \emph{\enquote{simple
% worksheets}}. The figure \ref{fig:three} shows the visual representation.
%
% \begin{figure}[ht]
%   \centering
%   \begin{tikzpicture}[line cap=round,line join=round,x=0.8cm,y=0.8cm,every node/.style={font=\footnotesize}]
%     \draw[<->,color=gray] (-0.5,6.175) --node[below,text=lightgray,font=\footnotesize\ttfamily]{margin page} (2,6.175);
%     \draw [line width=0.5pt,dash pattern=on 2pt off 2pt,color=gray] (2,4.85) -- (2,7.5);
%     \draw[<->,color=gray] (2.0,7.0) --node[above,text=optcolor]{\vphantom{p}\texttt{labelwidth}} (5.0,7.0);
%     \draw[<->,color=gray] (5.0,7.0) --node[above,text=optcolor]{\texttt{labelsep}} (7.0,7.0);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (2.0,6.5) rectangle (5.0,6.85);% labelwidth
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (5.0,6.5) rectangle (7.0,6.85);% labelsep
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,6.5) rectangle (15,6.85);% item width
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,6.0) rectangle (15,6.35);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,5.5) rectangle (15,5.85);
%     \draw[<->,color=gray] (2.0,5.35) --node[below,text=optcolor]{\texttt{list-indent}} (7.0,5.35);
%   \end{tikzpicture}
%   \caption{Default horizontal lengths \mykey{list-offset}=\mydim{0pt}, \mykey{list-indent}=\ics{labelwidth}+\ics{labelsep} in \mypkg*{enumext}.}
%   \label{fig:three}
% \end{figure}
%
% \subsection{User interface}
% \label{sec:interface}
%
% The user interface consists in \myenv*{enumext}, \myenv*{enumext*}, \myenv*{keyans}, \myenv*{keyans*} and
% \myenv*{keyanspic} environments, \ics*{anskey}, \ics*{item*} and
% \ics*{anspic*} commands to \mymeta{stored content}, \ics*{getkeyans}
% command to get the individual \mymeta{stored content}, \ics*{printkeyans}
% to print all \mymeta{stored content}, \ics*{miniright} for \myenv{minipage}
% and \ics*{setenumext} to config all \myoarg[type=tt]{key \textnormal{\textcolor{gray}{=}} val}
% options.
%
% \subsubsection{Internal counters}
%
% The package \mypkg*{enumext} uses internally the \icounter{enumXi},
% \icounter{enumXii}, \icounter{enumXiii}, \icounter{enumXiv} counters
% for the four nesting levels of the \myenv*{enumext} environment, the
% \icounter{enumXv} counter for the \myenv*{keyans} environment, the
% \icounter{enumXvi} counter for the \myenv*{keyanspic} environment,
% the counter \icounter{enumXvii} for \myenv*{enumext*} environment and the counter
% \icounter{enumXviii} for \myenv*{keyans*} environment.
%
% \begin{important}*
% If any package defines these counters or they are user-defined
% in the document, the package will return a missing error and abort the
% load.
% \end{important}
%
%
% \subsubsection{Support for \pkg{multicol}}
%
% The package provides direct support for using the \mypkg{multicol}\cite{multicol}
% package. This allows to obtain directly a two-column output as shown
% in the figure \ref{fig:fourth}.
%
% \begin{figure}[ht]
%   \centering
%   \begin{tikzpicture}[line cap=round,line join=round,x=0.8cm,y=0.8cm,every node/.style={font=\footnotesize}]
%     \draw[<->,color=gray] (2.0,7.0) --node[above,text=optcolor]{\vphantom{p}\texttt{labelwidth}} (5.0,7.0);
%     \draw[<->,color=gray] (5.0,7.0) --node[above,text=optcolor]{\texttt{labelsep}} (7.0,7.0);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (2.0,6.5) rectangle (5.0,6.85);% labelwidth
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (5.0,6.5) rectangle (7.0,6.85);% labelsep
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,6.5) rectangle (17.5,6.85);% item width
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,5.5) rectangle (11.5,6.35) node[pos=.5,text=black]%
%        {\begin{tabular}{c}
%          \texttt{column one} \\
%          \textcolor{blue}{\emph{nested items}}
%        \end{tabular}};
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (13.5,5.5) rectangle (17.5,6.35) node[pos=.5,text=black]%
%        {\begin{tabular}{c}
%          \texttt{column two} \\
%          \textcolor{blue}{\emph{nested items}}
%        \end{tabular}};
%     \draw[<->,color=gray] (2.0,5.35) --node[below,text=optcolor]{\texttt{list-indent}} (7.0,5.35);
%     \draw[<->,color=gray] (11.5,5.35) --node[below,text=optcolor]%
%       {\begin{tabular}{c}
%         \texttt{column-sep} \\
%           \textcolor{blue}{\texttt{\textbackslash{}columnbreak}}
%         \end{tabular}}
%       (13.5,5.35);
%   \end{tikzpicture}
%   \caption{Representation of the two column output for a nested level in \myenv*{enumext} environment.}
%   \label{fig:fourth}
% \end{figure}
%
% The \emph{\enquote{non starred}} version of the \myenv{multicols}
% environment is always used together with the \ics{raggedcolumns}
% command and is controlled by \mykey{columns} and \mykey{columns-sep}
% keys. The environment is available for all nesting levels, and can
% can together with the \mykey{mini-env} key. If you need to force a
% start a new column \ics{columnbreak} must be used (see \S\ref{key:multi}).
%
% \smallskip
%
% \begin{important}*
% The |\columnseprule| command is not available as a key and is set to
% \emph{\enquote{zero}} for the inner levels and the \myenv*{keyans} environment. If the value of
% this is set inside the document, it will affect \emph{\enquote{all environments}} that
% use the \mykey{columns} key.
% \end{important}
%
% \subsubsection{Support for \env{minipage}}
%
% The package provides direct support for \myenv{minipage}
% environment, this allows you to obtain an output like the
% one shown in figure \ref{fig:five}.
%
% \begin{figure}[!htbp]
%   \centering
%   \begin{tikzpicture}[line cap=round,line join=round,x=0.8cm,y=0.8cm,every node/.style={font=\footnotesize}]
%     \draw[<->,color=gray] (2.0,7.0) --node[above,text=optcolor]{\vphantom{p}\texttt{labelwidth}} (5.0,7.0);
%     \draw[<->,color=gray] (5.0,7.0) --node[above,text=optcolor]{\texttt{labelsep}} (7.0,7.0);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (2.0,6.5) rectangle (5.0,6.85);% labelwidth
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (5.0,6.5) rectangle (7.0,6.85);% labelsep
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,6.5) rectangle (17.5,6.85);% item width
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,5.5) rectangle (12.5,6.35) node[pos=.5,text=black]%
%       {\begin{tabular}{c}
%          \texttt{minipage left} \\
%          \textcolor{blue}{\emph{nested list}}
%        \end{tabular}};
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (14.5,5.5) rectangle (17.5,6.35) node[pos=.5,text=black]%
%       {\begin{tabular}{c}
%          \texttt{minipage right} \\
%          \textcolor{blue}{\emph{drawing or tabular}}
%        \end{tabular}};
%     \draw[<->,color=gray] (2.0,5.35) --node[below,text=optcolor]{\texttt{list-indent}} (7.0,5.35);
%     \draw[<->,color=gray] (7.0,5.35) --node[below,text=optcolor]{\texttt{mini-env}} (12.5,5.35);
%     \draw[<->,color=gray] (12.5,5.35) --node[below,text=optcolor]%
%       {\begin{tabular}{c}
%         \texttt{mini-sep} \\
%           \textcolor{pkgcolor}{\texttt{\textbackslash{}miniright}}
%         \end{tabular}} (14.5,5.35);
%   \end{tikzpicture}
%   \caption{Representation of the \mykey{mini-env} output for a nested level \myenv*{enumext} environment.}
%   \label{fig:five}
% \end{figure}
%
% The \myenv{minipage} environments (left and right) is always used with
% \emph{\enquote{aligned on top}} |[t]|, the \myenv{minipage}
% environment on the \emph{\enquote{right side}} always starts with |\centering|. It
% can be used at all nesting levels and is controlled by \mykey{mini-env}
% and \mykey{mini-sep} keys. In order to switch from the \emph{\enquote{left}} side
% \myenv{minipage} environment to the \emph{\enquote{right}} side one must use the command
% \ics*{miniright} (see~\S\ref{key:mini}).
%
% \subsubsection{The \cs[no-index]{label} and \cs[no-index]{ref} system}
%
% This package provides a user interface like the
% \mypkg{enumitem}\cite{enumitem} package to customize the references
% which is activated by the \mykey{ref} key (\S\ref{subsec:label-and-ref}), the standard \hologo{LaTeX}
% \ics{label} and \ics{ref} commands work as usual.
% It also provides an \emph{\enquote{internal reference}} system for the
% \emph{\enquote{stored content}} by means of the key \mykey{save-ref}
% (\S\ref{subsec:label-ref}) when the key \mykey{save-ans}(\S\ref{subsec:storage-keys}) is active.
%
% \begin{important}*
% The implementation of  \ics{label} and \ics{ref} together with the
% \mykey{save-ref} key are compatible with the \mypkg{hyperref}\cite{hyperref}
% package.
% \end{important}
%
% \subsubsection{Support for \cs[no-index]{footnote}}
%
% This package provides an internal implementation for the |\footnote|
% command which is compatible with the \mypkg{hyperref} package, but, it
% will not produce the expected links, and when using the
% \mykey{mini-env} key or the starred environments \myenv*{enumext*} and
% \myenv*{keyans*}  the output will look like the classic way they are
% displayed in the \myenv{minipage} environment.
%
% The best way to solve this is to use Jean-François Burnol
% \mypkg{footnotehyper}\cite{footnotehyper} package, it will support
% keeping the links if \mypkg{hyperref} is loaded with the
% |hyperfootnotes=true| option (default) and will show the output numbered at
% the bottom of the page (as opposed to how it is displayed in the
% \myenv{minipage} environment). The way to load it is as follows:
%
% \iffalse
%<*example>
% \fi
\begin{examplecode}[frame=single]
\usepackage{footnotehyper}
\makesavenoteenv{enumext}
\makesavenoteenv{enumext*}
\end{examplecode}
% \iffalse
%</example>
% \fi
%
% \section{The environment \texttt{enumext}}
% \label{sec:envenumext}
%
% \vspace*{-\baselineskip}
%
% \begin{function}{enumext,enumext*}
%   \begin{minipage}[t]{0.45\linewidth}
%       \envexamp{enumext}
%   \end{minipage}\hfill
%   \begin{minipage}[t]{0.45\linewidth}
%       \envexamp{enumext*}
%   \end{minipage}
% \end{function}
%
% \medskip
%
% The \myenv*{enumext} is an \emph{\enquote{enumerated list}} environment that
% works in the same way as the standard \myenv{enumerate} environment
% provided by \hologo{LaTeX}, \ics*{item} and \ics*{item}\myoarg[type=tt]{custom}
% commands work in the usual way.
%
% \smallskip
%
% The environment can be nested with at most \emph{\enquote{four
% levels}} and the options can be configured globally using \ics*{setenumext}
% command and locally using \myoarg[type=tt]{key \textnormal{\textcolor{gray}{=}} val}
% in the environment.
%
% \subsubsection*{Example}
%
% \begin{enumext}
%   \item This text is in the first level.
%     \begin{enumext}
%        \item This text is in the second level.
%           \begin{enumext}
%              \item This text is in the third level.
%                \begin{enumext}
%                   \item This text is in the fourth level.
%                \end{enumext}
%            \end{enumext}
%     \end{enumext}
%   \item[X] This text is in the first level.
%   \item* This text is in the first level.
% \end{enumext}
%
% \iffalse
%<*example>
% \fi
\begin{examplecode}[frame=single]
\begin{enumext}
  \item This text is in the first level.
    \begin{enumext}
      \item This text is in the second level.
        \begin{enumext}
          \item This text is in the third level.
            \begin{enumext}
              \item This text is in the fourth level.
            \end{enumext}
        \end{enumext}
    \end{enumext}
  \item[X] This text is in the first level.
  \item* This text is in the first level.
\end{enumext}
\end{examplecode}
% \iffalse
%</example>
% \fi
%
% \subsection{The \cs[no-index]{item*} in \texttt{enumext}}
%
% \vspace*{-\baselineskip}
%
% \begin{function}{\item*}
%   \begin{syntax}
%     \ics*{item*}
%     \ics*{item*}\myoarg[type=tt]{symbol}
%     \ics*{item*}\myoarg[type=tt]{symbol}\myoarg[type=tt]{offset}
%   \end{syntax}
%    The \ics*{item*}, \ics*{item*}\myoarg[type=tt]{symbol} and
%    \ics*{item*}\myoarg[type=tt]{symbol}\myoarg[type=tt]{offset} works like
%    the numbered |\item|, but placing a \mymeta{symbol} to the \emph{\enquote{left}} of the
%    \mymeta{label} separated from it by the value set by the
%    \mykey{labelsep} key and can be \mymeta{offset} using the second optional
%    argument. The default values for \mymeta{symbol} and
%    \mymeta{offset} are |$\star$| ‘$\star$’ and the value set by
%    \mykey{labelsep} key.
%
%    \smallskip
%
%    The \emph{starred version} ‘|*|’ cannot be separated by spaces ‘\verb*| |’
%    from the command, i.e. \ics*{item*} and the first optional argument does \emph{\enquote{not support}} verbatim
%    content. Can be configure with the keys \mykey{item-sym*} and
%    \mykey{item-pos*} locally in the environment or globally using \ics*{setenumext} command (\S\ref{sec:setenumext}).
% \end{function}
%
% \smallskip
%
% \begin{important}*
% The behavior of \ics*{item*} in the \myenv*{enumext} environment is NOT
% the same as in the \myenv*{keyans} environment.
% \end{important}
%
% \subsubsection{Keys for \cs[no-index]{item*} in \texttt{enumext}}
%
% \keyexamp{item-sym\textcolor{MediumOrchid}{*}}{symbol}{\$\textbackslash{}star\$}
% Sets the \emph{symbol} to be displayed in the \emph{\enquote{left}} of the
% box containing the current \mymeta{label} set by \mykey{labelwidth} key for \ics*{item*} in
% \myenv*{enumext}. The \emph{symbol} can be in text or math mode, for
% example \mykey{item-sym*}|={$\ast$}|.
%
% \smallskip
%
% \keyexamp{item-pos\textcolor{MediumOrchid}{*}}{rigid length \textnormal{\textcolor{lightgray}{\textbar}} dim expression}{by levels}
% Sets the \emph{offset} between the box containing the
% current \mymeta{label} defined by \mykey{labelwidth} key and the
% \mymeta{symbol} set by \mykey{item-sym*} key. The default values are
% set by \mykey{labelsep} key at each level. If positive values are
% passed it will \emph{offset to the left} and if negative values are
% passed it will \emph{offset to the right}.
%
% \section{The command \cs{setenumext}}
% \label{sec:setenumext}
%
% \vspace*{-10pt}
%
% \begin{function}{\setenumext}
%   \begin{minipage}[t]{0.45\linewidth}
%     \cmdexamp{setenumext}[enumext\textnormal{\textcolor{gray}{,}} level]{key \textnormal{\textcolor{gray}{=}} val}
%     \cmdexamp{setenumext}[print\textnormal{\textcolor{gray}{,}} level]{key \textnormal{\textcolor{gray}{=}} val}
%     \cmdexamp{setenumext}[keyans]{key \textnormal{\textcolor{gray}{=}} val}
%   \end{minipage}\hfill
%   \begin{minipage}[t]{0.45\linewidth}
%     \cmdexamp{setenumext}[enumext*]{key \textnormal{\textcolor{gray}{=}} val}
%     \cmdexamp{setenumext}[keyans*]{key \textnormal{\textcolor{gray}{=}} val}
%     \cmdexamp{setenumext}[print*]{key \textnormal{\textcolor{gray}{=}} val}
%   \end{minipage}
%
% \smallskip
%
% The command \ics*{setenumext} sets the \mymeta{keys} on a global basis
% for environment \myenv*{enumext}, the \ics*{printkeyans} command and
% the \myenv*{keyans} environment. It can be used both in the preamble
% and in the body of the document as many times as desired.
% \end{function}
%
% \smallskip
%
% The \mymeta{keys} set in the optional arguments of environments and
% commands have the highest precedence, overriding both
% options passed by \ics*{setenumext}. If the optional argument is not
% passed, the first level of the environment \myenv*{enumext} will be
% taken by default.
%
% \smallskip
%
% \begin{important}*
% It should be kept in mind that using any \mymeta{key} that sets
% a \emph{rubber or rigid lengths} for vertical or horizontal space on
% a level will influence the vertical and horizontal
% space for \emph{inners levels} and \myenv*{keyans} and \myenv*{keyanspic} environments.
% All \mymeta{keys} related to vertical or horizontal spacing accept a \emph{\enquote{skip}} or \emph{\enquote{dim}}
% expression if passed between braces, i.e. you do not need to use
% |\dimexpr| or |\dimeval| to perform calculations.
%
% \end{important}
%
% \subsection{Keys for \texttt{label} and \texttt{ref}}\label{subsec:label-and-ref}
%
% \keyexamp{label}
%   {\textnormal
%       {\ilabel{alph*} \textcolor{lightgray}{\textbar} \ilabel{Alph*}
%         \textcolor{lightgray}{\textbar} \ilabel{arabic*}
%         \textcolor{lightgray}{\textbar} \ilabel{roman*}
%         \textcolor{lightgray}{\textbar} \ilabel{Roman*}}
%   }{by levels}
% Sets the \mymeta{label} that will be printed at the \emph{current
% level}. The default value for first level are \ilabel{arabic*.}, for
% second level are \ilabel*{alph*)}, for third level are \ilabel{roman*.}
% and for fourth level are \ilabel{Alph*.}.
%
% \smallskip
%
% \begin{important}*
% This key is intended to give the basic structure with which the
% \mymeta{label} will be displayed, and the and the form in which it is
% used by standard \emph{\enquote{label and ref}} and the \emph{\enquote{internal reference}} system with the
% \mykey{save-ref} key. You cannot use commands with \mymeta{label} as an
% argument, for example |\emph|\mymarg[type=tt]{\textnormal{\ilabel{alph*}}} will return an
% error. For full customization of how \mymeta{label} is displayed use the \mykey{font}
% or \mykey{wrap-label} keys.
% \end{important}
%
% \smallskip
%
% \newsavebox{\refboxsample}
% \begin{lrbox}{\refboxsample}
% \small\textcolor{gray}{\ttfamily\{}\textnormal{\small\ilabel{alph*}\textcolor{lightgray}{\textbar} \ilabel{Alph*}\textcolor{lightgray}{\textbar} \ilabel{arabic*}\textcolor{lightgray}{\textbar} \ilabel{roman*}\textcolor{lightgray}{\textbar} \ilabel{Roman*}}\textcolor{gray}{\ttfamily\}}
% \end{lrbox}
% \keyexamp{ref}{code{} \space\usebox{\refboxsample} more code}{empty}
%
% Modifies the way \emph{cross references} are displayed. The
% \mykey{label} key sets the default form of the \emph{cross references}, by using this key
% you can define a different format, for example: \mykey{ref}|=\emph|\mymarg[type=tt]{\textnormal{\ilabel{alph*}}} is valid.
%
%
% \begin{important}*
% Internally, it renews the command associated with each counter when it
% is executed, i.e., |\theenumXi| is modified when the key is executed at
% the first level, |\theenumXii| when it is executed at the second level
% and |\theenumXiii| together with |\theenumXiv| when it is executed at the
% third and fourth levels.
%
% This must be kept in mind, since the values set by the \mykey{label} and
% \mykey{ref} keys are not cumulative by levels, so if you have used the \mykey{ref}
% key in the first level and then want to associate the counter with
% \mykey{label} or \mykey{ref} in the second level you must use the direct commands,
% i.e. |\arabic{eunumXi}| to indicate the count of the first level
% instead of using |\theenumXi|.
% \end{important}
%
% \smallskip
%
% \keyexamp{labelsep}{rigid length}{\mydim{0.3333}em}
% Sets the \emph{horizontal space} between the box containing the
% current \mymeta{label} defined by \mykey{label} key and the text of an
% item on the first line. Internally sets the value of \ics{labelsep} for
% the current level.
%
% \keyexamp{labelwidth}{rigid length}{by label}
% Sets the \emph{width} of the box containing the current \mymeta{label} set
% by \mykey{label} key. Internally sets the value of \ics{labelwidth} for the current
% level. The default values are calculated by means of the \emph{width}
% of a box by setting a \emph{value} to the current counter using ‘\mydim{0}’ for
% \ilabel{arabic*}, ‘|M|’ for \ilabel{Alph*}, ‘|m|’ for \ilabel{alph*}, ‘|VIII|’
% for \ilabel{Roman*} and ‘|viii|’ for \ilabel{roman*}.
%
% \smallskip
%
% \keyexamp{widest}{integer \textnormal{\textcolor{lightgray}{\textbar}} string}{empty}
% Sets the \mykey{labelwidth} key pass the \mymeta{integer} or converting the \mymeta{string} of the
% form |\Alph|, |\alph|, |\Roman| or |\roman| to a
% \emph{value} for the current counter defined by \mykey{label} key, then calculating the \emph{width}
% by means of a box. For example |widest={XXIII}| or |widest={23}| are
% equivalent. This key is useful when the default values of the
% \mykey{labelwidth} key are smaller than those actually used.
%
% \smallskip
%
% \keyexamp{font}{font commands}{empty}
% Sets the \emph{font style} for the current \mymeta{label} defined by \mykey{label} key.
% For example |font={\bfseries\small}|.
%
% \smallskip
%
% \keyexamp{align}{left \textnormal{\textcolor{lightgray}{\textbar}} right \textnormal{\textcolor{lightgray}{\textbar}} center}{left}
% Sets the \emph{aligned} of \mymeta{label} defined by \mykey{label}
% key on the current level in the label box.
%
% \smallskip
%
% \newsavebox{\hashbox}
% \begin{lrbox}{\hashbox}
% \lstinline[language=enumext-doc,basicstyle=\ttfamily]+{#1}+
% \end{lrbox}
%
% \keyexamp{wrap-label}{code{} \space\usebox{\hashbox} more code}{empty}
% Wraps the current \mymeta{label} defined by \mykey{label} key referenced by |{#1}|.
% The \mymarg[type=tt]{code} must be passed between braces.
% This key does not modify the value set by the \mykey{labelwidth} key
% and is applied only on \ics*{item} and \ics*{item*}.
% When using it in the \ics*{setenumext} command it is necessary to use the
% \emph{double hash} ‘|{##1}|’. For example |wrap-label={\fbox{#1}}|
% or you can create a command:
%
% \iffalse
%<*example>
% \fi
\begin{examplecode}[frame=none]
\NewDocumentCommand \itembx { s +m }
  {%
    \IfBooleanTF{#1}
      {\strut\smash{\parbox[t]{\labelwidth}{\raggedright{#2}}}}%
      {\strut\smash{\parbox[t]{\labelwidth}{\raggedleft{#2}}}}%
  }
\end{examplecode}
% \iffalse
%</example>
% \fi
%
% and then pass it through the key |wrap-label={\itembx{#1}}| or |wrap-label={\itembx*{#1}}|.
%
% \smallskip
%
% \keyexamp{wrap-label\textcolor{MediumOrchid}{*}}{code{} \space\usebox{\hashbox} more code}{empty}
% The same as the \mykey{wrap-label} key but also applies on \ics*{item}\myoarg[type=tt]{custom}.
%
% \subsection{Keys for spaces}
%
% \keyexamp{show-length}{true \textnormal{\textcolor{lightgray}{\textbar}} false}{false}
% Displays on the terminal the values for \emph{all list parameters} at the current level.
% For \emph{vertical spaces} show the values of |\topsep|, |\itemsep|, |\parsep| and |\partopsep|.
% For \emph{horizontal spaces} show the values of |\labelwidth|, |\labelsep|, |\itemindent|, |\listparindent| and |\leftmargin|.
%
% \subsubsection{Vertical spaces}
%
% \keyexamp{topsep}{rubber length \textnormal{\textcolor{lightgray}{\textbar}} rigid length}{by levels}
% Set the \emph{vertical space} added to both the top and bottom of the list.
% Internally sets the value of \ics{topsep} for the current level.
% The default values for first level are \mydim{8.0pt plus 2.0pt minus 4.0pt},
% for second level are \mydim{4.0pt plus 2.0pt minus 1.0pt}, for third and
% fourth level are \mydim{2.0pt plus 1.0pt minus 1.0pt}.
%
% \smallskip
%
% \keyexamp{parsep}{rubber length \textnormal{\textcolor{lightgray}{\textbar}} rigid length}{by levels}
% Set the \emph{vertical space} between paragraphs within an item. Internally
% sets the value of \ics{parsep} for the current level. The default
% values for first level are \mydim{4.0pt plus 2.0pt minus 1.0pt},
% for second level are \mydim{2.0pt plus 1.0pt minus 1.0pt}, for third and
% fourth level are \mydim{0pt}.
%
% \smallskip
%
% \keyexamp{partopsep}{rubber length \textnormal{\textcolor{lightgray}{\textbar}} rigid length}{by levels}
% Set the \emph{vertical space} added, beyond \mykey{topsep}, to the \enquote{top} and \enquote{bottom}
% of the entire environment if the environment instance is preceded by a \emph{\enquote{blank
% line}} or |\par| command. Internally sets the value of \ics{partopsep} for the current level.
% The default values for first and second level are \mydim{2.0pt plus 1.0pt minus 1.0pt},
% for third and fourth level are \mydim{1.0pt minus 1.0pt}.
%
% \smallskip
%
% \begin{important}*
% The value of this parameter also affects the \emph{inner levels} and the
% \myenv*{keyans} environment. Caution should be taken with
% \emph{\enquote{blank lines}} or |\par| command \emph{\enquote{before}} each
% environment or nested level when formatting the source code of document.
% \hologo{TeX} will enter \mymeta{vertical mode} and apply this value to
% the \enquote{top} and \enquote{bottom} the environment or nested level.
% \end{important}
%
% \keyexamp{itemsep}{rubber length \textnormal{\textcolor{lightgray}{\textbar}} rigid length}{by levels}
% Set the \emph{vertical space} between items, beyond the \mykey{parsep}.
% Internally sets the value of \ics{itemsep} for the current level.
% The default values for first level are \mydim{4.0pt plus 2.0pt minus 1.0pt},
% for the rest of the levels are \mydim{2.0pt plus 1.0pt minus 1.0pt}.
%
% \keyexamp*{noitemsep}{value forbidden}{not used}
% This is a \emph{\enquote{meta-key}} that does not receive an argument. Set
% \mykey{itemsep} and \mykey{parsep} equal to \mydim{0pt} the entire level of environment.
%
% \smallskip
%
% \keyexamp*{nosep}{value forbidden}{not used}
% This is a \emph{\enquote{meta-key}} that does not receive an argument. Sets all keys
% for vertical spacing equal to \mydim{0pt} the entire level of environment.
%
% \smallskip
%
% \begin{important}*
% The following \mymeta{keys} should be used with \emph{\enquote{caution}}, they
% are intended to be used at the \enquote{top} and \enquote{bottom} of the environment when the
% \mykey{columns} or \mykey{mini-env} keys do not provide adequate
% \emph{vertical spaces}.
% The values ​​passed can be \emph{rubber} or \emph{rigid} lengths, the
% way they are applied is the way you differ, using the \emph{star} ‘|*|’ \mymeta{keys} applies
% |\vspace*| so that \hologo{LaTeX} does \emph{not discard} this space at
% page break.
% \end{important}
%
% \smallskip
%
% \keyexamp{above}{rubber length \textnormal{\textcolor{lightgray}{\textbar}} rigid length}{not used}
% Set the \emph{extra vertical space} added, beyond \mykey{topsep}, to
% the top of the entire level of environment. This key is intended to
% give a \emph{\enquote{fine adjustment}} of the vertical space on the
% \emph{\enquote{above}} the environment without hindering the value of
% the \mykey{topsep} key. The space is added with |\vspace| so is
% \emph{\enquote{discardable}}.
%
% \smallskip
%
% \keyexamp{above\textcolor{MediumOrchid}{*}}{rubber length \textnormal{\textcolor{lightgray}{\textbar}} rigid length}{not used}
% Set the \emph{extra vertical space} added, beyond \mykey{topsep}, to
% the top of the entire level of environment. This key is intended to
% give a \emph{\enquote{fine adjustment}} of the vertical space on the
% \emph{\enquote{above}} the environment without hindering the value of
% the \mykey{topsep} key. The space is added with |\vspace*| so is
% \emph{\enquote{not discardable}}.
%
% \smallskip
%
% \keyexamp{below}{rubber length \textnormal{\textcolor{lightgray}{\textbar}} rigid length}{not used}
% Set the \emph{extra vertical space} space added, beyond \mykey{topsep}, to
% the bottom of the entire level of environment. This key is intended to
% give a \emph{\enquote{fine adjustment}} of the vertical space on the
% \emph{\enquote{below}} the environment without hindering the value of
% the \mykey{topsep} key. The space is added with |\vspace| so is
% \emph{\enquote{discardable}}.
%
% \smallskip
%
% \keyexamp{below\textcolor{MediumOrchid}{*}}{rubber length \textnormal{\textcolor{lightgray}{\textbar}} rigid length}{not used}
% Set the \emph{extra vertical space} space added, beyond \mykey{topsep}, to
% the bottom of the entire level of environment. This key is intended to
% give a \emph{\enquote{fine adjustment}} of the vertical space on the
% \emph{\enquote{below}} the environment without hindering the value of
% the \mykey{topsep} key. The space is added with |\vspace*| so is
% \emph{\enquote{not discardable}}.
%
% \subsubsection{Horizontal spaces}
%
% \keyexamp{itemindent}{rigid length}{\mydim{0}pt}
%
% Extra \emph{horizontal indentation}, beyond \mykey{labelsep}, of the
% \emph{\enquote{first line}} off each item. This value is applied
% internally using |\hspace| and does not modify the value of
% |\itemindent|.
%
% \keyexamp{rightmargin}{rigid length}{\mydim{0}pt}
% Set the \emph{horizontal space} between the right margin of the environment and the
% right margin of the enclosing environment, the value it takes must be
% greater than or equal to \mydim{0pt}. Internally sets the value of
% \ics{rightmargin} for the current level.
%
% \smallskip
%
% \keyexamp{listparindent}{rigid length}{\mydim{0}pt}
% Sets the \emph{horizontal space} indentation, beyond
% \mykey{list-indent}, for second and subsequent paragraphs within a list
% item. Internally sets the value of \ics{listparindent} for the current
% level.
%
% \smallskip
%
% \keyexamp{list-offset}{rigid length}{\mydim{0}pt}
% Sets the \emph{horizontal translation} of the entire environment level from the left edge
% of the box defined by the \mykey{labelwidth} key. Internally sets the values of
% |\leftmargin| and |\itemindent| for the current level.
%
% \smallskip
%
% \keyexamp{list-indent}{rigid length}{labelwidth + labelsep}
% Sets the \emph{indentation} of the whole environment under the box defined by
% \mykey{labelwidth} and \mykey{labelsep} keys. Internally sets the value of
% |\leftmargin| and |\itemindent| for the current level.
%
% \smallskip
%
% \begin{important}*
% If |list-indent=|\mydim{0pt} the \mymeta{label} will be part of the
% text, separated by the value of the \mykey{labelsep} key and the \emph{first word},
% in simple terms it will look like a \emph{\enquote{common paragraph}}. This
% setting is equivalent (more or less) to the \textcolor{optcolor}{\texttt{wide}}
% key provided by the \mypkg{enumitem} package.
% \end{important}
%
% \subsection{Keys for add \texttt{code}}
%
% \begin{important}*
% The following \mymeta{keys} should be used with \emph{\enquote{caution}}, they
% are intended to inject \mymarg[type=tt]{code} into different parts of
% the defined environments. We must keep in mind that the defined
% environments are based on the \myenv{list} base environment provided by
% \hologo{LaTeX} which is defined (simplified) as plain form
% |\list|\mymarg[type=tt]{arg one}\mymarg[type=tt]{arg two}.
% Using the \mykey{before*} key does not allow access to the \myenv{list}
% parameters defined by \myoarg[type=tt]{key
% \textnormal{\textcolor{gray}{=}} val}.
% \end{important}
%
% \smallskip
%
% \keyexamp{before}{code}{not used}
% Execute \mymarg[type=tt]{code} \emph{\enquote{before}} the
% environment starts. The \mymarg[type=tt]{code} must be passed between braces, is executed
% \emph{\enquote{after}} performing all calculations related to the
% \emph{list parameters} in the environment and the parameters sets by
% \myoarg[type=tt]{key \textnormal{\textcolor{gray}{=}} val} that is, in the second argument of the list after setting all the parameters
% |\list|\mymarg[type=tt]{arg one}|{|\mymeta{arg two}\mymarg[type=tt,cbc=pkgcolor,ac=araracolor]{code}|}|.
%
% \smallskip
%
% \keyexamp{before\textcolor{MediumOrchid}{*}}{code}{not used}
% Execute \mymarg[type=tt]{code} \emph{\enquote{before}} the
% environment starts. The \mymarg[type=tt]{code} must be passed between braces, is executed
% \emph{\enquote{before}} performing all calculations related to the \emph{list
% parameters} and \myoarg[type=tt]{key \textnormal{\textcolor{gray}{=}}
% val} sets in the environment that is,
% before the arguments defining the environment are executed:
% \mymarg[type=tt,cbc=pkgcolor,ac=araracolor]{code}|\list|\mymarg[type=tt]{arg
% one}\mymarg[type=tt]{arg two}.
%
% \smallskip
%
% \keyexamp{first}{code}{not used}
% Executes \mymarg[type=tt]{code} when \emph{\enquote{starting}} the
% environment. The \mymarg[type=tt]{code} must be passed between
% braces, is executed right \emph{\enquote{after}} all \emph{list
% parameters} are done, after the second argument of list, just before the first occurrence of \ics*{item}:
% |\list|\mymarg[type=tt]{arg one}\mymarg[type=tt]{arg two}\mymarg[type=tt,cbc=pkgcolor,ac=araracolor]{code}|\item|.
%
% \smallskip
%
% \begin{important}*
% Keep in mind that the code set in this key will affect the entire
% \emph{\enquote{body}} of the environment and therefore the inner levels
% of the list and the \myenv*{keyans} environment. It is recommended to
% set this key per level.
% \end{important}
%
% \keyexamp{after}{code}{not used}
% Execute \mymarg[type=tt]{code} \emph{\enquote{after}} finishing the
% environment. The \mymarg[type=tt]{code} must be passed between braces.
%
% \subsection{Keys for \texttt{start} and \texttt{resume}}
%
% \keyexamp{start}{integer \textnormal{\textcolor{lightgray}{\textbar}} string}{\mydim{1}}
% Sets the \emph{start value} of the numbering on the current level.
% Internally \mymeta{string} is passed as value to the counter defined by
% \mykey{label} key on the current level, i.e. it is equivalent to enter
% |start=5|, |start=E| or |start=v|.
%
% \keyexamp*{resume}{value forbidden}{not used}
% Sets the \emph{start} to value from the previous of the counter
% defined by \mykey{label} key for the \emph{\enquote{first level}}. This
% \mymeta{key} does not receive an argument. The \mymeta{key} can be
% overwritten using the \mykey{start} key. If the \mykey{save-ans} key is
% present and \mymarg[type=tt]{store name} exist, the numbering will
% continue according to this key. This key is \emph{\enquote{only}}
% available for the \emph{\enquote{first level}} of \myenv*{enumext}.
%
% \subsection{Keys for \env{multicols}}\label{key:multi}
%
% \keyexamp{columns}{integer}{\mydim{1}}
% Set the \emph{number of columns} to be used by the \myenv{multicols}
% environment within the environment. The value must be a positive
% integer less than or equal to \mydim{10}.
%
% \smallskip
%
% \keyexamp{columns-sep}{rigid length}{by level}
% Set the \emph{space between} columns used by the \myenv{multicols}
% environment within the environment. Internally sets the value of
% \ics{columnsep}, by default its value is equal to the sum of the
% values set in the keys \mykey{labelwidth} and \mykey{labelsep} of the
% current level.
%
% \smallskip
%
% \begin{important}*
% The |\footnote|\mymarg[type=tt]{text} command in the nested levels of \myenv{multicols} will not
% work as expected, prefer the use of |\footnotemark|\myoarg[type=tt]{number} inside the
% environment and |\footnotetext|\myoarg[type=tt]{number}\mymarg[type=tt]{text} outside the environment
% or via the \mykey{after} key.
% \end{important}
%
% \subsection{Keys for \env{minipage}}\label{key:mini}
%
% \keyexamp{mini-env}{rigid length}{not used}
% Sets the \emph{width} of the \myenv{minipage} environment on
% the \emph{\enquote{right side}}. This value added to the value set by
% the \mykey{mini-sep} key to determines the \emph{width} of the
% \myenv{minipage} environment on the \emph{\enquote{left side}}, taking
% \ics{linewidth} as the maximum reference value.
%
% \keyexamp{mini-sep}{rigid length}{\mydim{0.3333}em}
% Sets the \emph{space between} the \myenv{minipage} environment on the
% \emph{\enquote{left side}} and the \myenv{minipage} environment on
% the \emph{\enquote{right side}}. This separation is applied together
% with |\hfill|.
%
% \subsubsection{The command \cs[no-index]{miniright}}
%
% \vspace*{-1.75\baselineskip}
% \begin{function}{\miniright,\miniright*}
%
% The \ics*{miniright} command close the \myenv{minipage}
% environment on the \emph{\enquote{left side}} and opens the
% \myenv{minipage} environment on the \emph{\enquote{right side}} by
% starting it with the |\centering| command. It
% must be placed \emph{\enquote{after}} the last \ics*{item} of the
% current environment and \emph{\enquote{before}} starting the material
% to be placed on the \emph{\enquote{right side}}.
%
% The \emph{starred version} ‘|*|’ inhibits the use of |\centering|
% command i.e. the usual \hologo{LaTeX} justification is maintained in
% the \myenv{minipage} on the \emph{\enquote{right side}}.
% \end{function}
%
% \begin{important}*
% The |\footnote|\mymarg[type=tt]{text} command in \myenv{minipage} environment will work as
% usual. If you prefer the footnotes to be numbered (not lowercase) and
% outside the environment, use |\footnotemark|\myoarg[type=tt]{number} inside the
% environment and |\footnotetext|\myoarg[type=tt]{number}\mymarg[type=tt]{text} outside the environment
% or via the \mykey{after} key.
% \end{important}
%
% \subsubsection{The key \texttt{miniright}}
%
% In the horizontal list environments \myenv*{enumext*} and \myenv*{keyans*}
% it is not possible to use the \ics*{miniright} command and the \mykey{miniright}
% key must be used instead.
%
% \keyexamp{miniright}{code for drawing or tabular}{not used}
% Set the \emph{code} for the drawing or tabular to be placed in the
% \myenv{minipage} environment on the \emph{\enquote{right side}} by
% starting it with the command |\centering|.
%
% \keyexamp{miniright\textcolor{MediumOrchid}{*}}{code for drawing or tabular}{not used}
% Same as above, but \emph{without} starting with the |\centering| command.
%
% \section{The storage system}\label{sec:storage system}
%
% The entire mechanism for \emph{\enquote{storing content}} it is
% activated according to \mykey{save-ans} key on the
% \emph{\enquote{first level}} of \myenv*{enumext} environment. Only
% when this \mymeta{key} is \emph{\enquote{active}} the \ics*{anskey}
% command and the environments \myenv*{keyans} and \myenv*{keyanspic} are
% available.
%
% \iffalse
%<*example>
% \fi
\vspace*{-1\baselineskip}
\begin{minipage}[t]{0.45\linewidth}
\centering
\begin{examplecode}[frame=none,mathescape=true]
\begin{enumext}[save-ans=`\mymarg[type=tt]{store name}`]
  \item Text
    \begin{keyans}
          $\cdots$
    \end{keyans}
\end{enumext}
\end{examplecode}
\end{minipage}\hfill
\begin{minipage}[t]{0.45\linewidth}
\vspace{0pt}\centering
\begin{examplecode}[frame=none,mathescape=true]
\begin{enumext}[save-ans=`\mymarg[type=tt]{store name}`]
  \item Text
    \begin{keyanspic}
          $\cdots$
    \end{keyanspic}
\end{enumext}
\end{examplecode}
\end{minipage}
% \iffalse
%</example>
% \fi
% \subsection{Keys for storage}\label{subsec:storage-keys}
%
% \keyexamp{save-ans}{store name}{not set}
% Sets the \emph{name} of the \mymeta{sequence} and
% \mymeta{prop list} in which the contents will be \emph{\enquote{stored}} by
% \ics*{anskey} in \myenv*{enumext} environment, \ics*{item*} in
% \myenv*{keyans} and \myenv*{keyans*} environments and \ics*{anspic*} in \myenv*{keyanspic}
% environment. If the \mymeta{sequence} or \mymeta{prop list} does not
% exist, it will be created globally.
%
% \smallskip
%
% \keyexamp{wrap-ans}{code{} \space\usebox{\hashbox} more code}{\textbackslash{}fbox\{\#1\}}
% Wraps the \emph{current argument} passed \ics*{anskey} command to
% referenced by |{#1}|. The \mymarg[type=tt]{code} must be passed between
% braces and only affects the \mymeta{current argument} passed to
% \ics*{anskey} and NOT the \emph{\enquote{stored content}} in the \mymeta{store name}
% set by \mykey{save-ans} key. If this key is passed using the
% \ics*{setenumext} command it is necessary to use double ‘|{##1}|’.
%
% \keyexamp{wrap-opt}{code{} \space\usebox{\hashbox} more code}{[\{\#1\}]}
% Wraps the \emph{optional argument} passed to the
% \ics*{item*} and \ics*{anspic*} commands referenced by |{#1}|
% in the \myenv*{keyans}, \myenv*{keyans*} and \myenv*{keyanspic}
% environments. The \mymarg[type=tt]{code} must be passed between braces
% and only affects the current \mymeta{optional argument} and NOT the
% \emph{\enquote{stored content}} in \mymeta{store name} set by
% \mykey{save-ans} key. If this key is passed using the \ics*{setenumext}
% command, it is necessary to use the double ‘|{##1}|’.
%
% \keyexamp{save-sep}{text symbol}{\{, \}}
% Sets the \emph{text symbol} that will separate the current
% \mymeta{label} defined by the \mykey{label} key from the
% \mymeta{optional argument} (if present), when storing them in
% the \mymeta{store name} defined by the \mykey{save-ans} key for the
% \ics*{item*} command in the \myenv*{keyans} and \myenv*{keyans*}
% environment and for the \ics*{anspic} command in the \myenv*{keyanspic}
% environment. The \mymarg{text symbol} must always be passed between
% braces, whitespace ‘\verb*+ +’ is preserved within the braces and only
% affects the \emph{\enquote{stored content}} and not what is displayed
% when using the \mykey{show-ans} or \mykey{show-pos} keys.
%
% \keyexamp{mark-ans}{symbol}{\textbackslash{}textasteriskcentered}
% Sets the \emph{symbol} to be displayed in the left margin of the
% \emph{\enquote{stored content}} in \mymeta[type=tt]{store name} set by
% \mykey{save-ans} key when using \mykey{show-ans} key.
%
% \smallskip
%
% \keyexamp{mark-pos}{left \textnormal{\textcolor{lightgray}{\textbar}} right}{left}
% Sets the aligned of the \emph{symbol} defined by \mykey{mark-ans} key. The
% \emph{\enquote{symbol}} is aligned in a box with the same dimensions of the label box
% defined by \mykey{labelwidth} key on the current level and separated by the value of the
% \mykey{labelsep} key.
%
% \subsection{Keys for internal \texttt{label} and \texttt{ref}}\label{subsec:label-ref}
%
% \keyexamp{save-ref}{true \textnormal{\textcolor{lightgray}{\textbar}} false}{false}
% Activates the internal \emph{\enquote{label and ref}} mechanism for
% referencing \emph{\enquote{stored content}} in \mymeta[type=tt]{store name} set by \mykey{save-ans} key. To reference the location
% of the \emph{\enquote{stored content}} within the environment you must
% use |\ref|\mymarg[type=tt]{store name \textnormal{\textcolor{red}{:}} position},
% where \mymeta{position} corresponds to the position occupied by the
% \emph{\enquote{stored content}} in the \mymeta[type=tt]{store name} returned by the \mykey{show-pos} key.
% For example |\ref{test:4}| will return |3.(b)| which corresponds to the
% location of the \emph{\enquote{stored content}} at position |4| within
% the environment in which the key \mykey{save-ans}|=test| was set.
%
% \smallskip
%
% \keyexamp{mark-ref}{symbol}{\textbackslash{}textasteriskcentered}
% Sets the \emph{symbol} that will be displayed by the \ics*{printkeyans}
% command only if the \mypkg{hyperref} package is detected and the
% \mykey{save-ref} key are active.
% This \emph{\enquote{symbol}} is used as a \emph{\enquote{link}} between the environment
% in which the \mykey{save-ans} key was used and the place where the
% command is executed.
%
% \subsection{Keys for debugging and checking}
%
% \keyexamp{show-ans}{true \textnormal{\textcolor{lightgray}{\textbar}} false}{false}
% Displays the \emph{current} \mymeta{argument} passed to \ics*{anskey} in
% \myenv*{enumext} environment, the current \mymeta{label}
% for \ics*{item*} in \myenv*{keyans} environment and the current
% \mymeta{label} for \ics*{anspic*} in \myenv*{keyanspic}
% environment at the place where it is executed. If the optional
% argument is present in \ics*{item*} or \ics*{anspic*} it will
% be shown in square brackets.
%
% \smallskip
%
% \keyexamp{show-pos}{true \textnormal{\textcolor{lightgray}{\textbar}} false}{false}
% Displays the \emph{position} occupied by the \emph{\enquote{stored content}} by
% \ics*{anskey} in \myenv*{enumext} environment, \ics*{item*} in
% \myenv*{keyans} environment and \ics*{anspic*} in \myenv*{keyanspic}
% environment in \mymeta[type=tt]{store name} set by \mykey{save-ans} key.
% This position is used by the \ics*{getkeyans} command and by the |\ref|
% command if the \mykey{save-ref} key is active.
%
% \smallskip
%
% \keyexamp{check-ans}{true \textnormal{\textcolor{lightgray}{\textbar}} false}{false}
% Enables the \emph{checking answer} mechanism. This key works under the logic that
% each question will contain \emph{\enquote{only one answer}}, it is
% intended to be used in conjunction with \mykey{no-store} key.
%
% \smallskip
%
% \keyexamp*{no-store}{value forbidden}{not used}
% This is a \emph{meta-key} that does not receive an argument. This key is
% used in conjunction with \mykey{check-ans} and is designed to be used
% with nested levels of \myenv*{enumext} in which the \ics*{anskey}
% command will not be used.
%
% \subsection{The command \cs[no-index]{anskey}}
% \label{sec:anskey}
%
% \newsavebox{\exaboxtmp}
% \begin{lrbox}{\exaboxtmp}
%    \small\ttfamily
%    \textcolor{pkgcolor}{\textbackslash anskey}\mymarg[type=tt]{content}
% \end{lrbox}
%
% \vspace*{-\baselineskip}
%
% \begin{function}{\anskey}
%   \begin{syntax}
%    \usebox{\exaboxtmp}
%   \end{syntax}
%  The \ics*{anskey} command takes a mandatory argument and is
%  triggered by \mykey{save-ans} key. The \emph{\enquote{content}} are
%  \emph{\enquote{stored}} in \mymeta[type=tt]{store name} set by \mykey{save-ans} key.
%  The command does \emph{\enquote{not support}} verbatim content and must NOT be nested. By design it is
%  assumed that each \ics*{item} or \ics*{item*} will have a \emph{\enquote{single}}
%  occurrence of the command unless a nested level is opened or the
%  \mykey{no-store} key is used.
%  If \mykey{save-ref} key are active and the \mypkg{hyperref}\cite{hyperref} package is detected,
%  |\hyperlink| and |\hypertarget| will be used, otherwise the
%  usual \emph{\enquote{label and ref}} system provided by \hologo{LaTeX} will be used.
% \end{function}
%
% \subsubsection*{Example}
%
% \begin{enumext}[save-ans=test,show-ans=true,columns=2,nosep]
%   \item* Text containing our instructions or questions.\anskey{first answer}
%   \item Text containing our instructions or questions.
%     \begin{enumext}
%       \item Question.\anskey{second answer}
%     \end{enumext}
%   \item Text containing our instructions or questions. \anskey{third answer}
%   \item Text containing our instructions or questions. \anskey{fourth answer}
% \end{enumext}
%
% \iffalse
%<*example>
% \fi
\begin{examplecode}[frame=single]
\begin{enumext}[save-ans=test,show-ans=true]
  \item* Text containing our instructions or questions. `\ics*{anskey}\mymarg[type=tt]{first answer}`
  \item Text containing our instructions or questions.
    \begin{enumext}
      \item Question.`\ics*{anskey}\mymarg[type=tt]{second answer}`
    \end{enumext}
  \item Text containing our instructions or questions. `\ics*{anskey}\mymarg[type=tt]{third answer}`
  \item Text containing our instructions or questions. `\ics*{anskey}\mymarg[type=tt]{fourth answer}`
\end{enumext}
\end{examplecode}
% \iffalse
%</example>
% \fi
%
% \subsection{The environment \texttt{keyans}}
%
% \vspace*{-\baselineskip}
%
% \begin{function}{keyans,keyans*}
%   \begin{syntax}
%     |\begin{keyans}|\myoarg[type=tt]{key \textnormal{\textcolor{gray}{=}} val} \ics*{item} \ics*{item}\myoarg[type=tt]{custom} \ics*{item*} \ics*{item*}\myoarg[type=tt]{content} |\end{keyans}|\par
%     |\begin{keyans*}|\myoarg[type=tt]{key \textnormal{\textcolor{gray}{=}} val} \ics*{item} \ics*{item}\myoarg[type=tt]{custom} \ics*{item*} \ics*{item*}\myoarg[type=tt]{content} |\end{keyans*}|
%   \end{syntax}
% The \myenv*{keyans} is an \emph{\enquote{enumerated
% list}} environment designed for \emph{\enquote{multiple choice}}
% questions activated by the \mykey{save-ans} key.
% This environment can NOT be nested and must always be at the
% \emph{\enquote{first level}} of the \myenv*{enumext} environment, the
% commands \ics*{item} and \ics*{item}\myoarg[type=tt]{custom} work in the usual.
% \end{function}
%
% \iffalse
%<*example>
% \fi
\begin{examplecode}[frame=none]
\begin{enumext}[save-ans=test]
  \item `\mymeta[type=tt,ac=lightgray,cf=gray]{item content}`
    \begin{keyans}`\myoarg[type=tt]{key \textnormal{\textcolor{gray}{=}} val}`
      \item `\mymeta[type=tt,ac=lightgray,cf=gray]{item content}`
      \item `\myoarg[type=tt]{custom} \mymeta[type=tt,ac=lightgray,cf=gray]{item content}`
      \item* `\mymeta[type=tt,ac=lightgray,cf=gray]{item content}`
      `\ics*{item*}\myoarg[type=tt]{content} \mymeta[type=tt,ac=lightgray,cf=gray]{item content}`
    \end{keyans}
\end{enumext}
\end{examplecode}
% \iffalse
%</example>
% \fi
%
% The \mymeta{keys} set in the optional argument of the environment are the same
% (almost) as those of the \myenv*{enumext} environment and have higher
% precedence than those set by
% \ics*{setenumext}\myoarg[type=tt]{keyans}\mymarg[type=tt]{key \textnormal{\textcolor{gray}{=}} val}.
% If the optional argument is not passed or the \mymeta{keys} are not set by
% \ics*{setenumext}, the default values will be the same as the second
% level of the \myenv*{enumext} environment with the difference in the
% \mymeta{label} which will be set to \mykey{label}=\ilabel*{Alph*)}.
%
% \subsubsection{The \cs[no-index]{item*} in \texttt{keyans}}
%
% \vspace*{-\baselineskip}
%
% \begin{function}{\item*}
%   \begin{syntax}
%     \ics*{item*}
%     \ics*{item*}\myoarg[type=tt]{content}
%   \end{syntax}
%    The \ics*{item*} and \ics*{item*}\myoarg[type=tt]{content} command store
%    the current \mymeta{label} set by \mykey{label} key next to the \mymeta{content} (if it is present)
%    in \mymeta[type=tt]{store name} set by \mykey{save-ans} key in the \emph{\enquote{first level}} of the
%    \myenv*{enumext} environment.
%
%    \smallskip
%
%    The \emph{starred version} ‘|*|’ cannot be separated by spaces ‘\verb*| |’
%    from the command, i.e. \ics*{item*} and the optional argument does \emph{\enquote{not support}} verbatim
%    content. By design it is assumed that the \emph{starred version} ‘|*|’ will only
%    appear \emph{\enquote{once}} within the environment.
% \end{function}
%
% \smallskip
%
% \begin{important}*
% The behavior of |\item*| in \myenv*{keyans} environment is NOT the same as in the
% \myenv*{enumext} environment.
% \end{important}
%
% \subsubsection*{Example}
%
% \iffalse
%<*example>
% \fi
\begin{examplecode}[frame=single]
\begin{enumext}[save-ans=test,columns=2,show-ans=true]
  \item Text containing a question.
    \begin{keyans}[nosep]
      \item Choice
      \item* Correct choice
      \item Choice
      \item Choice
    \end{keyans}

  \item Text containing a question and image.
    \begin{keyans}[nosep,mini-env={0.4\linewidth}]
      \item Choice
      \item Choice
      \item Choice
      \item Choice
      `\ics*{item*}\myoarg[type=tt]{note}` Correct choice
      \miniright
      \includegraphics[scale=0.25]{example-image-a}

      Some text
    \end{keyans}
\end{enumext}
\end{examplecode}
% \iffalse
%</example>
% \fi
%
% \begin{enumext}[save-ans=test,show-ans=true,columns=2]
%  \item Text containing a question.
%
%    \begin{keyans}[nosep]
%      \item Choice
%      \item* Correct choice
%      \item Choice
%      \item Choice
%    \end{keyans}
%
%   \item Text containing a question and image.
%
%     \begin{keyans}[nosep,mini-env={0.4\linewidth}]
%       \item Choice
%       \item Choice
%       \item Choice
%       \item Choice
%       \item*[note] Correct choice
%       \miniright
%       \includegraphics[scale=0.15]{example-image-a}
%
%       Some text
%     \end{keyans}
% \end{enumext}
%
% \subsection{The environment \texttt{keyanspic}}
%
% \vspace*{-\baselineskip}
%
% \begin{function}{keyanspic}
%   \begin{syntax}
%     |\begin{keyanspic}|\myoarg[type=tt]{number above, number below}\ics*{anspic}\mymarg[type=tt]{drawing}\ics*{anspic*}\myoarg[type=tt]{content}\mymarg[type=tt]{drawing}
%   \end{syntax}
% The \myenv*{keyanspic} is a \emph{\enquote{fake enumerated list}}
% environment that which uses the \ics*{anspic} command instead of
% |\item|. It is activated by the \mykey{save-ans} key and has the
% same settings as the \myenv*{keyans} environment. It is intended for placing
% \emph{\enquote{drawings}} or \emph{\enquote{tabular}} with an in-line
% or \emph{above} and \emph{below} layout. A representation of
% the output can be seen in the figure \ref{fig:keyanspicdoc}.
% \end{function}
%
% \begin{figure}[ht]
%   \centering
%   \begin{tikzpicture}[line cap=round,line join=round,x=0.8cm,y=0.8cm,every node/.style={font=\footnotesize}]
%     % space above
%     \draw[color=white] (7.0,6.10) rectangle (17.5,6.5) node[pos=.5,text=black]%
%       { \textcolor{lightgray}{\texttt{number of drawings or tabular above}} };
%     \draw[color=white] (7.0,4.5) rectangle (17.5,4.9) node[pos=.5,text=black]%
%       { \textcolor{optcolor}{\texttt{parsep [+itemsep]}} };
%     \draw[color=white] (7.0,2.9) rectangle (17.5,3.3) node[pos=.5,text=black]%
%       { \textcolor{lightgray}{\texttt{number of drawings or tabular below}} };
%     \draw[<->,color=gray] (2.0,7.0) --node[above,text=optcolor]{\vphantom{p}\texttt{labelwidth}} (5.0,7.0);
%     \draw[<->,color=gray] (5.0,7.0) --node[above,text=optcolor]{\texttt{labelsep}} (7.0,7.0);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (2.0,6.5) rectangle (5.0,6.85);% labelwidth
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (5.0,6.5) rectangle (7.0,6.85);% labelsep
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,6.5) rectangle (17.5,6.85) node[pos=.5,text=black]%
%       {\begin{tabular}{c}
%          \textcolor{blue}{\emph{item text above the keyanspic environment}}
%        \end{tabular}};% item width
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,5.25) rectangle (10.5,6.10) node[pos=.5,text=black]%
%       {\begin{tabular}{c}
%          \texttt{above one} \\
%          \textcolor{blue}{\emph{drawing or tabular}}
%        \end{tabular}};
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,4.9) rectangle (10.5,5.25) node[pos=.5,text=black]%
%       { \textcolor{blue}{\texttt{label}} };
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (10.5,5.25) rectangle (14,6.10) node[pos=.5,text=black]%
%       {\begin{tabular}{c}
%          \texttt{above two} \\
%          \textcolor{blue}{\emph{drawing or tabular}}
%        \end{tabular}};
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (10.5,4.9) rectangle (14,5.25) node[pos=.5,text=black]%
%       { \textcolor{blue}{\texttt{label}} };
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (14,5.25) rectangle (17.5,6.10) node[pos=.5,text=black]%
%      {\begin{tabular}{c}
%          \texttt{above three} \\
%          \textcolor{blue}{\emph{drawing or tabular}}
%        \end{tabular}};
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (14,4.9) rectangle (17.5,5.25) node[pos=.5,text=black]%
%       { \textcolor{blue}{\texttt{label}} };
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,3.65) rectangle (12.25,4.5) node[pos=.5,text=black]%
%      {\begin{tabular}{c}
%          \texttt{below one} \\
%          \textcolor{blue}{\emph{drawing or tabular}}
%        \end{tabular}};
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,3.3) rectangle (12.25,3.65) node[pos=.5,text=black]%
%       { \textcolor{blue}{\texttt{label}} };
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (12.25,3.65) rectangle (17.5,4.5) node[pos=.5,text=black]%
%      {\begin{tabular}{c}
%          \texttt{below two} \\
%          \textcolor{blue}{\emph{drawing or tabular}}
%        \end{tabular}};
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (12.25,3.3) rectangle (17.5,3.65) node[pos=.5,text=black]%
%       { \textcolor{blue}{\texttt{label}} };
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (2.0,2.55) rectangle (5.0,2.9);% labelwidth
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (5.0,2.55) rectangle (7.0,2.9);% labelsep
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,2.55) rectangle (17.5,2.9) node[pos=.5,text=black]%
%       {\begin{tabular}{c}
%          \textcolor{blue}{\emph{item text below the keyanspic environment}}
%        \end{tabular}};% item width
%   \end{tikzpicture}
%   \caption{Representation of the \myenv*{keyanspic} environment with optional argument [3,2] in \mypkg*{enumext}.}
%   \label{fig:keyanspicdoc}
% \end{figure}
%
% The optional argument determines the number drawings
% or tabular \emph{\enquote{above}} and \emph{\enquote{below}} within the environment. The vertical separation
% between \emph{\enquote{above}} and \emph{\enquote{below}} is controlled by the values set
% by \mykey{parsep} and \mykey{itemsep} keys passed to \myenv*{keyans}
% environment. If the optional argument or the second part of it is
% omitted the drawings or  tabular will be put on a single line.
%
% \subsubsection{The command \cs[no-index]{anspic}}
%
% \vspace*{-\baselineskip}
%
% \begin{function}{\anspic}
%   \begin{syntax}
%      \cmdexamp{anspic}{drawing or tabular}
%      \cmdexamp[*]{anspic}[content]{drawing or tabular}
%   \end{syntax}
%    The \ics*{anspic} command take three arguments, the
%    \emph{starred version} ‘|*|’ store the current \mymeta{label} next to the \mymeta{content} (if it is present)
%    in \mymeta{store name} set by \mykey{save-ans} key.
%
%    \smallskip
%
%    The \emph{starred version} ‘|*|’ cannot be separated by spaces ‘\verb*| |’
%    from the command, i.e. \ics*{anspic*} and the optional argument does \emph{\enquote{not support}} verbatim
%    content. By design it is assumed that the \emph{starred version} ‘|*|’ will only
%    appear \emph{\enquote{once}} within the environment.
%
% \end{function}
%
% \subsubsection*{Example}
%
% \iffalse
%<*example>
% \fi
\begin{examplecode}[frame=single]
\begin{enumext}[save-ans=test,show-ans,nosep]
  \item Question with images.
    \begin{keyanspic}[3,2]
      \anspic{\includegraphics[scale=0.15]{example-image-a}}
      \anspic{\includegraphics[scale=0.15]{example-image-b}}
      \anspic{\includegraphics[scale=0.15]{example-image-a}}
      \anspic{\includegraphics[scale=0.15]{example-image-a}}
      \anspic*[note]{\includegraphics[scale=0.15]{example-image-a}}
    \end{keyanspic}
\end{enumext}
\end{examplecode}
% \iffalse
%</example>
% \fi
%
% \begin{enumext}[save-ans=test,show-ans=true,nosep]
%  \item Question with images.
%    \begin{keyanspic}[3,2]
%      \anspic{\includegraphics[scale=0.15]{example-image-a}}
%      \anspic{\includegraphics[scale=0.15]{example-image-b}}
%      \anspic{\includegraphics[scale=0.15]{example-image-a}}
%      \anspic{\includegraphics[scale=0.15]{example-image-a}}
%      \anspic*[note]{\includegraphics[scale=0.15]{example-image-a}}
%    \end{keyanspic}
% \end{enumext}
%
% \subsection{Printing stored content}
%
% \subsubsection{The command \cs[no-index]{getkeyans}}
% \label{sec:getkeyans}
%
% \vspace*{-10pt}
%
% \begin{function}{\getkeyans}
%   \begin{syntax}
%      \cmdexamp{getkeyans}{store name \textnormal{\textcolor{red}{:}} position}
%   \end{syntax}
%   The command \ics*{getkeyans} prints the \emph{\enquote{only stored content}}
%   in \mymeta[type=tt]{store name} defined by \mykey{save-ans} key in the \mymeta{position} returned by the
%   \mykey{show-pos} key.
%
% \end{function}
%
%  \smallskip
%
% The \emph{\enquote{content}} can only be accessed
% \emph{\enquote{after}} it is stored, if the \mymeta[type=tt]{store name}
% does not exist the command will return an error. The form taken by the argument \mymeta[type=tt]{store name
% \textnormal{\textcolor{red}{:}} position} is the same as that used to
% generate the internal \emph{\enquote{label and ref}} system when \mykey{save-ref} key are active, so to
% refer to a stored \emph{\enquote{content}}.
% For example |\getkeyans{test:4}| will return the \emph{\enquote{stored
% content}} at position |4| of the environment in which the key
% |save-ans=test| was set.
%
% \subsubsection{The command \cs[no-index]{printkeyans}}
% \label{sec:printkeyans}
%
% \vspace*{-10pt}
%
% \begin{function}{\printkeyans}
%   \begin{syntax}
%      \cmdexamp{printkeyans}[keys]{store name}
%   \end{syntax}
%   The command \ics*{printkeyans} prints \emph{\enquote{all stored content}}
%   in \mymarg[type=tt]{store name} defined by \mykey{save-ans} key.
%   The \emph{\enquote{content}} can only be accessed \emph{\enquote{after}} it is stored, if \mymeta[type=tt]{store name}
%   does not exist the command will return an error.
%
% \smallskip
%
%   Internally it places the
%   \emph{\enquote{stored content}} inside the \myenv*{enumext} environment
%   with default values for \mykey{label} key are the same as those of the \myenv*{enumext}
%   environment along with the keys: |nosep,first=\small,font=\small| for
%   all levels, except for the first one that adds the |columns=2| key.
% \end{function}
%
% \smallskip
%
%  The optional argument allows to handle the \mymeta{keys} \emph{\enquote{on the first level}} of the \myenv*{enumext}
%   environment encapsulated by the command. If need to pass options for nested levels use
%   \ics*{setenumext}\myoarg[type=tt,sbc=gray,ac=lightgray,cf=optcolor]{print \textnormal{\textcolor{gray}{,}} level}\mymarg[type=tt]{store name}.
% \subsubsection*{Example}
%
% \iffalse
%<*example>
% \fi
\begin{examplecode}[frame=single]
\begin{enumext}[save-ans=sample,columns=2,show-pos=true,nosep,save-ref=true]
  \item Factor $3x+3y+3z$. \anskey{$3(x+y+z)$}
  \item True False

    \begin{enumext}[nosep]
      \item \LaTeX2e\ is cool? \anskey{Very True!}
    \end{enumext}

  \item Related to Linux

    \begin{enumext}[nosep]
      \item You use linux? \anskey{Yes}
      \item Rate the following package and class
        \begin{enumext}[nosep]
          \item \texttt{xsim} \anskey{very good}
          \item \texttt{exsheets} \anskey{obsolete}
        \end{enumext}
    \end{enumext}
\end{enumext}

The answer to \ref{sample:4} is \getkeyans{sample:4} and the answers to
all the worksheets are as follows:

\printkeyans{sample}
\end{examplecode}
% \iffalse
%</example>
% \fi
%
% \begin{enumext}[save-ans=sampleXX,columns=2,show-pos=true,nosep,save-ref=true]
%  \item Factor $3x+3y+3z$. \anskey{$3(x+y+z)$}
%  \item True False
%    \begin{enumext}[nosep]
%      \item \LaTeX2e\ is cool? \anskey{Very True!}
%    \end{enumext}
%  \item Related to Linux
%    \begin{enumext}[nosep]
%      \item You use linux? \anskey{Yes}
%      \item Rate the following package and class
%        \begin{enumext}[nosep]
%          \item \texttt{xsim} \anskey{very good}
%          \item \texttt{exsheets} \anskey{obsolete}
%        \end{enumext}
%    \end{enumext}
% \end{enumext}
%
% \medskip
%
% The answer to \ref{sampleXX:4} is \getkeyans{sampleXX:4} and the answers to
% all the worksheets are as follows:
%
% \medskip
%
% \printkeyans[columns=1]{sampleXX}
%
% \section{Full examples}
%
% Here I will leave as an example some adaptations questions taken from \href{https://tex.stackexchange.com}{TeX-SX}.
% The examples are attached to this documentation and can be extracted
% from your PDF viewer or from the command line by running:
% \iffalse
%<*example>
% \fi
\begin{examplecode}[frame=single]
$ pdfdetach -saveall enumext.pdf
\end{examplecode}
% \iffalse
%</example>
% \fi
% and then you can use the excellent \arara\footnote{The cool \TeX\ automation tool:
% \url{https://www.ctan.org/pkg/arara}} tool to compile them.
%
% \subsubsection*{Example 1}
%
% \iffalse
%<*example>
% \fi
\begin{filecontents*}[overwrite]{enumext-exa-1.tex}
% arara: pdflatex
% arara: clean: { extensions: [ aux, log] }
\documentclass{article}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage[italian]{babel}
\usepackage{siunitx,amssymb}
\sisetup{output-decimal-marker={,}}
\DeclareSIUnit{\angstrom}{\textup{\AA}}
\usepackage{enumext}
\pagestyle{empty}
\begin{document}
\setenumext[keyans]{label=\Alph*,font=\small,nosep,wrap-label={\fbox{\makebox[\height]{##1}}}}
\begin{enumext}[columns=2,save-ans=sabastiano]
 \item La velocità di \SI{1,00e2}{m/s} espressa in \si{km/h} è:
   \begin{keyans}
     \item \SI{36}{km/h}.
     \item* \SI{360}{km/h}.
     \item \SI{27,8}{km/h}.
     \item \SI{3,60e8}{km/h}.
   \end{keyans}

 \item In fisica nucleare si usa l'angstrom (simbolo:
 $\SI{1}{\angstrom} = \SI{1e-10}{m}$) e il fermi o femtometro
 ($\SI{1}{fm} = \SI{1e-15}{m}$). Qual è la relazione tra queste due
 unità di misura?
   \begin{keyans}
     \item* $\SI{1}{\angstrom}=\SI{1e5}{fm}$.
     \item $\SI{1}{\angstrom}=\SI{1e-5}{fm}$.
     \item $\SI{1}{\angstrom}=\SI{1e-15}{fm}$.
     \item $\SI{1}{\angstrom}=\SI{1e3}{fm}$.
   \end{keyans}

 \item La velocità di \SI{1,00e2}{m/s} espressa in \si{km/h} è:
   \begin{keyans}
     \item \SI{36}{km/h}.
     \item* \SI{360}{km/h}.
     \item \SI{27,8}{km/h}.
     \item \SI{3,60e8}{km/h}.
   \end{keyans}

 \item In fisica nucleare si usa l'angstrom (simbolo:
 $\SI{1}{\angstrom} = \SI{1e-10}{m}$) e il fermi o femtometro
 ($\SI{1}{fm} = \SI{1e-15}{m}$). Qual è la relazione tra queste due
 unità di misura?
   \begin{keyans}
     \item* $\SI{1}{\angstrom}=\SI{1e5}{fm}$.
     \item $\SI{1}{\angstrom}=\SI{1e-5}{fm}$.
     \item $\SI{1}{\angstrom}=\SI{1e-15}{fm}$.
     \item $\SI{1}{\angstrom}=\SI{1e3}{fm}$.
   \end{keyans}
\end{enumext}

\printkeyans[columns=4]{sabastiano}
\end{document}
\end{filecontents*}
% \iffalse
%</example>
% \fi
%
% Adapted from the response given by Enrico Gregorio in \href{https://tex.stackexchange.com/q/461730/7832}{Squares for answer choice options and perfect alignment to mathematical answers}
% \textattachfile[color=red,print=false]{enumext-exa-1.tex}{\faFile*[regular]}.
%
% \setenumext[keyans]{label=\Alph*,font=\small,nosep,wrap-label={\fbox{\makebox[\height]{##1}}}}
% \begin{enumext}[columns=2,save-ans=sabastiano,itemsep=0pt, topsep=0pt,below*={8pt}]
% \item La velocità di \SI{1,00e2}{m/s} espressa in \si{km/h} è:
%
%   \begin{keyans}
%     \item \SI{36}{km/h}.
%     \item* \SI{360}{km/h}.
%     \item \SI{27,8}{km/h}.
%     \item \SI{3,60e8}{km/h}.
%   \end{keyans}
%
% \item  In fisica nucleare si usa l'angstrom (simbolo:
% $\SI{1}{\angstrom} = \SI{1e-10}{m}$) e il fermi o femtometro
% ($\SI{1}{fm} = \SI{1e-15}{m}$). Qual è la relazione tra queste due
% unità di misura?
%   \begin{keyans}
%     \item* $\SI{1}{\angstrom}=\SI{1e5}{fm}$.
%     \item $\SI{1}{\angstrom}=\SI{1e-5}{fm}$.
%     \item $\SI{1}{\angstrom}=\SI{1e-15}{fm}$.
%     \item $\SI{1}{\angstrom}=\SI{1e3}{fm}$.
%   \end{keyans}
%
% \item La velocità di \SI{1,00e2}{m/s} espressa in \si{km/h} è:
%
%   \begin{keyans}
%     \item \SI{36}{km/h}.
%     \item* \SI{360}{km/h}.
%     \item \SI{27,8}{km/h}.
%     \item \SI{3,60e8}{km/h}.
%   \end{keyans}
%
% \item  In fisica nucleare si usa l'angstrom (simbolo:
% $\SI{1}{\angstrom} = \SI{1e-10}{m}$) e il fermi o femtometro
% ($\SI{1}{fm} = \SI{1e-15}{m}$). Qual è la relazione tra queste due
% unità di misura?
%   \begin{keyans}
%     \item* $\SI{1}{\angstrom}=\SI{1e5}{fm}$.
%     \item $\SI{1}{\angstrom}=\SI{1e-5}{fm}$.
%     \item $\SI{1}{\angstrom}=\SI{1e-15}{fm}$.
%     \item $\SI{1}{\angstrom}=\SI{1e3}{fm}$.
%   \end{keyans}
% \end{enumext}
%
% \printkeyans[columns=4]{sabastiano}
%
% \subsubsection*{Example 2}
%
% \iffalse
%<*example>
% \fi
\begin{filecontents*}[overwrite]{enumext-exa-2.tex}
% arara: pdflatex
% arara: pdflatex
% arara: clean: { extensions: [ aux, log, out] }
\documentclass{article}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage[italian]{babel}
\usepackage{siunitx,amssymb,tikz}
\usetikzlibrary{shapes.geometric}
\sisetup{output-decimal-marker={,}}
\DeclareSIUnit{\angstrom}{\textup{\AA}}
\usepackage[colorlinks]{hyperref}
\usepackage{enumext}
\newcommand*{\mySquared}[1]{%
  \begin{tikzpicture}[baseline=(number.base),square/.style={regular polygon,regular polygon sides=4}]
    \node[square, rounded corners=1pt, inner sep=1pt, draw=none, fill=gray!40] (number) {#1};
  \end{tikzpicture}%
}
\pagestyle{empty}
\begin{document}
\setenumext[keyans]{label=\Alph*,font=\small,nosep,wrap-label={\mySquared{##1}}}
\begin{enumext}[columns=1,save-ans=sabastiano2,mark-pos=left,mark-ans=$\checkmark$,save-ref=true,show-ans=true,itemsep=0pt]
 \item La velocità di \SI{1,00e2}{m/s} espressa in \si{km/h} è:
   \begin{keyans}
     \item \SI{36}{km/h}.
     \item* \SI{360}{km/h}.
     \item \SI{27,8}{km/h}.
     \item \SI{3,60e8}{km/h}.
   \end{keyans}

 \item In fisica nucleare si usa l'angstrom (simbolo:
 $\SI{1}{\angstrom} = \SI{1e-10}{m}$) e il fermi o femtometro
 ($\SI{1}{fm} = \SI{1e-15}{m}$). Qual è la relazione tra queste due
 unità di misura?
   \begin{keyans}
     \item* $\SI{1}{\angstrom}=\SI{1e5}{fm}$.
     \item $\SI{1}{\angstrom}=\SI{1e-5}{fm}$.
     \item $\SI{1}{\angstrom}=\SI{1e-15}{fm}$.
     \item $\SI{1}{\angstrom}=\SI{1e3}{fm}$.
   \end{keyans}

 \item La velocità di \SI{1,00e2}{m/s} espressa in \si{km/h} è:
   \begin{keyans}
     \item \SI{36}{km/h}.
     \item* \SI{360}{km/h}.
     \item \SI{27,8}{km/h}.
     \item \SI{3,60e8}{km/h}.
   \end{keyans}

 \item In fisica nucleare si usa l'angstrom (simbolo:
 $\SI{1}{\angstrom} = \SI{1e-10}{m}$) e il fermi o femtometro
 ($\SI{1}{fm} = \SI{1e-15}{m}$). Qual è la relazione tra queste due
 unità di misura?
   \begin{keyans}
     \item* $\SI{1}{\angstrom}=\SI{1e5}{fm}$.
     \item $\SI{1}{\angstrom}=\SI{1e-5}{fm}$.
     \item $\SI{1}{\angstrom}=\SI{1e-15}{fm}$.
     \item $\SI{1}{\angstrom}=\SI{1e3}{fm}$.
   \end{keyans}
\end{enumext}

\printkeyans[columns=4]{sabastiano2}
\end{document}
\end{filecontents*}
% \iffalse
%</example>
% \fi
%
% Adapted from the response given by Florent Rougon in \href{https://tex.stackexchange.com/q/529034/7832}{Multiple choice questions with proposed answers in random order — addition of automatic correction (cross mark)}
% \textattachfile[color=red,print=false]{enumext-exa-2.tex}{\faFile*[regular]}.
% \setenumext[keyans]{label=\Alph*,font=\small,nosep,wrap-label={\mySquared{##1}}}
% \begin{enumext}[columns=1,save-ans=sabastiano2,mark-pos=left,mark-ans=$\checkmark$,save-ref=true,show-ans=true,itemsep=0pt]
% \item La velocità di \SI{1,00e2}{m/s} espressa in \si{km/h} è:
%   \begin{keyans}
%     \item \SI{36}{km/h}.
%     \item* \SI{360}{km/h}.
%     \item \SI{27,8}{km/h}.
%     \item \SI{3,60e8}{km/h}.
%   \end{keyans}
%
% \item In fisica nucleare si usa l'angstrom (simbolo:
% $\SI{1}{\angstrom} = \SI{1e-10}{m}$) e il fermi o femtometro
% ($\SI{1}{fm} = \SI{1e-15}{m}$). Qual è la relazione tra queste due
% unità di misura?
%   \begin{keyans}
%     \item* $\SI{1}{\angstrom}=\SI{1e5}{fm}$.
%     \item $\SI{1}{\angstrom}=\SI{1e-5}{fm}$.
%     \item $\SI{1}{\angstrom}=\SI{1e-15}{fm}$.
%     \item $\SI{1}{\angstrom}=\SI{1e3}{fm}$.
%   \end{keyans}
%
% \item La velocità di \SI{1,00e2}{m/s} espressa in \si{km/h} è:
%   \begin{keyans}
%     \item \SI{36}{km/h}.
%     \item* \SI{360}{km/h}.
%     \item \SI{27,8}{km/h}.
%     \item \SI{3,60e8}{km/h}.
%   \end{keyans}
%
% \item In fisica nucleare si usa l'angstrom (simbolo:
% $\SI{1}{\angstrom} = \SI{1e-10}{m}$) e il fermi o femtometro
% ($\SI{1}{fm} = \SI{1e-15}{m}$). Qual è la relazione tra queste due
% unità di misura?
%   \begin{keyans}
%     \item* $\SI{1}{\angstrom}=\SI{1e5}{fm}$.
%     \item $\SI{1}{\angstrom}=\SI{1e-5}{fm}$.
%     \item $\SI{1}{\angstrom}=\SI{1e-15}{fm}$.
%     \item $\SI{1}{\angstrom}=\SI{1e3}{fm}$.
%   \end{keyans}
% \end{enumext}
%
% \printkeyans[columns=1]{sabastiano2}
% \vfill
%
% \subsubsection*{Example 3}
%
% \iffalse
%<*example>
% \fi
\begin{filecontents*}[overwrite]{enumext-exa-3.tex}
% arara: pdflatex
% arara: pdflatex
% arara: clean: { extensions: [ aux, log, out] }
\documentclass{article}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage[margin=2cm]{geometry}
\usepackage{tikz}
\newcommand*{\myCircled}[1]{%
  \begin{tikzpicture}[baseline=(number.base)]
    \node[circle, draw=green!10!gray, inner sep=1pt, fill=blue!30!green!10] (number) {#1};
  \end{tikzpicture}%
}
\usepackage[colorlinks]{hyperref}
\usepackage{enumext}
\pagestyle{empty}
\begin{document}
\setenumext[keyans]{label=\Alph*,font=\small,nosep,wrap-label={\myCircled{##1}}}
\begin{enumext}[save-ans=simplemc,columns=1,nosep,save-ref=true]
\item First type of questions
  \begin{keyans}[columns=1,noitemsep]
    \item value
    \item*[$x=5$] correct
    \item value
    \item value
  \end{keyans}
\item Second type of questions
  \begin{enumext}[no-store,label=\Roman*.,nosep]
    \item $2\alpha+2\delta=90^{\circ}$
    \item $\alpha=\delta$
    \item $\angle EDF=45^{\circ}$
  \end{enumext}
  \begin{keyans}[columns=2,noitemsep]
    \item I only
    \item II only
    \item I and II only
    \item* I and III only
    \item I, II, and III
  \end{keyans}
\item Third type of questions
    \begin{enumext}[no-store,list-offset=0.5cm,label=(\arabic*),nosep]
        \item $2\alpha+2\delta=90^{\circ}$
        \item $\angle EDF=45^{\circ}$
    \end{enumext}
\begin{keyans}[columns=2,noitemsep]
    \item value
    \item value
    \item*[some note] value
    \item value
    \item value
\end{keyans}

\item Question with image and label below:
\begin{keyanspic}[3,2]
\anspic{\includegraphics[scale=0.15]{example-image-a}}
\anspic{\includegraphics[scale=0.15]{example-image-b}}
\anspic{\includegraphics[scale=0.15]{example-image-a}}
\anspic{\includegraphics[scale=0.15]{example-image-a}}
\anspic*[A duck]{\includegraphics[scale=0.32]{example-image-duck}}
\end{keyanspic}

\item Question with image on left side:
\begin{keyans}[mini-env=0.5\linewidth, columns=1,noitemsep]
    \item value
    \item value
    \item value
    \item*[other note] correct
    \item value
    \miniright
    \includegraphics[scale=0.15]{example-image-b}
\end{keyans}
\end{enumext}

\medskip

Test keys

\printkeyans{simplemc}
\end{document}
\end{filecontents*}
% \iffalse
%</example>
% \fi
%
% A \emph{\enquote{simple multiple choice}} test \textattachfile[color=red,print=false]{enumext-exa-3.tex}{\faFile*[regular]}.
% \setenumext[keyans]{label=\Alph*,font=\small,nosep,wrap-label={\myCircled{##1}}}
% \begin{enumext}[save-ans=simplemc,columns=1,nosep,save-ref=true]
%   \item First type of questions
%      \begin{keyans}[columns=1,noitemsep]
%        \item value
%        \item*[$x=5$] correct
%        \item value
%        \item value
%      \end{keyans}
%   \item Second type of questions
%      \begin{enumext}[no-store,label=\Roman*.,nosep]
%        \item $2\alpha+2\delta=90^{\circ}$
%        \item $\alpha=\delta$
%        \item $\angle EDF=45^{\circ}$
%      \end{enumext}
%      \begin{keyans}[columns=2,noitemsep]
%        \item I only
%        \item II only
%        \item I and II only
%        \item* I and III only
%        \item I, II, and III
%      \end{keyans}
%   \item Third type of questions
%        \begin{enumext}[no-store,list-offset=0.5cm,label=(\arabic*),nosep]
%            \item $2\alpha+2\delta=90^{\circ}$
%            \item $\angle EDF=45^{\circ}$
%        \end{enumext}
%    \begin{keyans}[columns=2,noitemsep]
%        \item value
%        \item value
%        \item*[some note] value
%        \item value
%        \item value
%    \end{keyans}
%
% \item Question with image and label below:
%  \begin{keyanspic}[3,2]
%    \anspic{\includegraphics[scale=0.15]{example-image-a}}
%    \anspic{\includegraphics[scale=0.15]{example-image-b}}
%    \anspic{\includegraphics[scale=0.15]{example-image-a}}
%    \anspic{\includegraphics[scale=0.15]{example-image-a}}
%    \anspic*[A duck]{\includegraphics[scale=0.32]{example-image-duck}}
%  \end{keyanspic}
%
% \item Question with image on left side:
%    \begin{keyans}[mini-env=0.5\linewidth, columns=1,noitemsep]
%        \item value
%        \item value
%        \item value
%        \item*[other note] correct
%        \item value
%        \miniright
%        \includegraphics[scale=0.15]{example-image-b}
%    \end{keyans}
% \end{enumext}
%
% \smallskip
%
% Test keys
%
% \printkeyans[columns=2]{simplemc}
%
% \subsubsection*{Example 4}
%
% \iffalse
%<*example>
% \fi
\begin{filecontents*}[overwrite]{enumext-exa-4.tex}
% arara: pdflatex
% arara: pdflatex
% arara: clean: { extensions: [ aux, log, out] }
\documentclass{article}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{tikzducks}
\usepackage[colorlinks]{hyperref}
\usepackage{enumext}
\pagestyle{empty}
\begin{document}
\begin{enumext}[save-ans=simplews,columns=2,check-ans,show-ans=true,nosep,save-ref=true,wrap-label={\tikz[scale=0.25]\duck[signpost=\scalebox{0.6}{#1}];}]
  \item Factor $x^{2}-2x+1$ \anskey{$\left(x-1\right)^{2}$}
  \item Factor $3x+3y+3z$ \anskey{$3(x+y+z)$}
  \item True False
    \begin{enumext}[nosep]
      \item $\alpha > \delta$ \anskey{False}
      \item \LaTeX2e\ is cool? \anskey{Very True!}
    \end{enumext}
  \item Related to Linux
    \begin{enumext}[nosep]
      \item You use linux? \anskey{Yes}
      \item Usually uses the package manager? \anskey{Yes, \texttt{dnf}}
      \item Rate the following package and class
        \begin{enumext}[nosep]
          \item \texttt{xsim-exam} \anskey{doesn't exist for now :(}
          \item \texttt{xsim} \anskey{very good}
          \item \texttt{exsheets} \anskey{obsolete}
        \end{enumext}
    \end{enumext}
\end{enumext}

The answer to \ref{simplews:1} is \getkeyans{simplews:1} and the answer
to \ref{simplews:3} is \getkeyans{simplews:3}.

\printkeyans[columns=2]{simplews}
\end{document}
\end{filecontents*}
% \iffalse
%</example>
% \fi
%
% A \emph{\enquote{simple worksheet}} using ducks :) \textattachfile[color=red,print=false]{enumext-exa-4.tex}{\faFile*[regular]}.
%
% \begin{enumext}[save-ans=simplews,columns=1,check-ans,nosep,save-ref=true,wrap-label={\tikz[scale=0.25]\duck[signpost=\scalebox{0.6}{#1}];}]
%  \item Factor $x^{2}-2x+1$ \anskey{$\left(x-1\right)^{2}$}
%  \item Factor $3x+3y+3z$ \anskey{$3(x+y+z)$}
%  \item[] The following questions need to be cuaqtified :)
%  \item True False
%    \begin{enumext}[nosep]
%      \item $\alpha > \delta$ \anskey{False}
%      \item \LaTeX2e\ is cool? \anskey{Very True!}
%    \end{enumext}
%  \item Related to Linux
%    \begin{enumext}[nosep]
%      \item You use linux? \anskey{Yes}
%      \item Usually uses the package manager? \anskey{Yes, \texttt{dnf}}
%      \item Rate the following package and class
%        \begin{enumext}[nosep]
%          \item \texttt{xsim-exam} \anskey{doesn't exist for now :(}
%          \item \texttt{xsim} \anskey{very good}
%          \item \texttt{exsheets} \anskey{obsolete}
%        \end{enumext}
%    \end{enumext}
% \end{enumext}
%
% The answer to \ref{simplews:1} is \getkeyans{simplews:1} and the answer
% to \ref{simplews:3} is \getkeyans{simplews:3}.
%
% \printkeyans[columns=2]{simplews}
% \vfill
%
% \subsubsection*{Example 5}
%
% \iffalse
%<*example>
% \fi
\begin{filecontents*}[overwrite]{enumext-exa-5.tex}
% arara: lualatex
% arara: clean: { extensions: [ aux, log] }
\documentclass{article}
\usepackage[top=2cm,bottom=2cm,left=2cm,right=2cm]{geometry}%
\usepackage[osf]{libertinus}
\usepackage{xcolor,microtype}% no tcolorbox here :D
\usepackage{enumext}
\newsavebox{\satbox}
\sbox\satbox{\small\textbf{67}}%
\NewDocumentCommand \stylesat { m }
  {%
    \setlength{\fboxsep}{2pt}%
    \raisebox{2\fboxsep}{%
    \noindent\colorbox{black}{\textcolor{white}{\makebox[\dimeval{\labelwidth-2\fboxsep}][c]{\small\textbf{\vphantom{67}#1}}}}%
    \colorbox{lightgray}{\phantom{\rule[-\dp\satbox]{\dimeval{\linewidth-2\fboxsep}}{\dimeval{\dp\satbox+\ht\satbox}}}}}%
  }
\begin{document}
\setenumext[keyans]{label=\Alph*),nosep}
\begin{enumext}[label=\arabic*,labelwidth=20pt,labelsep=0pt,columns=2,columns-sep=30pt,save-ans=stylesat, wrap-label={\stylesat{#1}}]
 \item Which choice best describes what happens in the passage?
   \begin{keyans}
    \item* One character argues with another character who intrudes on her home.
    \item One character receives a surprising request from another character.
    \item One character reminisces about choices she has made over the years.
    \item One character criticizes another character for pursuing an unexpected course of action.
   \end{keyans}

 \item Which choice best describes what happens in the passage?
   \begin{keyans}
    \item One character argues with another character who intrudes on her home.
    \item One character receives a surprising request from another character.
    \item* One character reminisces about choices she has made over the years.
    \item One character criticizes another character for pursuing an unexpected course of action.
   \end{keyans}

 \item Which choice best describes what happens in the passage?
   \begin{keyans}
    \item One character argues with another character who intrudes on her home.
    \item* One character receives a surprising request from another character.
    \item One character reminisces about choices she has made over the years.
    \item One character criticizes another character for pursuing an unexpected course of action.
   \end{keyans}

 \item Which choice best describes what happens in the passage?
   \begin{keyans}
    \item One character argues with another character who intrudes on her home.
    \item One character receives a surprising request from another character.
    \item One character reminisces about choices she has made over the years.
    \item* One character criticizes another character for pursuing an unexpected course of action.
   \end{keyans}
\end{enumext}

\printkeyans[columns=4]{stylesat}
\end{document}
\end{filecontents*}
% \iffalse
%</example>
% \fi
%
% Adapted from the response given by Stephen in \href{https://tex.stackexchange.com/a/691544}{SAT like question format}
% \textattachfile[color=red,print=false]{enumext-exa-5.tex}{\faFile*[regular]}.
% \setenumext[keyans]{label=\Alph*),font=\small,nosep,wrap-label={##1}}
% \begin{enumext}[label=\arabic*,labelwidth=20pt,labelsep=0pt,columns=2,save-ans=stylesat, wrap-label={\stylesat{#1}}]
%  \item Which choice best describes what happens in the passage?
%   \begin{keyans}
%     \item* One character argues with another character who intrudes on her home.
%     \item One character receives a surprising request from another character.
%     \item One character reminisces about choices she has made over the years.
%     \item One character criticizes another character for pursuing an unexpected course of action.
%   \end{keyans}
%
%  \item Which choice best describes what happens in the passage?
%   \begin{keyans}
%    \item One character argues with another character who intrudes on her home.
%    \item One character receives a surprising request from another character.
%    \item* One character reminisces about choices she has made over the years.
%    \item One character criticizes another character for pursuing an unexpected course of action.
%   \end{keyans}
%
%  \item Which choice best describes what happens in the passage?
%   \begin{keyans}
%    \item One character argues with another character who intrudes on her home.
%    \item* One character receives a surprising request from another character.
%    \item One character reminisces about choices she has made over the years.
%    \item One character criticizes another character for pursuing an unexpected course of action.
%   \end{keyans}
%
%  \item Which choice best describes what happens in the passage?
%   \begin{keyans}
%    \item One character argues with another character who intrudes on her home.
%    \item One character receives a surprising request from another character.
%    \item One character reminisces about choices she has made over the years.
%    \item* One character criticizes another character for pursuing an unexpected course of action.
%   \end{keyans}
% \end{enumext}
%
% \printkeyans[columns=4]{stylesat}
%
% \section{The way of non-enumerated lists}
%
% It is possible to use (or abuse) the \myenv*{enumext} environment to
% mimic \emph{non-enumerated} list environments such as |itemize| and
% |description|, clearly the \mymeta{keys} to \emph{\enquote{store answers}},
% the \myenv*{keyans} and \myenv*{keyanspic} environments lose their
% sense and it is not the focus of the main of this package, but, why not
% to do it?.
%
% \smallskip
%
% Here I leave as an example other uses of the \myenv*{enumext}
% environment that can be helpful for specific purposes. The
% \emph{\enquote{trick}} to generate these \emph{fake environments} is
% set \mykey{label}|={}| or \mykey{label}|=|\mymarg[type=tt]{some} and
% play with the |list-indent|, |list-offset|, |font| and |wrap-label| keys.
%
% \subsection*{Fake \texttt{itemize} environment}
%
% Here we set the \mykey{label} key using the default settings in
% \hologo{LaTeX} for the four levels |\textbullet|, |\textendash|, |\textasteriskcentered|
% and |\textperiodcentered| together with the
% \mykey{nosep} key to reduce the vertical spaces in the left side example and set the
% \mykey{label} key in \emph{mathematical mode} for the right side as
% |\ast|, |\diamond|, |\circ| and |\star| for the four levels
% together with the \mykey{nosep} key
%
% \noindent\begin{minipage}[t]{0.45\linewidth}
% \begin{enumext}[nosep, label=\textbullet]
%  \item First level item
%    \begin{enumext}[nosep,label=\normalfont\bfseries\textendash]
%      \item Second level item
%        \begin{enumext}[nosep,label=\textasteriskcentered]
%          \item Third level item
%            \begin{enumext}[nosep,label=\textperiodcentered]
%                \item Fourth level item
%            \end{enumext}
%        \end{enumext}
%    \end{enumext}
%  \item First level item
% \end{enumext}
% \end{minipage}\hfill
% \begin{minipage}[t]{0.45\linewidth}
% \begin{enumext}[nosep, label=$\ast$]
%  \item First level item
%    \begin{enumext}[nosep,label=$\diamond$]
%      \item Second level item
%        \begin{enumext}[nosep,label=$\circ$]
%          \item Third level item
%            \begin{enumext}[nosep,label=$\star$]
%                \item Fourth level item
%            \end{enumext}
%        \end{enumext}
%    \end{enumext}
%  \item First level item
% \end{enumext}
% \end{minipage}
%
% \subsection*{Fake \texttt{description} environment}
%
% Here we set \mykey{label}|={}| and |list-indent=2.5em,font=\bfseries|.
%
% \begin{enumext}[label={},list-indent=2.5em,font=\bfseries,noitemsep,topsep=3pt]
%  \item[SomeThing] A short one-line description.
%  \item This is an entry \emph{without} a label.
%  \item[Something] A short \emph{one-line} description text.
%  \item[Something long] A much \emph{longer} description text may take
%    more than one line or more than one paragraph.
%
%    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
%    tempor incididunt ut labore et dolore magna aliqua.
% \end{enumext}
%
% If we add |list-indent=0pt| you get \emph{widest style}:
%
% \begin{enumext}[label={},list-indent=0pt,font=\bfseries,noitemsep,topsep=3pt]
%  \item[SomeThing] A short one-line description.
%  \item This is an entry \emph{without} a label.
%  \item[Something] A short \emph{one-line} description text.
%  \item[Something long] A much \emph{longer} description text may take
%    more than one line or more than one paragraph.
%
%    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
%    tempor incididunt ut labore et dolore magna aliqua.
% \end{enumext}
%
% \begin{important}*
% The small space at the beginning of the \emph{\enquote{unlabeled entry}} corresponds to
% |\labelsep| and can be removed using |\hspace{-\labelsep}| at the
% beginning of the line.
% \end{important}
%
% \subsection*{Description indented by label}
%
% Here we set \mykey{label}|={}| and we will give a convenient value to
% \mykey{labelsep} and \mykey{labelwidth}, for example we can take as reference our
% \emph{longest label} and pass it as value using:
%
% \iffalse
%<*example>
% \fi
\begin{examplecode}[frame=none]
\newlength{\descitemwd}
\settowidth{\descitemwd}{\textbf{Something long}}
\end{examplecode}
% \iffalse
%</example>
% \fi
%
% and then use \mykey{labelsep}|=4pt,|\mykey{labelwidth}|=\descitemwd,font=\bfseries|.
%
% \newlength{\descitemwd}
% \settowidth{\descitemwd}{\textbf{Something long}}
% \begin{enumext}[label={},labelsep=4pt,labelwidth=\descitemwd,font=\bfseries,noitemsep,topsep=3pt]
%  \item[SomeThing] A short one-line description.
%  \item This is an entry \textit{without} a label.
%  \item[Something] A short one-line description.
%  \item[Something long] A much longer description. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
%    Ut purus elit, vestibulum ut, placerat ac, adipiscing vitae, felis.
%    Curabitur dictum gravida mauris.
% \end{enumext}
%
% The environment can be translated so that the \mymeta{labels} are on
% the left margin calculating the value passed to the \mykey{list-offset}
% key, in this case it will be equal to the sum of the values set by the
% \mykey{labelwidth} and \mykey{labelsep} keys finally resulting as
% \mykey{list-offset}|={-\descitemwd - 4pt}|.
%
% \begin{enumext}[label={},labelsep=4pt,labelwidth=\descitemwd,list-offset={-\descitemwd-4pt}, font=\bfseries,noitemsep,topsep=3pt]
%  \item[SomeThing] A short one-line description.
%  \item This is an entry \textit{without} a label.
%  \item[Something] A short one-line description.
%  \item[Something long] A much longer description. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
%    Ut purus elit, vestibulum ut, placerat ac, adipiscing vitae, felis.
%    Curabitur dictum gravida mauris.
% \end{enumext}
%
% If we add \mykey{align}|=right| it will look like this:
%
% \begin{enumext}[label={},align=right,labelsep=4pt,labelwidth=\descitemwd,list-offset={-\descitemwd - 4pt}, font=\bfseries,noitemsep,topsep=3pt]
%  \item[SomeThing] A short one-line description.
%  \item This is an entry \textit{without} a label.
%  \item[Something] A short one-line description.
%  \item[Something long] A much longer description. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
%    Ut purus elit, vestibulum ut, placerat ac, adipiscing vitae, felis.
%    Curabitur dictum gravida mauris.
% \end{enumext}
%
% \begin{important}*
% At this point we have used \mykey{list-offset}|={-\descitemwd - 4pt}| instead of
% |list-offset={-\labelwidth - \labelsep}|,
% this is because the parameters |\labelwidth| and |\labelsep| take the
% default values, as if we had not set \mykey{label}.
% \end{important}
%
% \subsection*{Description with multi-line labels}
%
% The \mykey{label} key does not accept \emph{multiline material}, this
% is where the \mykey{wrap-label*} key comes into play. Unlike the
% \mypkg{enumitem} package, the \mykey{align} key only supports three
% options, so what we will do is create a command in the style |\parleft|
% of \mypkg{enumitem} that allows us to place \emph{multiline labels}
% using |\parbox|.
%
% \iffalse
%<*example>
% \fi
\begin{examplecode}[frame=none]
\NewDocumentCommand \itembx { s +m }
  {%
    \IfBooleanTF{#1}
      {\strut\smash{\parbox[t]{\labelwidth}{\raggedright{#2}}}}%
      {\strut\smash{\parbox[t]{\labelwidth}{\raggedleft{#2}}}}%
  }
\end{examplecode}
% \iffalse
%</example>
% \fi
%
% Now we just need to set |wrap-label*={\itembx{#1}}|.
%
% \begin{enumext}[label={},labelsep=4pt,labelwidth=\descitemwd,list-offset=-\dimeval{\descitemwd+4pt}, wrap-label*={\itembx{#1}}, font=\bfseries,noitemsep,topsep=3pt]
%  \item[SomeThing] A short one-line description.
%  \item This is an entry \textit{without} a label.
%  \item[Something] A short one-line description.
%  \item[Something \\ long] A much longer description. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
%    Ut purus elit, vestibulum ut, placerat ac, adipiscing vitae, felis.
%    Curabitur dictum gravida mauris.
%
%    Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
%    Ut purus elit, vestibulum ut, placerat ac, adipiscing vitae, felis.
%    Curabitur dictum gravida mauris.
%
%  \item[SoMeThInG \\ LoNg] A much longer description. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
%    Ut purus elit, vestibulum ut, placerat ac, adipiscing vitae, felis.
%    Curabitur dictum gravida mauris.
% \end{enumext}
%
% \section*{Final notes}
%
% The original implementation (if you can call it that) of the ideas that
% led to the creation of \mypkg*{enumext} were some macros using the \mypkg{enumerate}\cite{enumerate}
% package for personal use created in early 2003, the code was quite
% questionable, but functional for these simple requirements.
%
% \medskip
%
% With the great answers given by Christian Hupfer in
% \href{https://tex.stackexchange.com/a/364763/7832}{Create a fake label ref
% using list} and the answer given by David Carlisle in
% \href{https://tex.stackexchange.com/a/363963/7832}{Change the use of label
% ref by data save in an array (list)} I managed to create a more solid
% code than the original version, now using the \mypkg{l3prop}\cite{inter3} and \mypkg{l3seq}\cite{inter3}
% modules together with the \mypkg{hyperref}\cite{hyperref} and \mypkg{enumitem}\cite{enumitem} packages, which did
% the job, but with some limitations.
%
% \smallskip
%
% As time went by I took these limitations as a personal challenge which
% I called \emph{\enquote{reinventing the wheel}}, since there were packages and classes
% that did more or less what I was looking for, but did not fit my simple
% requirements. This \emph{\enquote{reinventing the wheel}} finally ended up becoming
% \mypkg*{enumext}.
%
% \subsubsection*{Why list environments?}
%
% The answer is simple, first I love the beauty of its syntax and many of
% what I had already written used the \myenv{enumerate} environment or
% lists created using the \mypkg{enumitem} package. In my mind I thought:
% how complicated could it be to write a package that looked like
% \mypkg{enumitem}? It seemed simple enough, of course I didn't have in
% mind the mess I was getting into working with \myenv{list}
% environments, \myenv{minipage} and adding support for the
% \mypkg{multicol} and \mypkg{hyperref} packages.
%
% Of course, seeing the final result of the experiment
% \emph{\enquote{reinventing the wheel}} I am quite satisfied.
%
% \subsubsection*{Why not random questions and other utilities}
%
% The \emph{\enquote{random}} type questions I love and hate them at the
% same time, although they simplify a lot the work when creating a
% multiple choice test, but you lose the beauty of typessetting a
% document with \hologo{LaTeX}, that is to say the output does not always
% look as nice as it should, even if they are only alternatives these
% must follow a certain order when presented either numerical or
% presentation, that said handling that using \emph{nested lists} is quite
% complicated so I do not classify to be implemented.
%
% \let\stdsection\section
% \def\section*#1{\stdsection{#1}}
%
% \begin{thebibliography}{10}
%
% \bibitem{exam} \textsc{Hirschhorn, Philip}. \enquote{Using the
% \textsf{exam} document class}. Available from
% \textsc{ctan}, \url{https://www.ctan.org/pkg/exam}, 2023.
%
% \bibitem{xsim} \textsc{Niederberger, Clemens}. \enquote{\textsf{xsim} – eXercise
% Sheets IMproved}. Available from
% \textsc{ctan}, \url{https://www.ctan.org/pkg/xsim}, 2023.
%
% \bibitem{multicol} \textsc{Mittelbach, Frank}. \enquote{An
% environment for \textsf{multicolumn} output}. Available from
% \textsc{ctan}, \url{https://www.ctan.org/pkg/multicol}, 2024.
%
% \bibitem{enumerate} The \hologo{LaTeX} Project. \enquote{\textsf{enumerate} – Enumerate
% with redefinable labels}. Available from
% \textsc{ctan}, \url{https://www.ctan.org/pkg/enumerate}, 2024.
%
% \bibitem{enumitem} \textsc{Bezos, Javier}. \enquote{Customizing lists
% with the \textsf{enumitem} package}. Available from
% \textsc{ctan}, \url{https://www.ctan.org/pkg/enumitem}, 2019
%
% \bibitem{latexref} \textsc{Berry, Karl}. \enquote{\hologo{LaTeX2e}: An
% Unofficial Reference Manual}. Available from \textsc{ctan},
% \url{https://ctan.org/pkg/latex2e-help-texinfo}, 2024.
%
% \bibitem{hyperref} The \hologo{LaTeX} Project. \enquote{Extensive support
% for hypertext in \hologo{LaTeX}}. Available from
% \textsc{ctan}, \url{https://www.ctan.org/pkg/hyperref}, 2024.
%
% \bibitem{footnotehyper} \textsc{Burnol, Jean-François}. \enquote{The \textsf{footnotehyper}
% package}. Available from
% \textsc{ctan}, \url{https://www.ctan.org/pkg/footnotehyper}, 2021.
%
% \bibitem{expl3} The \hologo{LaTeX} Project. \enquote{The \textsf{expl3}
% package}. Available from
% \textsc{ctan}, \url{https://www.ctan.org/pkg/l3kernel}, 2024.
%
% \bibitem{inter3} The \hologo{LaTeX} Project. \enquote{The \hologo{LaTeX}3
% Interfaces}. Available from
% \textsc{ctan}, \url{https://www.ctan.org/pkg/l3kernel}, 2024.
%
% \bibitem{xparse} The \hologo{LaTeX} Project. \enquote{The \textsf{xparse}
% package}. Available from
% \textsc{ctan}, \url{https://www.ctan.org/pkg/xparse}, 2024.
%
% \bibitem{luavisual} \textsc{Gundlach, Patrick}. \enquote{The \textsf{lua-visual-debug}
% package}. Available from
% \textsc{ctan}, \url{https://www.ctan.org/pkg/lua-visual-debug}, 2023.
%
% \bibitem{shortlst} \textsc{Lemvig, Mogens}. \enquote{The \textsf{shortlst}
% package}. Available from
% \textsc{ctan}, \url{https://www.ctan.org/pkg/shortlst}, 1998.
%
% \bibitem{tasks} \textsc{Niederberger, Clemens}. \enquote{\textsf{tasks} – Horizontally
% columned lists}. Available from
% \textsc{ctan}, \url{https://www.ctan.org/pkg/tasks}, 2022.
%
% \end{thebibliography}
%
% \let\section\stdsection
%
% \section{Change history}
% \label{sec:changes}
%
% \setlist[itemize,1]{label=\textendash,wide=0.5em,nosep,noitemsep,leftmargin=10pt}
% \newlength\descrwidth
% \settowidth{\descrwidth}{\textsf{v1.0a, --- 2023-08-18} }
%
% \begin{description}[font=\small\sffamily,wide=0pt,style=multiline,leftmargin=1.1\descrwidth,nosep,noitemsep]
% \item [\fileversion{} \, \filedate]
%    \begin{itemize}
%    \item First public release.
%    \end{itemize}
% \end{description}
%
% \newpage
%
% \indexprologue{
% The italic numbers denote the pages where the corresponding entry is
% described.}
%
% \printindex[userdoc]
%
% \newpage
%
% \StartImplementation
%
% \StopEventually{^^A
% \newgeometry{top=0.5in,bottom=0.3in,left=1.0in,right=0.5in,footskip=0.2in,headheight=1cm,headsep=0.27cm}
% \addtocontents{toc}{\protect\setcounter{tocdepth}{2}}
% \cleardoublepage
% \phantomsection
% \indexprologue{
% The italic numbers denote the pages where the corresponding entry is
% described, the numbers underlined and all others indicate the line on
% which they are implemented in the package code.
% }
% \printindex
% }
%
% \section{Implementation}
% \label{sec:Implementation}
% \addtocontents{toc}{\protect\setcounter{tocdepth}{0}}
%
% The most recent publicly released version of \mypkg*{enumext} is
% available at \textsc{ctan}: \url{https://www.ctan.org/pkg/enumext}.
% While general feedback via email is welcomed, specific bugs or
% feature requests should be reported through the issue
% tracker: \textcolor{gray}{\scriptsize\faIcon[regular]{github}} \url{https://github.com/pablgonz/enumext/issues}.
%
% \begin{important}*
% The documentation presented here is far from professional, it contains
% a lot of obvious information that to the eye of a \hologo{TeX}pert are
% superfluous, but, after so many years developing this project is the
% only way to remember what does what.
% \end{important}
%
% \subsection{General conventions}
%
% Variables containing \lstinline+i+, \lstinline+ii+, \lstinline+iii+ and
% \lstinline+iv+ are associated by level with the \myenv*{enumext}
% environment, variables containing \lstinline+v+ are associated with the
% \myenv*{keyans} environment, variables containing \lstinline+vi+ are
% associated with the \myenv*{keyanspic} environment, variables
% containing \lstinline+vii+ are associated with the \myenv*{enumext*}
% environment and variables containing \lstinline+viii+ are associated
% with the \myenv*{keyans*} environment.
%
% \medskip
%
% To simplify writing and documentation some variables and functions that
% are common to the different levels of the environments are described
% using a capital \enquote{\texttt{\textcolor{optcolor}{X}}}.
%
% \medskip
%
% The temporary function \myvarenv{__@@_tmp:n} is used in
% different parts of the package code for variable creation or execution
% of other functions that are grouped into this one.
%
% \medskip
%
% All variables and functions defined in this package are private and
% are NOT intended to work or be used by another package or module.
%
% \subsection{Initial set up}
%
% Start the \pkg{DocStrip} guards.
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% Identify the internal prefix (\LaTeX3 \pkg{DocStrip} convention) for \pkg{l3doc} class.
%
%    \begin{macrocode}
%<@@=enumext>
%    \end{macrocode}
%
% \subsection{Declaration of the package}
%
% First we will make sure we have a minimum (super updated) version of
% \hologo{LaTeX} to work correctly.
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[2023-11-01]
%    \end{macrocode}
%
% Now declare the \mypkg*{enumext} package.
%    \begin{macrocode}
\ProvidesExplPackage
  {enumext}
  {2024-05-15}
  {1.0}
  {Enumerate exercise sheets}
%    \end{macrocode}
%
% Finally check if the \mypkg{multicol} package is loaded, if not we load it.
%    \begin{macrocode}
\hook_gput_code:nnn {begindocument} {enumext}
  {
    \IfPackageLoadedTF { multicol }
      {
        \msg_info:nnn { enumext } { package-load } { multicol }
      }
      {
        \msg_info:nnn { enumext } { package-not-load } { multicol }
        \RequirePackage{multicol}[2023-03-30]
      }
  }
%    \end{macrocode}
%
% \subsection{Definition of variables}
%
% Variables that do not appear in this section are created by means of
% \cs[no-index]{keys_define:nn} or some function described below.
%
% \begin{variable}[int]{\l_@@_level_int, \l_@@_level_h_int, \l_@@_keyans_level_int,
%                       \l_@@_keyans_level_h_int, \l_@@_keyans_pic_level_int,
%                       \l_@@_starred_bool, \g_@@_starred_bool, \l_@@_standar_bool,
%                       \g_@@_standar_bool, \l_@@_keyans_env_bool,}
%
%    Integer variables will control the nesting levels of the environments
%    and boolean variables will be used to determine if they are present
%    (nested) in each other.
%    The boolean variables \myvarenv{g__@@_starred_bool} and
%    \myvarenv{g__@@_standar_bool} will be set to \emph{\enquote{true}} when the
%    \myenv*{enumext} and \myenv*{enumext*} environments are not nested with
%    each other.
% \iffalse
%% Variable for levels and nesting off all environments.
% \fi
%    \begin{macrocode}
\int_new:N  \l_@@_level_int
\int_new:N  \l_@@_level_h_int
\int_new:N  \l_@@_keyans_level_int
\int_new:N  \l_@@_keyans_level_h_int
\int_new:N  \l_@@_keyans_pic_level_int
\bool_new:N \l_@@_starred_bool
\bool_new:N \g_@@_starred_bool
\bool_new:N \l_@@_standar_bool
\bool_new:N \g_@@_standar_bool
\bool_new:N \l_@@_keyans_env_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\l_@@_counter_i_tl, \l_@@_counter_ii_tl,
%                       \l_@@_counter_iii_tl, \l_@@_counter_iv_tl,
%                       \l_@@_counter_v_tl,\l_@@_counter_vi_tl,
%                       \l_@@_counter_vii_tl,\l_@@_counter_viii_tl}
%
%    Variables to store the \emph{\enquote{name of the counters}}
%    \icounter{enumXi}, \icounter{enumXii}, \icounter{enumXiii} and
%    \icounter{enumXiv} for \myenv*{enumext}  environment,
%    \icounter{enumXv} for \myenv*{keyans} environment and
%    \icounter{enumXvi} for the \myenv*{keyanspic} environment.
%
%    The counters \icounter{enumXvii} and \icounter{enumXviii} are used
%    by \myenv*{enumext*} and \myenv*{keyans*} environments.
%
%    The initial values of these variables are set by the function
%    \cs{@@_define_counters:Nn} and then modified by the function
%    \cs{@@_label_style:Nnn} used by \mykey{label} key (\S\ref{int:counters}).
% \iffalse
%% Variable for counters
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:n #1
  {
    \tl_new:c { l_@@_counter_#1_tl }
  }
\clist_map_inline:nn { i, ii, iii, iv, v, vi, vii, viii } { \@@_tmp:n {#1} }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_@@_resume_int, \g_@@_resume_vii_int,
%                  \g_@@_item_symbol_tl, \g_@@_series_standar_default_tl,
%                  \g_@@_series_starred_default_tl,}
%
%    The boolean variable \cs{l_@@_resume_bool} is used by \mykey{resume} key,
%    the value from which the environment's will start is stored in the
%    integer variable \cs{g_@@_resume_int} (\S\ref{key:resume}). The
%    global token list \cs{g_@@_item_symbol_tl} is used by \mykey{item-sym*} key
%    (\S\ref{key:item-starred}).
% \iffalse
%% Variables used by |resume| and |item-sym*| key implementation.
% \fi
%    \begin{macrocode}
\int_new:N \g_@@_resume_int
\int_new:N \g_@@_resume_vii_int
\tl_new:N  \g_@@_item_symbol_tl
\tl_new:N  \g_@@_series_standar_default_tl
\tl_new:N  \g_@@_series_starred_default_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\l_@@_current_widest_dim, \g_@@_counter_styles_tl,
%                       \g_@@_widest_label_tl, \l_@@_label_width_by_box}
%    The variable \cs{l_@@_current_widest_dim} stores the current
%    label width, the variable \cs{g_@@_counter_styles_tl} stores
%    the default \mymeta{label style} and the variable
%    \cs{g_@@_widest_label_tl} the label width. These variables are
%    used by \mykey{widest} (\S\ref{key:start-widest}) and \mykey{label} (\S\ref{key:label}) keys.
% \iffalse
%% Variables used by |label|, |ref| and |widest| keys.
% \fi
%    \begin{macrocode}
\dim_new:N \l_@@_current_widest_dim
\tl_new:N  \g_@@_counter_styles_tl
\tl_new:N  \g_@@_widest_label_tl
\box_new:N \l_@@_label_width_by_box
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\l_@@_leftmargin_tmp_X_bool, \l_@@_leftmargin_tmp_X_dim,
%                       \l_@@_leftmargin_X_dim, \l_@@_itemindent_X_dim,}
%
%    The boolean variable \myvarenv{l__@@_leftmargin_tmp_X_bool} and the
%    dimensional variable \myvarenv{l__@@_leftmargin_tmp_X_dim}
%    are used by the \mykey{list-indent} key (\S\ref{key:list-indent}).
%
%    \smallskip
%
%    The variables \myvarenv{l__@@_leftmargin_X_dim} and
%    \myvarenv{l__@@_itemindent_X_dim} are used (and set) by the function
%    \myvarenv{__@@_calc_hspace:NNNNNNNNNNNN} (\S\ref{int:leftmargin})
%    which determines the internal values for \ics{leftmargin} and \ics{itemindent}.
%
% \iffalse
%% Add \l__enumext_leftmargin_tmp_X_bool, \l__enumext_leftmargin_tmp_X_dim,
%% \l__enumext_leftmargin_X_dim, \l__enumext_itemindent_X_dim used by the
%% function \enumext_calc_hspace:NNNNNNNNNNNN and |list-indent| key.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:n #1
  {
    \bool_new:c { l_@@_leftmargin_tmp_#1_bool }
    \dim_new:c  { l_@@_leftmargin_tmp_#1_dim }
    \dim_new:c  { l_@@_leftmargin_#1_dim     }
    \dim_new:c  { l_@@_itemindent_#1_dim     }
  }
\clist_map_inline:nn { i, ii, iii, iv, v, vi, vii, viii } { \@@_tmp:n {#1} }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{ \l_@@_multicols_above_X_skip, \l_@@_multicols_below_X_skip,}
%    Internal variables used by \mykey{columns} key \S\ref{vspace:multi}).
% \iffalse
%% Variables used by |columns| key in |enumext| and |keyans|.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:n #1
  {
    \skip_new:c  { l_@@_multicols_above_#1_skip }
    \skip_new:c  { l_@@_multicols_below_#1_skip }
  }
\clist_map_inline:nn { i, ii, iii, iv, v } { \@@_tmp:n {#1} }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\g_@@_minipage_stat_int, \l_@@_minipage_left_skip,
%                       \l_@@_minipage_right_skip, \l_@@_minipage_after_skip,
%                       \g_@@_minipage_right_skip, \g_@@_minipage_after_skip,
%                       \l_@@_minipage_left_X_dim, \l_@@_minipage_active_X_bool}
%    Internal variables used by \ics*{miniright} command (\S\ref{cmd:miniright})
%    and the keys \mykey{miniright}, \mykey{miniright*}, \mykey{mini-env}
%    and \mykey{mini-sep} (\S\ref{key:mini-multi}, \S\ref{vspace:minipage}).
% \iffalse
%% Variables used by |miniright|, |mini-env|, |mini-sep| and |\miniright|.
% \fi
%    \begin{macrocode}
\int_new:N  \g_@@_minipage_stat_int
\skip_new:N \l_@@_minipage_left_skip
\skip_new:N \l_@@_minipage_right_skip
\skip_new:N \l_@@_minipage_after_skip
\skip_new:N \g_@@_minipage_right_skip
\skip_new:N \g_@@_minipage_after_skip
\cs_set_protected:Npn \@@_tmp:n #1
  {
    \dim_new:c  { l_@@_minipage_left_#1_dim    }
    \bool_new:c { l_@@_minipage_active_#1_bool }
  }
\clist_map_inline:nn { i, ii, iii, iv, v, vii, viii } { \@@_tmp:n {#1} }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\l_@@_wrap_label_X_bool, \l_@@_wrap_label_opt_X_bool,
%                       \l_@@_start_X_int, \l_@@_fake_item_indent_X_tl, \l_@@_label_fill_left_X_tl,
%                       \l_@@_label_fill_right_X_tl, \l_@@_vspace_a_star_X_bool,
%                       \l_@@_vspace_b_star_X_bool,}
%
%    The integer variable \myvarenv{l__@@_start_X_int} are used by the
%    \mykey{start} key (\S\ref{key:start-widest}), the token list
%    \myvarenv{l__@@_fake_item_indent_X_tl } is used by \mykey{itemindent} key,
%    the variables \myvarenv{l__@@_label_fill_left_X_tl}
%    and \myvarenv{l__@@_label_fill_left_X_tl} are used by the
%    \mykey{align} key (\S\ref{key:label}). The boolean vars \myvarenv{l__@@_vspace_a_star_X_bool},
%    \myvarenv{l__@@_vspace_b_star_X_bool} are used by \mykey{above},
%    \mykey{above*}, \mykey{below} and \mykey{below*} keys
%
% \iffalse
%% Internal variables used by |wrap-label|, |start|, |align|, |above| and |below| keys.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:n #1
  {
    \bool_new:c { l_@@_wrap_label_#1_bool     }
    \bool_new:c { l_@@_wrap_label_opt_#1_bool }
    \int_new:c  { l_@@_start_#1_int           }
    \tl_new:c   { l_@@_fake_item_indent_#1_tl }
    \tl_new:c   { l_@@_label_fill_left_#1_tl  }
    \tl_new:c   { l_@@_label_fill_right_#1_tl }
    \bool_new:c { l_@@_vspace_a_star_#1_bool  }
    \bool_new:c { l_@@_vspace_b_star_#1_bool  }
  }
\clist_map_inline:nn { i, ii, iii, iv, v, vii, viii } { \@@_tmp:n {#1} }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\l_@@_store_active_bool, \l_@@_store_name_tl,
%                       \g_@@_store_name_tl, \l_@@_store_anskey_arg_tl,
%                       \l_@@_store_columns_join_int, \l_@@_store_keyans_label_tl,
%                       \l_@@_store_keyans_item_opt_tl, \l_@@_keyans_item_opt_tl,
%                       \l_@@_keyans_tmpa_tl, \l_@@_keyans_tmpb_tl,
%                       \l_@@_keyans_tmpa_dim,}
%
%    The boolean variable \cs{l_@@_store_active_bool} setting by
%    \mykey{save-ans} key (\S\ref{key:resume}) activates all the
%    mechanism related to \ics*{anskey}, \myenv*{keyans}, \myenv*{keyans*}
%    and \myenv*{keyanspic}.
%
%    \smallskip
%
%    The variable \cs{l_@@_store_name_tl} sets the name for the storage in
%    \mymeta{sequence} and \mymeta{prop list}, the variable \cs{g_@@_store_name_tl} is
%    just a copy of the storage name used by the \mykey{check-ans} key (\S\ref{key:resume}).
%
%    \smallskip
%
%    The variable \cs{l_@@_store_anskey_arg_tl} stores the contents of \ics*{anskey} (\S\ref{cmd:anskey})
%    and the variable \cs{l_@@_store_keyans_label_tl} stores the contents of
%    \ics*{item*} (\S\ref{cmd:item-starred}) for the \myenv*{keyans} and \myenv*{keyans*} environments and the contents of
%    \ics*{anspic*} (\S\ref{cmd:anspic}) for the \myenv*{keyanspic} environment.
%
%    \smallskip
%
%    The variable \cs{l_@@_keyans_tmpa_tl} is a temporary variable used
%    by \myenv*{keyans} and \myenv*{keyanspic} at various points.
% \iffalse
%% Variables used by |save-ans| key.
% \fi
%    \begin{macrocode}
\bool_new:N \l_@@_store_active_bool
\tl_new:N   \l_@@_store_name_tl
\tl_new:N   \g_@@_store_name_tl
\tl_new:N   \l_@@_store_anskey_arg_tl
\int_new:N  \l_@@_store_columns_join_int
\tl_new:N   \l_@@_store_keyans_label_tl
\tl_new:N   \l_@@_store_keyans_item_opt_tl
\tl_new:N   \l_@@_keyans_item_opt_tl
\tl_new:N   \l_@@_keyans_tmpa_tl
\tl_new:N   \l_@@_keyans_tmpb_tl
\dim_new:N  \l_@@_keyans_tmpa_dim
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\l_@@_setkey_tmpa_tl, \l_@@_setkey_tmpb_tl,
%                       \l_@@_setkey_tmpa_int, \l_@@_setkey_tmpa_seq,
%                       \l_@@_setkey_tmpb_seq,}
%    Internal variables used by the command \ics*{setenumext} (\S\ref{cmd:setenumext}).
% \iffalse
%% Variables used by |\setenumext|.
% \fi
%    \begin{macrocode}
\tl_new:N  \l_@@_setkey_tmpa_tl
\tl_new:N  \l_@@_setkey_tmpb_tl
\int_new:N \l_@@_setkey_tmpa_int
\seq_new:N \l_@@_setkey_tmpa_seq
\seq_new:N \l_@@_setkey_tmpb_seq
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\l_@@_store_opt_X_tl, \l_@@_print_keyans_X_tl,
%                       \l_@@_store_columns_X_bool, \l_@@_store_columns_X_int,
%                       \l_@@_store_columns_sep_X_bool, l_@@_store_columns_sep_X_dim, \l_@@_store_upper_level_X_bool }
%
%    Internal variables used by \myoarg[type=tt]{key
%    \textnormal{\textcolor{gray}{=}} val} in \myenv*{enumext} and
%    \myenv*{enumext*} environment, the command \ics*{printkeyans}
%    (\S\ref{cmd:printkeyans}) and the keys \mykey{columns*} and \mykey{columns-sep*}.
%
% \iffalse
%% Variables used by |key=val| in |enumext|, |enumext*| and |\printkeyans| .
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:n #1
  {
    \tl_new:c { l_@@_store_opt_#1_tl             }
    \tl_new:c { l_@@_print_keyans_#1_tl          }
    \bool_new:c { l_@@_store_columns_#1_bool     }
    \int_new:c { l_@@_store_columns_#1_int       }
    \bool_new:c { l_@@_store_columns_sep_#1_bool }
    \dim_new:c { l_@@_store_columns_sep_#1_dim   }
    \bool_new:c { l_@@_store_upper_level_#1_bool }
  }
\clist_map_inline:nn { i, ii, iii, iv, vii } { \@@_tmp:n {#1} }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\l_@@_show_answer_bool, \l_@@_show_position_bool,
%                       \l_@@_mark_ref_sym_tl, \l_@@_mark_answer_sym_tl,
%                       \l_@@_mark_position_str}
%    Internal variables for \emph{\enquote{storage system}} mechanism
%    used by \ics*{anskey} (\S\ref{cmd:anskey}), \myenv*{keyans} and
%    \myenv*{keyanspic} environments. These variables are
%    used by \mykey{show-ans}, \mykey{show-pos}, \mykey{mark-ans}, \mykey{save-key} and
%    \mykey{mark-ref} keys (\S\ref{int:storage-system}).
% \iffalse
%% Variables used by |show-ans|, |show-pos|, |mark-ans|, |mark-ref| and |\anskey|.
% \fi
%    \begin{macrocode}
\bool_new:N \l_@@_show_answer_bool
\bool_new:N \l_@@_show_position_bool
\tl_new:N   \l_@@_mark_ref_sym_tl
\tl_new:N   \l_@@_mark_answer_sym_tl
\str_new:N  \l_@@_mark_position_str
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_keyans_pic_body_seq, \l_@@_keyans_pic_width_dim,
%                  \l_@@_keyans_pic_above_int,\l_@@_keyans_pic_below_int,
%                  \l_@@_keyans_pic_above_skip,}
%    Internal variables used by \myenv*{keyanspic} environment (\S\ref{env:keyanspic}).
% \iffalse
%% Variables used by |\anspic| and |keyanspic|.
% \fi
%    \begin{macrocode}
\seq_new:N  \l_@@_keyans_pic_body_seq
\dim_new:N  \l_@@_keyans_pic_width_dim
\int_new:N  \l_@@_keyans_pic_above_int
\int_new:N  \l_@@_keyans_pic_below_int
\skip_new:N \l_@@_keyans_pic_above_skip
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_store_ans_bool,\l_@@_check_ans_bool,
%                  \g_@@_check_ans_show_bool, \g_@@_check_ans_show_h_bool,
%                  \g_@@_check_ans_item_tl, \g_@@_count_item_anskey_int,
%                  \g_@@_count_item_number_int,}
%    Internal variables used by \emph{\enquote{check answer}} mechanism
%    (\S\ref{int:check-answer}) controlled by the \mykey{check-ans} and
%    \mykey{no-store} keys.
% \iffalse
%% Variables used by check-answer mechanism, |check-ans| and |no-store| keys.
% \fi
%    \begin{macrocode}
\bool_new:N \l_@@_store_ans_bool
\bool_new:N \l_@@_check_ans_bool
\bool_new:N \g_@@_check_ans_show_bool
\bool_new:N \g_@@_check_ans_show_h_bool
\tl_new:N   \g_@@_check_ans_item_tl
\int_new:N  \g_@@_count_item_anskey_int
\int_new:N  \g_@@_count_item_number_int
\int_new:N  \g_@@_standar_star_env_int
\int_new:N  \g_@@_starred_star_env_int
\int_new:N  \g_@@_starred_keyans_star_env_int
\int_new:N  \g_@@_standar_keyans_star_env_int
\int_new:N  \g_@@_standar_keyans_pic_star_env_int
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\l_@@_hyperref_bool, \l_@@_footnotes_key_bool,}
%    The boolean variable \cs{l_@@_hyperref_bool} will determine if the
%    \mypkg{hyperref} package is present or load in memory
%    (\S\ref{pkg:hyperref}). The boolean variable \cs{l_@@_footnotes_key_bool}
%    determine if \mypkg{hyperref} is load with key \texttt{hyperfootnotes=true}.
%
% \iffalse
%% Variables used for hyperref detection.
% \fi
%    \begin{macrocode}
\bool_new:N \l_@@_hyperref_bool
\bool_new:N \l_@@_footnotes_key_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{ \l_@@_newlabel_arg_one_tl, \l_@@_newlabel_arg_two_tl,
%                        \l_@@_store_write_aux_file_tl, \l_@@_label_copy_X_tl, }
%
%    Internal variables are used when executing the \mykey{save-ref} key.
%    The variables \myvarenv{l__@@_label_copy_X_tl} correspond to temporary
%    copies of the labels defined by level on which operations will be performed.
%
%    \smallskip
%
%    The variables \cs{l_@@_newlabel_arg_one_tl} and \cs{l_@@_newlabel_arg_two_tl}
%    will be used to form the arguments passed to the function
%    \cs{@@_newlabel:nn} and the variable \cs{l_@@_store_write_aux_file_tl}
%    will be in charge of executing the writing code in the |.aux| file.
% \iffalse
%% Variables used by |save-ref| key (internal label and ref).
% \fi
%    \begin{macrocode}
\tl_new:N \l_@@_newlabel_arg_one_tl
\tl_new:N \l_@@_newlabel_arg_two_tl
\tl_new:N \l_@@_store_write_aux_file_tl
\cs_set_protected:Npn \@@_tmp:n #1
  {
    \tl_new:c { l_@@_label_copy_#1_tl }
  }
\clist_map_inline:nn { i, ii, iii, iv, v, vi, vii, viii } { \@@_tmp:n {#1} }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{ \g_@@_footnote_int, \g_@@_footnote_arg_seq, \g_@@_footnote_int_seq,}
%    Internal variables used for redefinition of |\footnote|.
% \iffalse
%% Variables used by |footnote|.
% \fi
%    \begin{macrocode}
\int_new:N \g_@@_footnote_int
\seq_new:N \g_@@_footnote_arg_seq
\seq_new:N \g_@@_footnote_int_seq
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\c_@@_counter_style_tl, \l_@@_ref_key_arg_tl,
%                       \l_@@_ref_aux_tl, \l_@@_the_counter_X_tl,
%                       \l_@@_counter_style_for_ref_X_tl, }
%    Internal variables used by \mykey{ref} key (\S\ref{key:mini-multi}, \S\ref{vspace:multi}).
% \iffalse
%% Variables used by |ref| key.
% \fi
%    \begin{macrocode}
\tl_const:Nn \c_@@_counter_style_tl
  { { arabic } { roman } { Roman } { alph } { Alph } }
\tl_new:N \l_@@_ref_key_arg_tl
\tl_new:N \l_@@_ref_aux_tl
\cs_set_protected:Npn \@@_tmp:n #1
  {
    \tl_new:c  { l_@@_counter_style_for_ref_#1_tl }
    \tl_new:c  { l_@@_the_counter_#1_tl }
    \tl_set:ce { l_@@_the_counter_#1_tl } { \exp_not:c { theenumX#1 } }
  }
\clist_map_inline:nn { i, ii, iii, iv, v, vi, vii, viii } { \@@_tmp:n {#1} }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\l_@@_item_starred_X_bool, l_@@_item_column_pos_X_int,
%                       \g_@@_item_count_all_X_int, \l_@@_joined_item_X_int,
%                       \l_@@_joined_item_aux_X_int, \l_@@_tmpa_X_int,
%                       \l_@@_item_text_X_box, \l_@@_joined_width_X_dim,
%                       \l_@@_item_width_X_dim, \g_@@_item_symbol_aux_X_tl,
%                       \l_@@_align_label_X_str, \g_@@_minipage_active_X_bool,
%                       \g_@@_miniright_code_X_tl , \g_@@_minipage_center_X_bool,
%                       \g_@@_minipage_right_X_dim, \g_@@_minipage_right_X_skip,}
%    Internal variables used by \myenv*{enumext*} and \myenv*{keyans*} environments.
% \iffalse
%% Variables used by |enumext*| and |keyans*| environments.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:n #1
  {
    \bool_new:c { l_@@_item_starred_#1_bool    }
    \int_new:c  { l_@@_item_column_pos_#1_int  }
    \int_new:c  { g_@@_item_count_all_#1_int   }
    \int_new:c  { l_@@_joined_item_#1_int      }
    \int_new:c  { l_@@_joined_item_aux_#1_int  }
    \int_new:c  { l_@@_tmpa_#1_int             }
    \box_new:c  { l_@@_item_text_#1_box        }
    \dim_new:c  { l_@@_joined_width_#1_dim     }
    \dim_new:c  { l_@@_item_width_#1_dim       }
    \tl_new:c   { g_@@_item_symbol_aux_#1_tl   }
    \str_new:c  { l_@@_align_label_#1_str      }
    \bool_new:c { g_@@_minipage_active_#1_bool }
    \tl_new:c   { g_@@_miniright_code_#1_tl    }
    \bool_new:c { g_@@_minipage_center_#1_bool }
    \dim_new:c  { g_@@_minipage_right_#1_dim   }
    \skip_new:c { g_@@_minipage_right_#1_skip  }
  }
\clist_map_inline:nn { vii, viii } { \@@_tmp:n {#1} }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\c_@@_all_envs_clist,}
%    An internal |clist-var| variable to run with \myvarenv{__@@_tmp:n}.
%    \begin{macrocode}
\clist_const:Nn \c_@@_all_envs_clist
  {
    {level-1}{i}, {level-2}{ii}, {level-3}{iii}, {level-4}{iv},
    {keyans}{v}, {enumext*}{vii}, {keyans*}{viii}
  }
%    \end{macrocode}
% \end{variable}
%
% \subsection{Some utility functions}
%
% \begin{macro}{\@@_at_begin_document:n}
%    A internal \emph{\enquote{hook}} function used for copying plain
%    \myenv{list} and \myenv{minipage} environments definition and
%    \mypkg{hyperref} detection.
% \iffalse
%% A internal "hooks" functions used for copying and execute code.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_at_begin_document:n #1
  {
    \hook_gput_code:nnn {begindocument} {enumext} { #1 }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_after_env:nn}
%    A internal \emph{\enquote{hook}} function for execute code \mykey{minirigth}
%    and \mykey{minirigth*} keys outside the \myenv*{enumext*} and
%    \myenv*{keyans*} environments and print \mykey{check-ans} outside the
%    \myenv*{enumext} and \myenv*{enumext*} environments.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_after_env:nn #1 #2
  {
    \hook_gput_code:nnn {env/#1/after} {enumext} {#2}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_level:}
%    Function for check current level in \myenv*{enumext}.
% \iffalse
%% Function to check current level.
% \fi
%    \begin{macrocode}
\cs_new:Nn \@@_level:
  {
    \int_to_roman:n { \l_@@_level_int }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\@@_if_is_int:nT, \@@_if_is_int:nF, \@@_if_is_int:nTF}
%    A conditional function to know if the variable we are passing is
%    an integer used by \mykey{start} and \mykey{widest} keys.
%    This function is taken directly from the answer given by Henri Menke
%    in \href{https://tex.stackexchange.com/a/427559}{How to test if an expl3 function argument is an integer expression?}.
% \iffalse
%% Function to check integer variables used by |start| and |widest| keys.
% \fi
%    \begin{macrocode}
\prg_new_protected_conditional:Npnn \@@_if_is_int:n #1 { T, F, TF }
  {
    \regex_match:nnTF { ^[\+\-]?[\d]+$ } {#1} % $
      { \prg_return_true: }
      { \prg_return_false: }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_show_length:nnn}
%    Internal function used by \mykey{show-length} key to show
%    \emph{\enquote{all lengths}} calculated and use in
%    \myenv*{enumext}, \myenv*{enumext*}, \myenv*{keyans} and
%    \myenv*{keyans*} environments.
% \iffalse
%% Function to show list lengths used by |show-length| key.
% \fi
%    \begin{macrocode}
\cs_new:Npn \@@_show_length:nnn #1 #2 #3
  {
    * ~ #2
    \prg_replicate:nn { 14 - \str_count:n {#2} } { ~ }
      = ~ \use:c { #1_use:c } { l_@@_#2_#3_#1 } \\
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_zero_count_level:}
%    Internal function used by \mykey{check-ans} key.
% \iffalse
%% Function to zero count level used by |check-ans| key.
% \fi
%    \begin{macrocode}
\cs_set_protected:Nn \@@_zero_count_level:
  {
    \cs_set_protected:Npn \@@_tmp:n ##1
      {
        \int_gzero:c { g_@@_count_level_##1_int }
      }
    \clist_map_inline:nn { i, ii, iii, iv, vii } { \@@_tmp:n {##1} }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_current_env:}
%   The function \cs{@@_current_env:} will set the global variables
%   \cs{g_@@_standar_bool} and \cs{g_@@_starred_bool} with which we will
%   distinguish whether the environments \myenv*{enumext} and
%   \myenv*{enumext*} are nested in each other.
% \iffalse
%% Function to check current environment for |enumext| and |enumext*|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_current_env:
  {
    \str_case:en { \@currenvir }
      {
        {enumext}
          {
            \bool_lazy_and:nnT
              { \bool_not_p:n { \g_@@_standar_bool } }
              { \int_compare_p:nNn { \l_@@_level_h_int } = { \c_zero_int } }
              {
                \bool_gset_true:N \g_@@_standar_bool
                \int_gset:Nn \g_@@_standar_star_env_int { \inputlineno }
                \typeout{working-on-enumext}
              }
          }
        {enumext*}
          {
            \bool_lazy_and:nnT
              { \bool_not_p:n { \g_@@_starred_bool } }
              { \int_compare_p:nNn { \l_@@_level_int } = { \c_zero_int } }
              {
                \bool_gset_true:N \g_@@_starred_bool
                \int_gset:Nn \g_@@_starred_star_env_int { \inputlineno }
                \typeout{working-on-enumext*}
              }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Copying \env{list} and \env{minipage} environments}
%
% The \myenv{list} environment provided by \hologo{LaTeX} has the
% following plain form:
%
% \iffalse
%<*example>
% \fi
\begin{examplecode}[frame=none]
\list`\mymarg[type=tt]{arg one}\mymarg[type=tt]{arg two}`
  \item`\myoarg[type=tt]{opt}`
\endlist
\end{examplecode}
% \iffalse
%</example>
% \fi
%
% As a precaution we copy them using \cs{@@_at_begin_document:n} in
% case any package redefines the \myenv{list} environment or a related
% command.
%
% \begin{macro}{\@@_start_list:nn, \@@_stop_list:, \@@_item_std:w,}
%    The functions \cs{@@_start_list:nn}, \cs{@@_stop_list:} and
%    \cs{@@_item_std:w} correspond to copies of \ics{list}, \ics{endlist}
%    and \ics{item} from plain definition of \myenv{list} environment.
% \iffalse
%% Copy list tools.
% \fi
%    \begin{macrocode}
\@@_at_begin_document:n
  {
    \cs_new_eq:NN \@@_start_list:nn \list
    \cs_new_eq:NN \@@_stop_list: \endlist
    \cs_new_eq:NN \@@_item_std:w \item
  }
%    \end{macrocode}
% \end{macro}
%
% The \myenv{minipage} environment provided by \hologo{LaTeX} has the
% following (simplified) plain form:
%
% \iffalse
%<*example>
% \fi
\begin{examplecode}[frame=none]
\minipage`\myoarg[type=tt]{pos}\myoarg[type=tt]{height}\myoarg[type=tt]{inner-pos}\mymarg[type=tt]{width}`
  `\mymeta[type=tt]{internal implement}`
\endminipage
\end{examplecode}
% \iffalse
%</example>
% \fi
%
% As a precaution we copy them using \cs{@@_at_begin_document:n} in
% case any package redefines the \myenv{minipage} environment or a
% related command.
%
% \begin{macro}{\@@_minipage:w, \@@_endminipage:}
%   The functions \cs{@@_minipage:w}, \cs{@@_endminipage:} and
%   correspond to copies of \ics{minipage}, \ics{endminipage}
%   from plain definition of \myenv{minipage} environment.
% \iffalse
%% Copy minipage tools.
% \fi
%    \begin{macrocode}
\@@_at_begin_document:n
  {
    \cs_new_eq:NN \@@_minipage:w \minipage
    \cs_new_eq:NN \@@_endminipage: \endminipage
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Compatibility with hyperref and footnotehyper}\label{pkg:hyperref}
%
% First we define the necessary rules using \emph{\enquote{hooks}} to
% determine if the \mypkg{hyperref} package is loaded.
%
% \iffalse
%% Detection off |hyperref| package with |hyperfootnotes=true|.
% \fi
%    \begin{macrocode}
\hook_gput_code:nnn { begindocument } { enumext } { \@@_after_hyperref: }
\hook_gset_rule:nnnn { begindocument } { enumext } { after } { hyperref }
%    \end{macrocode}
%
% \begin{macro}{\@@_after_hyperref:, \@@_hypertarget:nn, \@@_phantomsection:}
%    The function \cs{@@_after_hyperref:} sets the state of the boolean
%    variable \cs{l_@@_hyperref_bool} to \enquote{true} if the package is
%    loaded. At this point we will use the public macro |\IfHyperBoolean| to
%    determine if the |hyperfootnotes=true| key is present, if so, we set
%    the state of the boolean variable \cs{@@_footnotes_key_bool} to \enquote{true}.
%
%    \begin{macrocode}
\cs_new_protected:Nn \@@_after_hyperref:
  {
    \IfPackageLoadedTF { hyperref }
      {
        \msg_info:nnn { enumext } { package-load } { hyperref }
        \bool_set_true:N \l_@@_hyperref_bool
        \IfHyperBoolean{hyperfootnotes}
          {
            \typeout{hyperfootnotes=true}
            \bool_set_true:N \l_@@_footnotes_key_bool
          }
          { \typeout{hyperfootnotes=false} }
      }
      {  }
%    \end{macrocode}
%    If the state of the variable \cs{l_@@_footnotes_key_bool} is true
%    we will check if the package \mypkg{footnotehyper} is loaded, in
%    case it is not present, we will set the value of
%    \cs{l_@@_footnotes_key_bool} to false and we will redefine
%    |\footnote|.
% \iffalse
%% Detection off |footnotehyper| package.
% \fi
%    \begin{macrocode}
   \bool_if:NT \l_@@_footnotes_key_bool
     {
       \IfPackageLoadedTF { footnotehyper }
         {
           \msg_info:nnn { enumext } { package-load } { footnotehyper }
         }
         {
           \typeout{No ~ footnotehyper ~ load}
           \typeout{Load ~ and  ~ use  ~ \string\makesavenoteenv{enumext*}}
           \bool_set_false:N \l_@@_footnotes_key_bool
         }
     }
%    \end{macrocode}
%   The functions \cs{@@_hypertarget:nn} and \cs{@@_phantomsection:}
%   correspond to the internal copies of \ics{hypertarget} and
%   \ics{phantomsection}. If the boolean variable \cs{l_@@_hyperref_bool}
%   is false the functions \cs{@@_hypertarget:nn} and \cs{@@_phantomsection:}
%   will be disabled.
%    \begin{macrocode}
    \bool_if:NTF \l_@@_hyperref_bool
      {
        \cs_new_eq:NN \@@_hypertarget:nn \hypertarget
        \cs_new_eq:NN \@@_phantomsection: \phantomsection
      }
      {
        \cs_new_eq:NN \@@_hypertarget:nn \use_none:nn
        \cs_new_eq:NN \@@_phantomsection: \prg_do_nothing:
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_newlabel:nn,}
%    The function \cs{@@_newlabel:nn} write the information
%    to the |.aux| file when using the \mykey{save-ref} key. The
%    arguments taken by the function are:
%
% \begin{arguments}
%    \item \cs{l_@@_newlabel_arg_one_tl}
%    \item \cs{l_@@_newlabel_arg_two_tl}
% \end{arguments}
%
% \smallskip
%
% \begin{important}*
%    The trick here is to manage the number of arguments passed to
%    \ics{newlabel}|{#1}{#2}| according to the presence of the \mypkg{hyperref}
%    package.
% \end{important}
% \smallskip
%
% \iffalse
%% Write internal |label| in |.aux| file for |save-ref| key.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_newlabel:nn #1 #2
  {
    \protected@write \@auxout { }
      {
        \token_to_str:N \newlabel {#1}
          {
            {#2}
            \bool_if:NT \l_@@_hyperref_bool
              { { \thepage } {#2} {#1} }
            { }
          }
      }
    \@@_hypertarget:nn {#1} { }
    \@@_phantomsection:
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Definition of counters}\label{int:counters}
%
% \begin{macro}{\@@_define_counters:Nn, \@@_define_counters:cn}
%    To create the necessary \emph{\enquote{counters}} we must first
%    make sure that they are not already defined by the user or a
%    package such as \mypkg{enumitem}, otherwise a error will be
%    returned and the package loading will be aborted. The arguments
%    taken by the function are:
%
% \begin{arguments}
%    \item A token list \myvarenv{l__@@_counter_X_tl} for \emph{\enquote{store}} the counter's name.
%    \item The counter's name.
% \end{arguments}
%
% \iffalse
%% Definition of counters.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_define_counters:Nn #1 #2
  {
    \cs_if_exist:cTF { c@ #2 }
      { \msg_fatal:nnn { enumext } { counters }{ #2 } }
      {
        \tl_set:Nn #1 { #2 }
        \newcounter { #2 }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{enumXi, enumXii, enumXiii, enumXiv, enumXv, enumXvi, enumXvii, enumXviii}
%    The counters created here are \icounter{enumXi}, \icounter{enumXii},
%    \icounter{enumXiii} and \icounter{enumXiv} for \myenv*{enumext}
%    environment, \icounter{enumXv} for \myenv*{keyans} environment,
%    \icounter{enumXvi} for \myenv*{keyanspic} environment, \icounter{enumXvii} for
%    \myenv*{enumext*} and \icounter{enumXviii} for the \myenv*{keyans*}
%    environments.
%    \begin{macrocode}
\@@_define_counters:Nn \l_@@_counter_i_tl    { enumXi    }
\@@_define_counters:Nn \l_@@_counter_ii_tl   { enumXii   }
\@@_define_counters:Nn \l_@@_counter_iii_tl  { enumXiii  }
\@@_define_counters:Nn \l_@@_counter_iv_tl   { enumXiv   }
\@@_define_counters:Nn \l_@@_counter_v_tl    { enumXv    }
\@@_define_counters:Nn \l_@@_counter_vi_tl   { enumXvi   }
\@@_define_counters:Nn \l_@@_counter_vii_tl  { enumXvii  }
\@@_define_counters:Nn \l_@@_counter_viii_tl { enumXviii }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Definition of labels}
%
% This part of the code is inspired by the \mypkg{enumitem} package. The
% idea is to be able to access the counters using \ilabel{arabic*},
% \ilabel{Alph*}, \ilabel{alph*}, \ilabel{Roman*} and \ilabel{roman*}
% to use them in the \mykey{label} key.
%
% \begin{macro}{\@@_register_counter_style:Nn}
%    These \mymeta{counters} will be used as default
%    \mymeta{labels} if the \mykey{label} key is not used for
%    the different levels of the \myenv*{enumext} environment and the
%    \myenv*{keyans} environment, so it is necessary to get a default
%    value for \mykey{labelwidth} from these \mymeta{labels} at the same time.
% \iffalse
%% Register of counters style.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_register_counter_style:Nn #1 #2
  {
    \tl_const:cn { c_@@_widest_ \cs_to_str:N #1 _tl } {#2}
    \tl_gput_right:Nn \g_@@_counter_styles_tl {#1}
  }
\@@_register_counter_style:Nn \arabic { 0 }
\@@_register_counter_style:Nn \Alph   { M }
\@@_register_counter_style:Nn \alph   { m }
\@@_register_counter_style:Nn \Roman  { VIII }
\@@_register_counter_style:Nn \roman  { viii }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_label_width_by_box:Nn, \@@_label_width_by_box:cv}
%    The function \cs{@@_label_width_by_box:Nn} set the default \ics{labelwidth}
%    using a box width if no \mykey{labelwidth} key is passed.
% \iffalse
%% Set default label width using a box width.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_label_width_by_box:Nn #1 #2
  {
    \hbox_set:Nn \l_@@_label_width_by_box {#2}
    \dim_set:Nn #1 { \box_wd:N \l_@@_label_width_by_box }
  }
\cs_generate_variant:Nn \@@_label_width_by_box:Nn { cv }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_label_style:Nnn, \@@_label_style:cvn}
%     The function \cs{@@_label_style:Nnn} is used by the \mykey{label}
%     key to creates the variables containing the \mymeta{label style}
%     and will allow to use \ilabel{arabic*}, \ilabel{Alph*}, \ilabel{alph*},
%     \ilabel{Roman*} and \ilabel{roman*} as arguments.
%
%     It loops through the defined counter styles in \cs{g_@@_counter_styles_tl}
%     (\ics{arabic}, \ics{alph}, \ics{Alph}, \ics{roman}, and \ics{Roman}) for example,
%     looking for \ilabel{roman*} and replacing that by \ics{roman}\mymarg[type=tt]{counter},
%     and doing the same for the \cs{g_@@_widest_label_tl} to keep both in sync.
% \iffalse
%% Function to support |*| in |label| key.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_label_style:Nnn #1 #2 #3
  {
    \tl_clear_new:N #1
    \tl_put_right:Ne #1 { \tl_trim_spaces:n {#3} }
    \tl_gset_eq:NN \g_@@_widest_label_tl #1
    \tl_map_inline:Nn \g_@@_counter_styles_tl
      {
        \tl_replace_all:Nne #1 { ##1* } { \exp_not:N ##1 {#2} }
        \tl_greplace_all:Nne \g_@@_widest_label_tl { ##1* }
          { \tl_use:c { c_@@_widest_ \cs_to_str:N ##1 _tl } }
      }
    \@@_label_width_by_box:Nn \l_@@_current_widest_dim
      { \tl_use:N \g_@@_widest_label_tl }
    \tl_set_eq:cN { the #2 } #1
  }
\cs_generate_variant:Nn \@@_label_style:Nnn { cvn }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Setting keys associated with label}\label{key:label}
%
% \begin{macro}[int]{font, labelsep, labelwidth, wrap-label,wrap-label*}
%    Definition of keys \mykey{font}, \mykey{labelsep},
%    \mykey{labelwidth}, \mykey{wrap-label} and \mykey{wrap-label*} keys for
%    \myenv*{enumext} and \myenv*{keyans} environments.
% \iffalse
%% Add |font|, |labelsep|, |labelwidth| and |wrap-label| keys.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        font        .tl_set:c   = { l_@@_label_font_style_#2_tl },
        font        .value_required:n = true,
        labelsep    .dim_set:c  = { l_@@_labelsep_#2_dim },
        labelsep    .initial:n  = {0.3333em},
        labelsep    .value_required:n = true,
        labelwidth  .dim_set:c  = { l_@@_labelwidth_#2_dim },
        labelwidth  .value_required:n = true,
        wrap-label  .cs_set_protected:cp = { @@_wrapper_label_#2:n } ##1,
        wrap-label  .initial:n  = {##1},
        wrap-label  .value_required:n = true,
        wrap-label* .code:n = {
                                \bool_set_true:c { l_@@_wrap_label_opt_#2_bool }
                                \keys_set:nn { enumext / #1 } { wrap-label = {##1} }
                              },
        wrap-label* .value_required:n = true,
      }
  }
\clist_map_inline:Nn \c_@@_all_envs_clist { \@@_tmp:nn #1 }
%    \end{macrocode}
% \end{macro}
%
% \begin{important}*
%    In this point, the following are set \myvarenv{__@@_wrapper_label_X:n} which
%    will be used by \cs{@@_make_label:} for the different levels of the
%    \myenv*{enumext} environment and is set to \myvarenv{__@@_wrapper_label_v:n}
%    which will be used by \cs{@@_keyans_make_label:} for \myenv*{keyans} and \myenv*{keyanspic}
%    environments.
% \end{important}
%
% \begin{macro}[int]{align}
%
%   The \mykey{align} key is implemented differently for
%   \emph{\enquote{starred}} and \emph{\enquote{non starred}} environments.
%
% \iffalse
%% Add |align| key for |enumext| and |keyans|.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        align .choice:,
        align / left   .code:n =
                         {
                           \tl_clear:c { l_@@_label_fill_left_#2_tl  }
                           \tl_set:cn  { l_@@_label_fill_right_#2_tl } { \hfill }
                         },
        align / right  .code:n =
                         {
                           \tl_set:cn  { l_@@_label_fill_left_#2_tl  } { \hfill }
                           \tl_clear:c { l_@@_label_fill_right_#2_tl }
                         },
        align / center .code:n =
                         {
                           \tl_set:cn { l_@@_label_fill_left_#2_tl  } { \hfill }
                           \tl_set:cn { l_@@_label_fill_right_#2_tl } { \hfill }
                          },
        align .initial:n  = left,
        align .value_required:n  = true,
      }
  }
\clist_map_inline:nn
  {
    {level-1}{i}, {level-2}{ii}, {level-3}{iii}, {level-4}{iv}, {keyans}{v}
  }
  { \@@_tmp:nn #1 }
%    \end{macrocode}
%    Definition of \mykey{align} key for \myenv*{enumext*} and
%    \myenv*{keyans*} environments.
% \iffalse
%% Add |align| key for enummext* and keyans*.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        align .choice:,
        align / left   .code:n = \str_set:cn { l_@@_align_label_#2_str } { l },
        align / right  .code:n = \str_set:cn { l_@@_align_label_#2_str } { r },
        align / center .code:n = \str_set:cn { l_@@_align_label_#2_str } { c },
        align .initial:n = left,
        align .value_required:n = true,
      }
  }
\clist_map_inline:nn { {enumext*}{vii}, {keyans*}{viii} } { \@@_tmp:nn #1 }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Setting \texttt{label} and \texttt{ref} keys}\label{key:label-ref}
%
% \begin{macro}[int]{\@@_regex_label_ref_key:}
%    The internal function \cs{@@_regex_label_ref_key:} replace the
%    |*| with the actual counter of the running level and is used by
%    the \cs{@@_set_label_ref:n} function.
%
%    It loops through the defined counter styles in \cs{c_@@_counter_style_tl}
%    and replace |*| by real command, for example, looking for \ilabel{arabic*}
%    and replacing that by \ics{arabic}\mymarg[type=tt]{counter} defined
%    on the current level.
% \iffalse
%% Regex for replace * for |ref| key.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_regex_label_ref_key:
  {
    \tl_map_inline:Nn \c_@@_counter_style_tl
      {
        \regex_replace_once:nnN { \c{##1}\* }
          { \c{##1}\cB{\u{l_@@_ref_aux_tl}\cE} } \l_@@_ref_key_arg_tl
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\@@_set_label_ref:n}
%    The \cs{@@_set_label_ref:n} function controlled by the \mykey{ref}
%    key is in charge of handling the customization of the reference system.
%
%    First we will set the variable \myvarenv{l__@@_the_counter_X_tl}
%    according to the command created for \emph{each counter}, apply the
%    \emph{regex} function \cs{@@_regex_label_ref_key:} and then renew the
%    command and save it in the variable
%    \myvarenv{l__@@_counter_style_for_ref_X_tl}.
% \iffalse
%% Internal function used by |ref| key in enumext environment.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_set_label_ref:n #1
  {
    \tl_set:Nn \l_@@_ref_key_arg_tl {#1}
    \tl_set_eq:Nc \l_@@_ref_aux_tl { l_@@_counter_ \@@_level: _tl }
    \@@_regex_label_ref_key:
    \tl_set_eq:Nc \l_@@_ref_aux_tl { l_@@_the_counter_ \@@_level: _tl }
    \tl_put_right:ce { l_@@_counter_style_for_ref_ \@@_level: _tl }
      {
        \exp_not:N \renewcommand { \exp_not:V \l_@@_ref_aux_tl }
          { \exp_not:V \l_@@_ref_key_arg_tl }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\@@_use_key_ref:}
%    Finally the function \cs{@@_use_key_ref:} will execute the
%    modification for the reference system in the second argument of the
%    environment definition \myenv*{enumext}.
% \iffalse
%% Activate |ref| key in second arg of list for enumext environment.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_use_key_ref:
  {
    \tl_if_empty:cF { l_@@_counter_style_for_ref_ \@@_level: _tl }
      {
        \tl_use:c { l_@@_counter_style_for_ref_ \@@_level: _tl }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% For \myenv*{enumext*} and \myenv*{keyans*} environments the situation is
% a bit different since \mypkg{hyperref} interferes here (I am not clear why), so
% we will define a new function to execute the task.
%
% To handle that we will look at the nesting level of the starred
% environments, later I will run the constraint functions to make
% everything OK.
%
%
% \begin{macro}[int]{\@@_set_label_ref_h:n}
%    The \cs{@@_set_label_ref_h:n} function controlled by the \mykey{ref}
%    key is in charge of handling the customization of the reference system.
%
%    First we will set the variable \myvarenv{l__@@_the_counter_X_tl}
%    according to the command created for \emph{each counter}, apply the
%    \emph{regex} function \cs{@@_regex_label_ref_key:} and then renew the
%    command and save it in the variable \myvarenv{l__@@_counter_style_for_ref_X_tl}.
% \iffalse
%% Internal function used by |ref| key in enumext* and keyans* environment.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_set_label_ref_h:n #1
  {
    \tl_set:Nn \l_@@_ref_key_arg_tl {#1}
    \int_compare:nNnTF { \l_@@_level_h_int } = { 1 }
      {
        \tl_set_eq:NN \l_@@_ref_aux_tl \l_@@_counter_vii_tl
        \@@_regex_label_ref_key:
        \tl_set_eq:NN \l_@@_ref_aux_tl \l_@@_the_counter_vii_tl
        \tl_put_right:Ne \l_@@_counter_style_for_ref_vii_tl
          {
            \exp_not:N \renewcommand { \exp_not:V \l_@@_ref_aux_tl }
              { \exp_not:V \l_@@_ref_key_arg_tl }
          }
      }
      {
        \tl_set_eq:NN \l_@@_ref_aux_tl \l_@@_counter_viii_tl
        \@@_regex_label_ref_key:
        \tl_set_eq:NN \l_@@_ref_aux_tl \l_@@_the_counter_viii_tl
        \tl_put_right:Ne \l_@@_counter_style_for_ref_vii_tl
          {
            \exp_not:N \renewcommand { \exp_not:V \l_@@_ref_aux_tl }
              { \exp_not:V \l_@@_ref_key_arg_tl }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\@@_use_key_ref_h:}
%    Finally the function \cs{@@_use_key_ref_h:} will execute the
%    modification for the reference system in the second argument of the
%    environment definition \myenv*{enumext*} and \myenv*{keyans*}.
% \iffalse
%% Activate |ref| key in second arg of list for starred* environments.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_use_key_ref_h:
  {
    \int_compare:nNnTF { \l_@@_level_h_int } = { 1 }
      {
        \tl_if_empty:NF \l_@@_counter_style_for_ref_vii_tl
          {
            \tl_use:N \l_@@_counter_style_for_ref_vii_tl
          }
      }
      {
        \tl_if_empty:NF \l_@@_counter_style_for_ref_viii_tl
          {
            \tl_use:N \l_@@_counter_style_for_ref_viii_tl
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Define and set \texttt{label} key for \env{enumext} environment}
%
% \begin{macro}[int]{label,ref,\l_@@_label_i_tl,\l_@@_label_ii_tl, \l_@@_label_iii_tl, \l_@@_label_iv_tl}
%    Here we set the default \mymeta{labels} of the four levels of
%    \myenv*{enumext} environment, along with the default value for
%    \mykey{labelwidth} key.
% \iffalse
%% Define and set |label| and |ref| keys for |enumext|.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:nnn #1 #2 #3
  {
    \keys_define:nn { enumext / #1 }
      {
        label .code:n    = {
                             \@@_label_style:cvn { l_@@_label_#2_tl }
                               { l_@@_counter_#2_tl } {##1}
                             \dim_set_eq:cN  { l_@@_labelwidth_#2_dim }
                               \l_@@_current_widest_dim
                           },
        label .initial:n = #3,
        label .value_required:n = true,
        ref   .code:n    = \@@_set_label_ref:n {##1},
        ref   .value_required:n = true,
      }
  }
\@@_tmp:nnn { level-1 } {   i } { \arabic*.}
\@@_tmp:nnn { level-2 } {  ii } { (\alph*) }
\@@_tmp:nnn { level-3 } { iii } { \roman*. }
\@@_tmp:nnn { level-4 } {  iv } { \Alph*.  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Define and set \texttt{label} key for \env{enumext*} and \env{keyans*} environments}
%
% \begin{macro}[int]{label,ref,\l_@@_label_vii_tl,\l_@@_label_viii_tl}
%    Here we set the default \mymeta{labels} for \myenv*{enumext*} and
%    \myenv*{keyans*} environments, along with the default value for
%    \mykey{labelwidth} key.
% \iffalse
%% Define and set |label| and |ref| keys for starred environments.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:nnn #1 #2 #3
  {
    \keys_define:nn { enumext / #1 }
      {
        label .code:n    = {
                             \@@_label_style:cvn { l_@@_label_#2_tl }
                               { l_@@_counter_#2_tl } {##1}
                             \dim_set_eq:cN  { l_@@_labelwidth_#2_dim }
                               \l_@@_current_widest_dim
                           },
        label .initial:n = #3,
        label .value_required:n = true,
        ref   .code:n    = \@@_set_label_ref_h:n {##1},
        ref   .value_required:n = true,
      }
  }
\@@_tmp:nnn { enumext* } {  vii } { \arabic*.}
\@@_tmp:nnn { keyans*  } { viii } { (\Alph*) }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Define and set \texttt{label} key for \env{keyans} and \env{keyanspic} environment}
%
% \begin{macro}[int]{label}
% \begin{macro}{\l_@@_label_v_tl,\l_@@_label_vi_tl,}
%    Here we set the default \mymeta{label} for \myenv*{keyans}
%    and \myenv*{keyanspic} environment, along with the default value for
%    \mykey{labelwidth}. The \myenv*{keyanspic} environment use the same
%    \mymeta{label} as the \myenv*{keyans} environment.
%
% Define and set \mykey{label} key for \myenv*{keyans} environment.
% \iffalse
%% Define and set |label| key for |keyans| and |keyanspic|.
% \fi
%    \begin{macrocode}
\keys_define:nn { enumext / keyans }
  {
    label .code:n    = {
                         \@@_label_style:cvn { l_@@_label_v_tl }
                           { l_@@_counter_v_tl } {#1}
                         \dim_set_eq:cN  { l_@@_labelwidth_v_dim }
                           \l_@@_current_widest_dim
                         \@@_label_style:cvn { l_@@_label_vi_tl }
                            { l_@@_counter_vi_tl } {#1}
                         \dim_set_eq:cN  { l_@@_labelwidth_v_dim }
                            \l_@@_current_widest_dim
                       },
    label .initial:n = (\Alph*),
    label .value_required:n = true,
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Setting \texttt{start} and \texttt{widest} keys}\label{key:start-widest}
%
% \begin{macro}{\@@_start_from:NNn, \@@_start_from:ccn}
%    The function \cs{@@_start_from:NNn} used by the \mykey{start}
%    key take three arguments:
% \begin{arguments}
%    \item \myvarenv{l__@@_label_X_tl}
%    \item \myvarenv{l__@@_start_X_int}
%    \item \meta{integer or string}
% \end{arguments}
%
%    The first argument of this function are the \emph{\enquote{counter style}} set by
%    \mykey{label} key, the second argument is returned by the function,
%    the third argument can be an \mymeta{integer} or \mymeta{string} of the
%    form \ics{Alph}, \ics{alph}, \ics{Roman} or \ics{roman}.
%    This effectively allows \mykey{start}|=A| or \mykey{start}|=1| to
%    be used.
% \iffalse
%% Internal function for |start| key.
%% #1 \l_enumext_label_X_tl
%% #2 \l_enumext_start_X_int
%% #3 integer or string
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_start_from:NNn #1 #2 #3
  {
    \@@_if_is_int:nTF { #3 }
       {
         \int_set:Nn #2 {#3}
       }
       {
         \regex_match:nVT { \c{Alph} | \c{alph} } {#1}
           { \int_set:Nn #2 { \int_from_alph:n {#3} } }
         \regex_match:nVT { \c{Roman} | \c{roman} } {#1}
           { \int_set:Nn #2  { \int_from_roman:n {#3} } }
       }
  }
\cs_generate_variant:Nn \@@_start_from:NNn { ccn }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_widest_from:nNNn, \@@_widest_from:nccn}
%    The function \cs{@@_widest_from:nNNn} used by the \mykey{widest}
%    key take four arguments:
% \begin{arguments}
%    \item The counter associated with the environment level
%    \item \myvarenv{l__@@_label_X_tl}
%    \item \myvarenv{l__@@_labelwidth_X_dim}
%    \item \meta{integer or string}
% \end{arguments}
%
%    The second and third arguments of this function are the values set by
%    \mykey{label} and \mykey{labelwidth} keys, the four argument can
%    be an \mymeta{integer} or \mymeta{string} of the
%    form \ics{Alph}, \ics{alph}, \ics{Roman} or \ics{roman}.
%    The value of the four argument is set temporarily for the
%    identified counter in this point (level), then the value is expanded
%    into a \emph{\enquote{box}} and the \emph{\enquote{width}} of the
%    \emph{\enquote{box}} is returned.
% \iffalse
%% Internal function for |widest| key.
%% #1 The counter associated with the environment level
%% #2 \l_enumext_label_X_tl
%% #3 \l_enumext_labelwidth_X_tl
%% #4 integer or string
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_widest_from:nNNn #1 #2 #3 #4
  {
    \@@_if_is_int:nTF {#4}
      {
        \setcounter{enumX#1} { #4 }
      }
      {
        \regex_match:nVT { \c{Alph} | \c{alph} } {#2}
          { \setcounter{enumX#1} { \int_from_alph:n {#4} } }
        \regex_match:nVT { \c{Roman} | \c{roman} } {#2}
          { \setcounter{enumX#1} { \int_from_roman:n {#4} } }
      }
     \@@_label_width_by_box:cv
       { l_@@_labelwidth_#1_dim } { l_@@_label_#1_tl }
  }
\cs_generate_variant:Nn \@@_widest_from:nNNn { nccn }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{start, widest, \l_@@_start_X_int}
%    Now define and set \mykey{start} and \mykey{widest} keys for
%    \myenv*{enumext} and \myenv*{keyans} environments.
%
% \iffalse
%% Add |start| and |widest| key.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        start  .code:n    = {
                              \@@_start_from:ccn
                                { l_@@_label_#2_tl }
                                { l_@@_start_#2_int } {##1}
                             },
        start  .initial:n = 1,
        widest .code:n    = {
                              \@@_widest_from:nccn {#2}
                                { l_@@_label_#2_tl }
                                { l_@@_labelwidth_#2_dim } {##1}
                            },
        widest .value_required:n = true,
        start  .value_required:n = true,
      }
  }
\clist_map_inline:Nn \c_@@_all_envs_clist { \@@_tmp:nn #1 }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Setting keys for vertical spaces}
%
% \begin{macro}[int]{topsep, partopsep, parsep, noitemsep, nosep}
% Define and set \mykey{topsep}, \mykey{partopsep}, \mykey{parsep},
% \mykey{itemsep}, \mykey{noitemsep} and \mykey{nosep} keys for
% \myenv*{enumext} and \myenv*{keyans} environments.
%
% \iffalse
%% Add |topsep|, |partopsep|, |parsep|, |noitemsep| and |nosep| keys.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:nnnnnn #1 #2 #3 #4 #5 #6
  {
    \keys_define:nn { enumext / #1 }
      {
        topsep    .skip_set:c = { l_@@_topsep_#2_skip },
        topsep    .initial:n  = {#3},
        topsep    .value_required:n = true,
        partopsep .skip_set:c = { l_@@_partopsep_#2_skip },
        partopsep .initial:n  = {#4},
        partopsep .value_required:n = true,
        parsep    .skip_set:c = { l_@@_parsep_#2_skip },
        parsep    .initial:n  = {#5},
        parsep    .value_required:n = true,
        itemsep   .skip_set:c = { l_@@_itemsep_#2_skip },
        itemsep   .initial:n  = {#6},
        itemsep   .value_required:n = true,
        noitemsep .meta:n     = { itemsep = 0pt, parsep = 0pt },
        noitemsep .value_forbidden:n = true,
        nosep     .meta:n     = {
                                  itemsep = 0pt, parsep= 0pt,
                                  topsep = 0pt, partopsep = 0pt,
                                },
        nosep     .value_forbidden:n = true,
      }
  }
%    \end{macrocode}
%    Now we set the values based on standard \myclass{article} class in
%    \mydim{10pt}.
%    \begin{macrocode}
\@@_tmp:nnnnnn { level-1 } { i } { 8.0pt plus 2.0pt minus 4.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt } { 4.0pt plus 2.0pt minus 1.0pt }
  { 4.0pt plus 2.0pt minus 1.0pt }
\@@_tmp:nnnnnn { level-2 } { ii } { 4.0pt plus 2.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt } { 2.0pt plus 1.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt }
\@@_tmp:nnnnnn { level-3 } { iii } { 2.0pt plus 1.0pt minus 1.0pt }
  { 1.0pt minus 1.0pt }{ 0pt }{ 2.0pt plus 1.0pt minus 1.0pt }
\@@_tmp:nnnnnn { level-4 } { iv } { 2.0pt plus 1.0pt minus 1.0pt }
  { 1.0pt minus 1.0pt }{ 0pt }{ 2.0pt plus 1.0pt minus 1.0pt }
\@@_tmp:nnnnnn { keyans  } { v }{ 4.0pt plus 2.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt }{ 2.0pt plus 1.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt }
\@@_tmp:nnnnnn { enumext* } { vii } { 8.0pt plus 2.0pt minus 4.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt } { 4.0pt plus 2.0pt minus 1.0pt }
  { 4.0pt plus 2.0pt minus 1.0pt }
\@@_tmp:nnnnnn { keyans* } { viii } { 4.0pt plus 2.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt } { 2.0pt plus 1.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Setting keys for horizontal spaces}\label{key:list-indent}
%
% \begin{macro}[int]{itemindent, rightmargin, listparindent, list-offset, list-indent}
%
%    Define and set \mykey{itemindent}, \mykey{rightmargin}, \mykey{listparindent}, \mykey{list-offset}
%    and \mykey{list-indent} keys for \myenv*{enumext} and \myenv*{keyans}
%    environments.
% \iffalse
%% Add |itemindent|, |rightmargin|, |listparindent|, |list-offset| and |list-indent| keys.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        itemindent    .dim_set:c = { l_@@_fake_item_indent_#2_dim },
        itemindent    .value_required:n = true,
        rightmargin   .dim_set:c = { l_@@_rightmargin_#2_dim },
        rightmargin   .value_required:n = true,
        listparindent .dim_set:c = { l_@@_listparindent_#2_dim },
        listparindent .value_required:n = true,
        list-offset   .dim_set:c = { l_@@_listoffset_#2_dim },
        list-offset   .value_required:n = true,
        list-indent   .code:n    =
                        \bool_set_true:c { l_@@_leftmargin_tmp_#2_bool }
                        \dim_set:cn { l_@@_leftmargin_tmp_#2_dim } {##1},
        list-indent   .value_required:n = true,
      }
  }
\clist_map_inline:Nn \c_@@_all_envs_clist { \@@_tmp:nn #1 }
%    \end{macrocode}
% \end{macro}
%
% For \myenv*{enumext*} and \myenv*{keyans*} environments the situation
% is a bit different, the \mykey{list-indent} key behaves like the \mykey{list-offset} key.
% \iffalse
%% Set |list-indent| key for |enumext*| and |keyans*| environments.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:n #1
  {
    \keys_define:nn { enumext / #1 } { list-indent .initial:n  = 0pt, }
  }
\clist_map_inline:nn { enumext*, keyans* } { \@@_tmp:n {#1} }
%    \end{macrocode}
%
% \subsubsection{Functions for setting the fake \texttt{itemindent}}
%
% \begin{macro}[int]{\@@_fake_item:,\@@_keyans_fake_item:, \@@_fake_item_vii:, \@@_fake_item_viii:}
%
%    The \mykey{itemindent} key does not set the value of |\itemindent|, it only
%    sets the value of the \emph{horizontal space} applied using |\skip_horizontal:N|. We will
%    store this value in the variable and only apply it when it is greater
%    than \mydim{0pt}. Here I will need to place
%    |\mode_leave_vertical:| and the plain \hologo{TeX} macro
%    |\ignorespaces| to avoid unwanted extra space when using the
%    \mykey{itemindent} key.
% \iffalse
%% Internal functions for |itemindent| key. |\mode_leave_vertical:| nor
% \fi
%    \begin{macrocode}
\cs_set_protected:Nn \@@_fake_item:
  {
    \dim_compare:nNnT
      { \dim_use:c { l_@@_fake_item_indent_ \@@_level: _dim } }
      >
      { \c_zero_dim }
      {
        \tl_set:ce { l_@@_fake_item_indent_ \@@_level: _tl }
          {
            \exp_not:N \mode_leave_vertical:
            \exp_not:n { \skip_horizontal:n }
              { \dim_use:c { l_@@_fake_item_indent_ \@@_level: _dim } }
            \ignorespaces
          }
      }
   }
\cs_set_protected:Nn \@@_keyans_fake_item:
  {
    \dim_compare:nNnT
      { \l_@@_fake_item_indent_v_dim } > { \c_zero_dim }
      {
        \tl_set:Ne \l_@@_fake_item_indent_v_tl
          {
            \exp_not:N \mode_leave_vertical:
            \exp_not:N \skip_horizontal:N \l_@@_fake_item_indent_v_dim
          }
      }
   }
\cs_set_protected:Nn \@@_fake_item_vii:
  {
    \dim_compare:nNnT
      { \l_@@_fake_item_indent_vii_dim } > { \c_zero_dim }
      {
        \tl_set:Ne \l_@@_fake_item_indent_vii_tl
          {
            \exp_not:N \mode_leave_vertical:
            \exp_not:N \skip_horizontal:N \l_@@_fake_item_indent_vii_dim
          }
      }
   }
\cs_set_protected:Nn \@@_fake_item_viii:
  {
    \dim_compare:nNnT
      { \l_@@_fake_item_indent_viii_dim } > { \c_zero_dim }
      {
        \tl_set:Ne \l_@@_fake_item_indent_viii_tl
          {
            \exp_not:N \mode_leave_vertical:
            \exp_not:N \skip_horizontal:N \l_@@_fake_item_indent_viii_dim
          }
      }
   }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Setting \texttt{show-length} key}
%
% \begin{macro}[int]{show-length}
%    Define and set \mykey{show-length} key for \myenv*{enumext},
%    \myenv*{enumext*}, \myenv*{keyans} and \myenv*{keyans*} environments.
%    The function sets the boolean variable \myvarenv{l__@@_show_length_X_bool}
%    used in the definition of all environments to \emph{\enquote{true}}
%    and calls the function \cs{@@_show_length:nnn} which prints all the
%    values of the \emph{\enquote{vertical}} and \emph{\enquote{horizontal}}
%    parameters calculated and used.
% \iffalse
%% Add |show-length| key for all environments..
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        show-length .bool_set:c = { l_@@_show_length_#2_bool },
        show-length .initial:n  = false,
      }
  }
\clist_map_inline:Nn \c_@@_all_envs_clist { \@@_tmp:nn #1 }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Setting \texttt{before}, \texttt{after} and \texttt{first} keys}
%
% \begin{macro}[int]{before, before*, after, first}
%    Define and set \mykey{before}, \mykey{before*}, \mykey{after} and \mykey{first} keys
%    for \myenv*{enumext} and \myenv*{keyans} environments.
% \iffalse
%% Add |before|, |before*|, |after| and |first| keys.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        before  .tl_set:c   = { l_@@_before_no_starred_key_#2_tl },
        before  .value_required:n = true,
        before* .tl_set:c   = { l_@@_before_starred_key_#2_tl },
        before* .value_required:n = true,
        after   .tl_set:c   = { l_@@_after_stop_list_#2_tl },
        after   .value_required:n = true,
        first   .tl_set:c   = { l_@@_after_list_args_#2_tl },
        first   .value_required:n = true,
      }
  }
\clist_map_inline:Nn \c_@@_all_envs_clist { \@@_tmp:nn #1 }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Functions for \texttt{before}, \texttt{after} and \texttt{first} keys in \env{enumext}}
%
% \begin{macro}{\@@_before_args_exec:,\@@_before_keys_exec:,\@@_after_stop_list:,\@@_after_args_exec:}
%
%    The function \cs{@@_before_args_exec:} executes the \mymarg[type=tt]{code} set by the
%    \mykey{before*} key \emph{\enquote{before}} the \myenv*{enumext}
%    environment is started. The \mymarg[type=tt]{code} is executed \emph{\enquote{without}}
%    knowing any definition of the \emph{second argument} of the list.
% \iffalse
%% Function for |before|, |before*|, |after| and |first| keys in |enumext|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_before_args_exec:
  {
    \tl_use:c { l_@@_before_starred_key_ \@@_level: _tl }
  }
%    \end{macrocode}
%
%    The function \cs{@@_before_keys_exec:} executes the \mymarg[type=tt]{code} set by the
%    \mykey{before} key \emph{\enquote{before}} the \myenv*{enumext}
%    environment is started in \emph{second argument} of the list. The
%    \mymarg[type=tt]{code} is executed \emph{\enquote{knowing}}
%    all definition and values provides by \mymeta{keys}.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_before_keys_exec:
  {
    \tl_use:c { l_@@_before_no_starred_key_ \@@_level: _tl }
  }
%    \end{macrocode}
%
%    The function \cs{@@_after_stop_list:} executes the \mymarg[type=tt]{code} set by the
%    \mykey{after} key \emph{\enquote{after}} the \myenv*{enumext}
%    environment has finished.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_after_stop_list:
  {
    \tl_use:c { l_@@_after_stop_list_ \@@_level: _tl }
  }
%    \end{macrocode}
%    The function \cs{@@_after_args_exec:} executes the \mymarg[type=tt]{code} set by the
%    \mykey{first} key after the end of the second argument of the list
%    defining the \myenv*{enumext} environment, just before the first
%    occurrence of \ics{item}.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_after_args_exec:
  {
    \tl_use:c { l_@@_after_list_args_ \@@_level: _tl }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Functions for \texttt{before}, \texttt{after} and \texttt{first} keys in \env{keyans}}
%
% \begin{macro}{\@@_before_args_exec_v:,\@@_before_keys_exec_v:,\@@_after_stop_list_v:,
%               \@@_after_args_exec_v:}
%    The function \cs{@@_before_args_exec_v:} executes the \mymarg[type=tt]{code} set
%    by the \mykey{before*} key \emph{\enquote{before}} the
%    \myenv*{keyans} environment is started. The \mymarg[type=tt]{code} is executed
%    \emph{\enquote{without}} knowing any definition of the \mymarg[type=tt]{arg two} of the list.
% \iffalse
%% Function for |before|, |before*|, |after| and |first| keys in |keyans|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_before_args_exec_v:
  {
    \tl_use:N \l_@@_before_starred_key_v_tl
  }
%    \end{macrocode}
%    The function \cs{@@_before_keys_exec_v:} executes the \mymarg[type=tt]{code} set by the
%    \mykey{before} key \emph{\enquote{before}} the \myenv*{keyans}
%    environment is started in \mymarg[type=tt]{arg two} of the list. The
%    \mymarg[type=tt]{code} is executed \emph{\enquote{knowing}}
%    all definition and values provides by \mymeta{keys}.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_before_keys_exec_v:
  {
    \tl_use:N \l_@@_before_no_starred_key_v_tl
  }
%    \end{macrocode}
%
%    The function \cs{@@_after_stop_list_v:} executes the \mymarg[type=tt]{code} set by the
%    \mykey{after} key \emph{\enquote{after}} the \myenv*{keyans}
%    environment has finished.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_after_stop_list_v:
  {
    \tl_use:N \l_@@_after_stop_list_v_tl
  }
%    \end{macrocode}
%    The function \cs{@@_after_args_exec_v:} executes the \mymarg[type=tt]{code} set by the
%    \mykey{first} key after the end of \mymarg[type=tt]{arg two} of the list
%    defining the \myenv*{keyans} environment, just before the first
%    occurrence of \ics{item}.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_after_args_exec_v:
  {
    \tl_use:N \l_@@_after_list_args_v_tl
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Functions for \texttt{before}, \texttt{after} and \texttt{first} keys in \env{enumext*} and \env{keyans*}}
%
% \begin{macro}{\@@_before_args_exec_vii:,\@@_before_keys_exec_vii,\@@_after_stop_list_vii:,
%               \@@_after_args_exec_vii:}
%    The function \cs{@@_before_args_exec_v:} executes the \mymarg[type=tt]{code} set
%    by the \mykey{before*} key \emph{\enquote{before}} the
%    \myenv*{keyans} environment is started. The \mymarg[type=tt]{code} is executed
%    \emph{\enquote{without}} knowing any definition of the \mymarg[type=tt]{arg two} of the list.
% \iffalse
%% Function for |before|, |before*|, |after| and |first| keys in |enumext*| and |keyans*|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_before_args_exec_vii:
  {
    \tl_use:N \l_@@_before_starred_key_vii_tl
  }
\cs_new_protected:Nn \@@_before_args_exec_viii:
  {
    \tl_use:N \l_@@_before_starred_key_viii_tl
  }
%    \end{macrocode}
%    The functions \cs{@@_before_keys_exec_vii:} and \cs{@@_before_keys_exec_viii:} executes the \mymarg[type=tt]{code} set by the
%    \mykey{before} key \emph{\enquote{before}} in \myenv*{enumext*} and \myenv*{keyans*}
%    environments is started in \mymarg[type=tt]{arg two} of the list. The
%    \mymarg[type=tt]{code} is executed \emph{\enquote{knowing}}
%    all definition and values provides by \mymeta{keys}.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_before_keys_exec_vii:
  {
    \tl_use:N \l_@@_before_no_starred_key_vii_tl
  }
\cs_new_protected:Nn \@@_before_keys_exec_viii:
  {
    \tl_use:N \l_@@_before_no_starred_key_viii_tl
  }
%    \end{macrocode}
%
%    The function \cs{@@_after_stop_list:} executes the \mymarg[type=tt]{code} set by the
%    \mykey{after} key \emph{\enquote{after}} the \myenv*{keyans}
%    environment has finished.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_after_stop_list_vii:
  {
    \tl_use:N \l_@@_after_stop_list_vii_tl
  }
\cs_new_protected:Nn \@@_after_stop_list_viii:
  {
    \tl_use:N \l_@@_after_stop_list_viii_tl
  }
%    \end{macrocode}
%    The function \cs{@@_after_args_exec_v:} executes the \mymarg[type=tt]{code} set by the
%    \mykey{first} key after the end of \mymarg[type=tt]{arg two} of the list
%    defining the \myenv*{keyans} environment, just before the first
%    occurrence of \ics{item}.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_after_args_exec_vii:
  {
    \tl_use:N \l_@@_after_list_args_vii_tl
  }
\cs_new_protected:Nn \@@_after_args_exec_viii:
  {
    \tl_use:N \l_@@_after_list_args_viii_tl
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Setting keys for \env{multicols} and \env{minipage}}\label{key:mini-multi}
%
% \begin{macro}[int]{mini-env, mini-sep, columns-sep, columns}
%    The default value of the \mykey{columns-sep} key is handled by
%    the state of the boolean variable \myvarenv{l__@@_columns_sep_X_bool}
%    which is handled in the internal definition of the \myenv*{enumext}
%    and \myenv*{keyans} environments.
%
%    Define and set \mykey{mini-env}, \mykey{mini-sep}, \mykey{columns-sep}
%    and \mykey{columns} keys for \myenv*{enumext} and \myenv*{keyans} environments.
% \iffalse
%% Add |mini-env|, |mini-sep|, |columns-sep| and |columns| keys.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        mini-env    .dim_set:c  = { l_@@_minipage_right_#2_dim },
        mini-env    .value_required:n = true,
        mini-sep    .dim_set:c  = { l_@@_minipage_hsep_#2_dim },
        mini-sep    .initial:n  = 0.3333em,
        mini-sep    .value_required:n = true,
        columns-sep .dim_set:c  = { l_@@_columns_sep_#2_dim },
        columns-sep .value_required:n = true,
        columns     .int_set:c  = { l_@@_columns_#2_int },
        columns     .initial:n  = 1,
        columns     .value_required:n = true,
      }
  }
\clist_map_inline:Nn \c_@@_all_envs_clist { \@@_tmp:nn #1 }
%    \end{macrocode}
%
% For \myenv*{enumext*} and \myenv*{keyans*} environments the situation
% is a bit different, the default value for \mykey{columns} key are
% \mydim{2} and the command \ics*{miniright} is not available, so we will add
% the keys \mykey{miniright} and \mykey{miniright*} to implement support for
% \myenv{minipage}.
% \iffalse
%% Set |columns=2|, add |miniright| and |miniright*| keys for starred environments.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        columns    .initial:n = 2,
        miniright  .tl_gset:c = { g_@@_miniright_code_#2_tl },
        miniright  .value_required:n = true,
        miniright* .code:n    = {
                                  \bool_gset_true:c { g_@@_minipage_center_#2_bool }
                                  \keys_set:nn { enumext / #1 } { miniright = {##1} }
                                },
        miniright* .value_required:n = true,
      }
  }
\clist_map_inline:nn { {enumext*}{vii}, {keyans*}{viii} } { \@@_tmp:nn #1 }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Adjustment of vertical spaces for \env{multicols}} \label{vspace:multi}
%
% When nesting a \emph{\enquote{list environment}} inside the \myenv{multicols} environment,
% the values of the \emph{\enquote{vertical spaces}} are lost, basically the
% \myenv{multicols} environment takes control over them. Graphically it can
% be seen like in the figure \ref{fig:six}.
%
% \begin{figure}[!htbp]
%   \centering
%   \begin{tikzpicture}[line cap=round,line join=round,x=0.8cm,y=0.8cm,every node/.style={font=\footnotesize}]
%     \draw[color=white] (7.0,6.10) rectangle (17.5,6.50) node[pos=.5,text=black] { \textcolor{blue}{\texttt{\textbackslash{}multicolsep [±\textbackslash{}topskip]}} };% space above
%     \draw[color=white] (7.0,4.85) rectangle (17.5,5.25) node[pos=.5,text=black] { \textcolor{blue}{\texttt{\textbackslash{}multicolsep [±\textbackslash{}prevdepth?]}} };% space below
%     \draw[color=white] (2.0,6.10) rectangle (5,6.50) node[pos=.5,text=optcolor,font=\footnotesize\ttfamily] { topsep };% topsep above
%     \draw[color=white] (2.0,4.85) rectangle (5,5.25) node[pos=.5,text=optcolor,font=\footnotesize\ttfamily] { topsep };% topsep below
%     \draw[<->,color=gray] (2.0,7.0) --node[above,text=optcolor]{\vphantom{p}\texttt{labelwidth}} (5.0,7.0);
%     \draw[<->,color=gray] (5.0,7.0) --node[above,text=optcolor]{\texttt{labelsep}} (7.0,7.0);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (2.0,6.5) rectangle (5.0,6.85);% labelwidth
%     \draw[->,color=lightgray,shorten >=3pt] (4.5,6.3) -- (7.0,6.3); % glue space = topsep (above)
%     \draw[->,color=lightgray,shorten >=3pt] (4.5,5.05) -- (7.0,5.05); % glue space = topsep (above)
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (5.0,6.5) rectangle (7.0,6.85);% labelsep
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,6.5) rectangle (17.5,6.85);% item width
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,5.25) rectangle (11.5,6.10) node[pos=.5,text=black]
%        {\begin{tabular}{c}
%          \texttt{column one} \\
%          \textcolor{blue}{\emph{nested list or items}}
%        \end{tabular}};
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (13.5,5.25) rectangle (17.5,6.10) node[pos=.5,text=black]
%        {\begin{tabular}{c}
%          \texttt{column two} \\
%          \textcolor{blue}{\emph{nested list or items}}
%        \end{tabular}};
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (2.0,4.5) rectangle (5.0,4.85);% labelwidth
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (5.0,4.5) rectangle (7.0,4.85);% labelsep
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,4.5) rectangle (17.5,4.85);% item width
%   \end{tikzpicture}
%   \caption{Representation of the vertical space in \myenv{multicols} for a nested level.}
%   \label{fig:six}
% \end{figure}
%
% To keep the desired spaces \emph{above} and \emph{below} in the \emph{\enquote{list environment}}
% (|\topsep + [\partopsep]|) it is necessary to \emph{\enquote{adjust}} the spaces added
% by the \myenv{multicols} environment.
% The most appropriate option in this case is to use a \emph{\enquote{context sensitive}}
% vertical space with |\addvspace|.
%
% \smallskip
%
% \begin{important}*
% I should make it clear that the implementation here is a \emph{\enquote{bit
% questionable}}. At first glance doing |\multicolsep=\topsep| seemed right, but the results
% were not always as expected. An almost \emph{imperceptible} detail is that in some cases the
% |\itemsep| values of are \emph{\enquote{stretched}}, possibly due to
% the use of |\raggedcolumns| and this affects the lower space when
% closing the environment, which is \emph{\enquote{smaller}} than
% expected. My attempts to find the correct values using |\showoutput| and
% |\showboxdepth| absolutely failed.
% \end{important}
%
% \subsubsection{Adjustment of vertical spaces for \env{multicols} in \env{enumext}}
%
%
% \begin{macro}{\@@_multi_set_vskip:}
%    The function \cs{@@_multi_set_vskip:} will take care of determining the
%    \emph{\enquote{adjusted spaces}} that we will apply \emph{\enquote{above}} and
%    \emph{\enquote{below}} the \myenv{multicols} environment in
%    \myenv*{enumext}.
%
%    \smallskip
%
%    We will set the default values taking into account that \hologo{TeX} is
%    in \mymeta{horizontal mode}, then we will make the settings for the
%    \mymeta{vertical mode} in which |\partopsep| comes into play.
%
%    \smallskip
%
%    Set the values of \myvarenv{l__@@_multicols_above_X_skip} and \myvarenv{l__@@_multicols_below_X_skip}
%    equal to the value of |\topsep| in the \emph{current level}.
% \iffalse
%% Adjustment of vertical spacing for |multicols| in |enumext|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_multi_set_vskip:
  {
    \skip_set:cn { l_@@_multicols_above_ \@@_level: _skip }
      {
         \skip_use:c { l_@@_topsep_ \@@_level: _skip }
      }
    \skip_set:cn { l_@@_multicols_below_ \@@_level: _skip }
      {
         \skip_use:c { l_@@_topsep_ \@@_level: _skip }
      }
    \@@_add_pre_parsep:
   }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_add_pre_parsep:}
%    The function \cs{@@_add_pre_parsep:} \emph{\enquote{adjusted}} the value
%    of \myvarenv{l__@@_multicols_above_X_skip} detecting the value of
%    \ics{parsep} from the previous level. This is necessary since
%    \ics{parsep} from the previous level affects the \emph{vertical spaces}.
% \iffalse
%% Detect |\parsep| from previous level and adjust |\l_@@_multicols_above_X_skip| for |multicols| in |enumext|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_add_pre_parsep:
  {
    \int_case:nn { \l_@@_level_int }
      {
        { 2 }{
               \skip_if_eq:nnF { \l_@@_parsep_i_skip } { \c_zero_skip }
                 {
                   \skip_add:Nn \l_@@_multicols_above_ii_skip { \l_@@_parsep_i_skip }
                 }
             }
        { 3 }{
               \skip_if_eq:nnF { \l_@@_parsep_ii_skip } { \c_zero_skip }
                 {
                   \skip_add:Nn \l_@@_multicols_above_iii_skip { \l_@@_parsep_ii_skip }
                 }
             }
        { 4 }{
               \skip_if_eq:nnF { \l_@@_parsep_iii_skip } { \c_zero_skip }
                 {
                   \skip_add:Nn \l_@@_multicols_above_iv_skip { \l_@@_parsep_iii_skip }
                 }
             }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_multi_addvspace:}
%   The function \cs{@@_multi_addvspace:} will apply the spaces set using
%   |\addvspace| \emph{\enquote{above}} the \myenv{multicols} environment
%   in \myenv*{enumext}, taking into account whether  \hologo{TeX} is in
%   \mymeta{horizontal mode} or \mymeta{vertical mode}.
% \iffalse
%% Add vertical spacing for |multicols| in |enumext|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_multi_addvspace:
  {
    \@@_multi_set_vskip:
    \mode_if_vertical:T
      {
        \skip_add:cn { l_@@_multicols_above_ \@@_level: _skip }
          {
            \skip_use:c { l_@@_partopsep_ \@@_level: _skip }
          }
        \skip_add:cn { l_@@_multicols_below_ \@@_level: _skip }
          {
            \skip_use:c { l_@@_partopsep_ \@@_level: _skip }
          }
      }
    \par\nopagebreak
    \addvspace{ \skip_use:c { l_@@_multicols_above_ \@@_level: _skip } }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Adjustment of vertical spaces for \env{multicols} in \env{keyans}}
%
% \begin{macro}{\@@_keyans_multi_set_vskip:, \@@_keyans_multi_addvspace:}
%    The function \cs{@@_keyans_multi_set_vskip:} will take care of determining the
%    \emph{\enquote{adjusted spaces}} that we will apply \emph{\enquote{above}} and
%    \emph{\enquote{below}} the \myenv{multicols} environment in
%    \myenv*{keyans}. The implementation of this function is the same
%    as the one used in \myenv*{enumext}.
% \iffalse
%% Adjustment of vertical spacing for |multicols| in |keyans|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_multi_set_vskip:
  {
    \skip_set:Nn \l_@@_multicols_above_v_skip
      {
        \l_@@_topsep_v_skip
      }
    \skip_set:Nn \l_@@_multicols_below_v_skip
      {
         \l_@@_topsep_v_skip
      }
  }
\cs_new_protected:Nn \@@_keyans_multi_addvspace:
  {
    \@@_keyans_multi_set_vskip:
    \mode_if_vertical:T
      {
        \skip_add:Nn \l_@@_multicols_above_v_skip
          {
            \skip_use:N \l_@@_partopsep_v_skip
          }
        \skip_add:Nn \l_@@_multicols_below_v_skip
          {
            \skip_use:N \l_@@_partopsep_v_skip
          }
      }
    \par\nopagebreak
    \addvspace{ \l_@@_multicols_above_v_skip }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Adjustment of vertical spaces for \env{minipage}}\label{vspace:minipage}
%
% When nesting a \emph{\enquote{list environment}} within the \myenv{minipage} environment,
% the values of the \emph{\enquote{vertical spaces}} are lost. Graphically it can
% be seen like in the figure \ref{fig:seven}.
%
% \begin{figure}[!htbp]
% \centering
% \begin{tikzpicture}[line cap=round,line join=round,x=0.8cm,y=0.8cm,every node/.style={font=\footnotesize}]
%  \draw[color=white] (7.0,6.10) rectangle (12.5,6.5) node[pos=.5,text=black]%
%   { \textcolor{blue}{\texttt{space above left}} };% space above left
% \draw[color=white] (13.5,6.10) rectangle (17.5,6.5) node[pos=.5,text=black]%
%   { \textcolor{blue}{\texttt{space above right}} };% space above right
% \draw[color=white] (7.0,4.85) rectangle (17.5,5.25) node[pos=.5,text=black]%
%   { \textcolor{blue}{\texttt{space below after second minipage}} };% space below
% \draw[color=white] (2.0,6.10) rectangle (5,6.50) node[pos=.5,text=optcolor,font=\footnotesize\ttfamily] { topsep };% topsep above
% \draw[color=white] (2.0,4.85) rectangle (5,5.25) node[pos=.5,text=optcolor,font=\footnotesize\ttfamily] { topsep };% topsep below
% \draw[->,color=lightgray,shorten >=3pt] (4.5,6.3) -- (7.0,6.3); % glue space = topsep (above)
% \draw[->,color=lightgray,shorten >=3pt] (4.5,5.05) -- (7.0,5.05); % glue space = topsep (above)
% \draw[<->,color=gray] (2.0,7.0) --node[above,text=optcolor]{\vphantom{p}\texttt{labelwidth}} (5.0,7.0);
% \draw[<->,color=gray] (5.0,7.0) --node[above,text=optcolor]{\texttt{labelsep}} (7.0,7.0);
% \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (2.0,6.5) rectangle (5.0,6.85);% labelwidth
% \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (5.0,6.5) rectangle (7.0,6.85);% labelsep
% \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,6.5) rectangle (17.5,6.85);% item width
% \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,5.25) rectangle (12.5,6.10) node[pos=.5,text=black]%
%   {\begin{tabular}{c}
%      \texttt{minipage left [t]} \\
%      \textcolor{blue}{\emph{nested list}}
%    \end{tabular}};
% \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (13.5,5.25) rectangle (17.5,6.10) node[pos=.5,text=black]%
%  {\begin{tabular}{c}
%      \texttt{minipage right [t]} \\
%      \textcolor{blue}{\emph{drawing or tabular}}
%    \end{tabular}};
% \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (2.0,4.5) rectangle (5.0,4.85);% labelwidth
% \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (5.0,4.5) rectangle (7.0,4.85);% labelsep
% \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,4.5) rectangle (17.5,4.85);% item width
% \end{tikzpicture}
% \caption{Representation of the \myenv{minipage} spacing adjustment for a nested level.}
% \label{fig:seven}
% \end{figure}
%
% Since we want to keep the \emph{\enquote{left}} and \emph{\enquote{right}}
% environments \emph{\enquote{aligned on top}}, preserving the \ics{baselineskip}
% and keep the desired \emph{\enquote{spaces}} (|\topsep + [\partopsep]|) it is necessary
% to \emph{\enquote{adjust}} the \emph{\enquote{vertical spaces}}
% for \myenv{minipage} environments.
%
% \smallskip
%
% Here there are several complications that we must circumvent, the
% \myenv{minipage} environment eliminates the \enquote{top} spaces, the \myenv{multicols}
% environment can be nested in the \myenv{minipage} environment, the \enquote{top} and
% \enquote{bottom} spaces are affected when |topsep=|\mydim{0pt} and to this is added the
% |\partopsep| parameter that comes into action according to whether \hologo{TeX}
% is in \mymeta{horizontal mode} or \mymeta{vertical mode}. Depending on these cases, small
% adjustments must be made using |\vspace| and |\addvspace| to
% obtain the \emph{\enquote{desired vertical spacing}}.
%
% \smallskip
%
% \begin{important}*
% Again I must make clear that the implementation here is a \emph{\enquote{bit
% questionable}}, but hunting the spaces (|glue|) produced by the \myenv{minipage}
% environment is quite complicated, even more if \myenv{multicols} it is nested.
% The setting of the values was more \emph{\enquote{trial and error}}
% (aprox to |\strutbox|), using the help of the \mypkg{lua-visual-debug}\cite{luavisual}
% package, again my attempts to find the correct values using |\showoutput| and
% |\showboxdepth| absolutely failed.
% \end{important}
%
% \begin{macro}[int]{@@_mini_env*}
%
%   Creates a \myvarenv*{__@@_mini_env*} environment (\emph{custom version} of
%   \myenv{minipage}) setting the |\if@minipage| switch to
%   \emph{\enquote{false}} to allow spaces at the \emph{\enquote{above}} of
%   the environment, plus we will add |\vspace{|\mydim{0pt}|}| to maintain alignment
%   on \emph{\enquote{top}}. This environment will be used internally by the
%   \mykey{mini-env} key, it is not documented in the user interface and is for
%   internal use only.
%
% \iffalse
%% Function for define custom (internal) minipage environment.
% \fi
%    \begin{macrocode}
\DeclareDocumentEnvironment{@@_mini_env*}{ m }
  {
     \@@_minipage:w [ t ] { #1 }
       \legacy_if_gset_false:n { @minipage }
       \vspace { 0pt }
  }
  { \@@_endminipage: }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Adjustment of vertical spaces for \env{minipage} in \env{enumext}}
%
% \begin{macro}{\@@_mini_set_vskip:}
%    The function \cs{@@_mini_set_vskip:} will take care of determining the
%    \emph{\enquote{adjust}} spaces that we will apply \emph{\enquote{above}} and
%    \emph{\enquote{below}} the \myvarenv*{__@@_mini_env*} environment in
%    \myenv*{enumext}.
%
%    \smallskip
%
%    We will set the default values taking into account that \hologo{TeX} is
%    in \mymeta{horizontal mode}, then we will make the settings for the
%    \mymeta{vertical mode} in which |\partopsep| comes into play.
%
%    \smallskip
%
%    First determine if the \myenv{multicols} environment is active by
%    comparing the value of the \myvarenv{l__@@_columns_X_int} variable handled
%    by the \mykey{columns} key, according to this comparison we set the
%    adjusted values for \cs{l_@@_minipage_left_skip},
%    \cs{l_@@_minipage_right_skip} and \cs{l_@@_minipage_after_skip}.
%
% \iffalse
%% Adjustment of vertical spacing for |minipage| in |enumext|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_mini_set_vskip:
  {
    \int_compare:nNnTF
      { \int_use:c { l_@@_columns_ \@@_level: _int } } > { 1 }
      {
%    \end{macrocode}
%    If \myenv{multicols} environment is nested in \myvarenv*{__@@_mini_env*}
%    environment, we will apply a correction factor to the \emph{vertical spaces}
%    taking into account the value of |\topsep| of the current level
%    and the value of |\parsep| of the previous level, if these are zero we
%    will use |\strutbox| as the basis for the calculations.
%    \begin{macrocode}
        \skip_if_eq:nnTF
          { \skip_use:c { l_@@_topsep_ \@@_level: _skip } } { \c_zero_skip }
          {
            \skip_set:Nn \l_@@_minipage_left_skip
              {
                -0.150\box_dp:N \strutbox
              }
            \skip_set:Nn \l_@@_minipage_right_skip
              {
                0.695\box_dp:N \strutbox
              }
            \skip_set:Nn \l_@@_minipage_after_skip
              {
                \box_dp:N \strutbox
              }
            \@@_zero_parsep:
          }
          {
            \skip_set:Nn \l_@@_minipage_left_skip
              {
                \skip_use:c { l_@@_topsep_ \@@_level: _skip }
              }
            \skip_set:Nn \l_@@_minipage_right_skip
              {
                0.695\box_dp:N \strutbox
              }
            \skip_set:Nn \l_@@_minipage_after_skip
              {
                1.85\box_dp:N \strutbox
                + \skip_use:c { l_@@_topsep_ \@@_level: _skip }
              }
          }
      }
      {
%    \end{macrocode}
%    If only \myenv*{enumext} environment is nested in \myvarenv*{__@@_mini_env*}
%    environment, we will apply a correction factor to the \emph{vertical spaces}
%    taking into account the value of |\topsep|, if this is zero we will use
%    |\strutbox| as the basis for the calculations.
%    \begin{macrocode}
        \skip_if_eq:nnTF
          { \skip_use:c { l_@@_topsep_ \@@_level: _skip } } { \c_zero_skip }
          {
            \skip_set:Nn \l_@@_minipage_left_skip
              {
                0.5\box_dp:N \strutbox
                - \skip_use:c { l_@@_partopsep_ \@@_level: _skip }
              }
            \skip_set:Nn \l_@@_minipage_right_skip
              {
                \skip_use:c { l_@@_partopsep_ \@@_level: _skip }
              }
            \skip_set:Nn \l_@@_minipage_after_skip
              {
                1.6\box_dp:N \strutbox
              }
          }
          {
            \skip_set:Nn \l_@@_minipage_left_skip
              {
                0.5875\box_dp:N \strutbox
                - \skip_use:c { l_@@_partopsep_ \@@_level: _skip }
              }
            \skip_set:Nn \l_@@_minipage_right_skip
              {
                + \skip_use:c { l_@@_topsep_ \@@_level: _skip }
                + \skip_use:c { l_@@_partopsep_ \@@_level: _skip }
              }
            \skip_set:Nn \l_@@_minipage_after_skip
              {
                0.325\box_dp:N \strutbox
                + \skip_use:c { l_@@_topsep_ \@@_level: _skip }
              }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_zero_parsep:}
%    The function \cs{@@_zero_parsep:} \emph{\enquote{adjusted}} the value
%    of \cs{l_@@_minipage_after_skip} detecting the value of
%    \ics{parsep} from the previous level. This is necessary since
%    \ics{parsep} from the previous level affects the \emph{vertical spaces}
%    and this is noticeable when using the \mykey{nosep} or \mykey{noitemsep} keys.
% \iffalse
%% Detect |\parsep| from previous level and adjust |\l_@@_minipage_after_skip| for |mini-env| in |enumext|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_zero_parsep:
  {
    \int_case:nn { \l_@@_level_int }
      {
        { 2 }{
               \skip_if_eq:nnF { \l_@@_parsep_i_skip } { \c_zero_skip }
                 {
                   \skip_add:Nn \l_@@_minipage_after_skip { 2.15\box_dp:N \strutbox }
                 }
             }
        { 3 }{
               \skip_if_eq:nnF { \l_@@_parsep_ii_skip } { \c_zero_skip }
                 {
                   \skip_add:Nn \l_@@_minipage_after_skip { 2.15\box_dp:N \strutbox }
                 }
             }
        { 4 }{
               \skip_if_eq:nnF { \l_@@_parsep_iii_skip } { \c_zero_skip }
                 {
                   \skip_add:Nn \l_@@_minipage_after_skip { 2.15\box_dp:N \strutbox }
                 }
             }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_mini_addvspace:}
%   The function \cs{@@_mini_addvspace:} will apply the spaces set using
%   |\addvspace| \emph{\enquote{above}} the \myvarenv*{__@@_mini_env*}
%   environment in \myenv*{enumext}, taking into account whether  \hologo{TeX} is in
%   \mymeta{horizontal mode} or \mymeta{vertical mode}. For the latter we
%   will make some adjustments since the |\partopsep| parameter comes into
%   play and this affects the \emph{vertical spacing}.
%
% \iffalse
%% Apply \addvspace in horizontal and vertical mode for enumext environment.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_mini_addvspace:
  {
    \@@_mini_set_vskip:
    \mode_if_vertical:T
      {
        \skip_add:Nn \l_@@_minipage_left_skip
          {
            \skip_use:c { l_@@_partopsep_ \@@_level: _skip }
          }
        \skip_add:Nn \l_@@_minipage_after_skip
          {
            \skip_use:c { l_@@_partopsep_ \@@_level: _skip }
          }
      }
    \par\nopagebreak
    \addvspace { \l_@@_minipage_left_skip }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Adjustment of vertical spaces for \env{minipage} in \env{keyans}}
%
% \begin{macro}{\@@_keyans_mini_set_vskip:}
%    The function \cs{@@_keyans_mini_set_vskip:} will take care of determining the
%    \enquote{adjusted} spaces that we will apply \emph{\enquote{above}} and
%    \emph{\enquote{below}} the \myvarenv*{__@@_mini_env*} environment in
%    \myenv*{keyans}. The implementation of this function is the same
%    as the one used in \myenv*{enumext}.
% \iffalse
%% Adjustment of vertical spacing for |minipage| in |keyans|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_mini_set_vskip:
  {
    \skip_zero_new:N \l_@@_minipage_after_skip
    \skip_zero_new:N \l_@@_minipage_left_skip
    \skip_zero_new:N \l_@@_minipage_right_skip
    \int_compare:nNnTF { \l_@@_columns_v_int } > { 1 }
      {
        \skip_if_eq:nnTF { \l_@@_topsep_v_skip } { \c_zero_skip }
          {
            \skip_set:Nn \l_@@_minipage_left_skip { -0.25\box_dp:N \strutbox }
            \skip_set:Nn \l_@@_minipage_right_skip { 0.705\box_dp:N \strutbox }
            \skip_set:Nn \l_@@_minipage_after_skip { \box_dp:N \strutbox }
            \skip_if_eq:nnF { \l_@@_parsep_i_skip } { \c_zero_skip }
              {
                \skip_add:Nn \l_@@_minipage_after_skip { 2.15\box_dp:N \strutbox }
              }
          }
          {
            \skip_set:Nn \l_@@_minipage_left_skip
              {
                \skip_use:N \l_@@_topsep_v_skip
              }
            \skip_set:Nn \l_@@_minipage_right_skip
              {
                0.705\box_dp:N \strutbox
              }
            \skip_set:Nn \l_@@_minipage_after_skip
              {
                1.85\box_dp:N \strutbox + \l_@@_topsep_v_skip
              }
          }
      }
      {
        \skip_if_eq:nnTF { \l_@@_topsep_v_skip } { \c_zero_skip }
          {
            \skip_set:Nn \l_@@_minipage_left_skip
              {
                0.5\box_dp:N \strutbox
                + \l_@@_partopsep_v_skip
              }
            \skip_set:Nn \l_@@_minipage_right_skip
              {
                \l_@@_partopsep_v_skip
              }
            \skip_set:Nn \l_@@_minipage_after_skip { 1.6\box_dp:N \strutbox }
          }
          {
            \skip_set:Nn \l_@@_minipage_left_skip
              {
                0.5875\box_dp:N \strutbox - \l_@@_partopsep_v_skip
              }
            \skip_set:Nn \l_@@_minipage_right_skip
              {
                \l_@@_topsep_v_skip + \l_@@_partopsep_v_skip
              }
            \skip_set:Nn \l_@@_minipage_after_skip
              {
                0.325\box_dp:N \strutbox + \l_@@_topsep_v_skip
              }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_keyans_mini_addvspace:}
%    The function \cs{@@_keyans_mini_addvspace:} will apply the spaces set using
%    |\addvspace| \emph{\enquote{above}} the \myvarenv*{__@@_mini_env*}
%    environment in \myenv*{keyans}, taking into account whether  \hologo{TeX} is in
%    \mymeta{horizontal mode} or \mymeta{vertical mode}. For the latter we
%    will make some adjustments since the |\partopsep| parameter comes into
%    play and this affects the \emph{vertical spacing}. The implementation
%    of this function is the same as the one used in \myenv*{enumext}.
%
% \iffalse
%% Apply \addvspace in horizontal and vertical mode for |keyans| environment.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_mini_addvspace:
  {
    \@@_keyans_mini_set_vskip:
    \mode_if_vertical:T
      {
        \skip_add:Nn \l_@@_minipage_left_skip
          {
            \l_@@_partopsep_v_skip
          }
        \skip_add:Nn \l_@@_minipage_after_skip
          {
            \l_@@_partopsep_v_skip
          }
      }
    \par\nopagebreak
    \addvspace { \l_@@_minipage_left_skip }
  }
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Adjustment of vertical spaces for \env{minipage} in \env{enumext*} and \env{keyans*}}
%
% \begin{macro}{\@@_mini_set_vskip_vii:,\@@_mini_set_vskip_viii:}
%    The functions \cs{@@_mini_set_vskip_vii:} and \cs{@@_mini_set_vskip_viii:} will take care of determining the
%    \enquote{adjusted} spaces that we will apply \emph{\enquote{above}} and
%    \emph{\enquote{below}} the \myvarenv*{__@@_mini_env*} environment in
%    \myenv*{enumext*} and \myenv*{keyans*}.
% \iffalse
%% Adjustment of vertical spacing for |minipage| in |enumext*| and |keyans*|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_mini_set_vskip_vii:
  {
    \skip_zero_new:N \l_@@_minipage_left_skip
    \skip_gzero_new:N \g_@@_minipage_right_skip
    \skip_gzero_new:N \g_@@_minipage_after_skip
    \skip_if_eq:nnTF { \l_@@_topsep_vii_skip } { \c_zero_skip }
      {
        \skip_set:Nn \l_@@_minipage_left_skip { 0.5\box_dp:N \strutbox }
        \skip_gset:Nn \g_@@_minipage_right_skip { 0.325\box_dp:N \strutbox }
      }
      {
        \skip_set:Nn \l_@@_minipage_left_skip { 0.5875\box_dp:N \strutbox }
        \skip_gset:Nn \g_@@_minipage_right_skip
          {
            \l_@@_topsep_vii_skip
          }
        \skip_gset:Nn \g_@@_minipage_after_skip
          {
            0.325\box_dp:N \strutbox + \l_@@_topsep_vii_skip
          }
      }
  }
\cs_new_protected:Nn \@@_mini_set_vskip_viii:
  {
    \skip_zero_new:N \l_@@_minipage_after_skip
    \skip_zero_new:N \l_@@_minipage_left_skip
    \skip_zero_new:N \l_@@_minipage_right_skip
    \skip_if_eq:nnTF { \l_@@_topsep_viii_skip } { \c_zero_skip }
      {
        \skip_set:Nn \l_@@_minipage_left_skip
          {
            0.5\box_dp:N \strutbox
          }
        \skip_set:Nn \l_@@_minipage_right_skip
          {
            \l_@@_partopsep_viii_skip
          }
        \skip_set:Nn \l_@@_minipage_after_skip
          {
            1.6\box_dp:N \strutbox
          }
      }
      {
        \skip_set:Nn \l_@@_minipage_left_skip
          {
            0.5875\box_dp:N \strutbox
          }
        \skip_set:Nn \l_@@_minipage_right_skip
          {
            \l_@@_topsep_viii_skip
          }
        \skip_set:Nn \l_@@_minipage_after_skip
          {
            0.325\box_dp:N \strutbox + \l_@@_topsep_viii_skip
          }
       }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_mini_addvspace_vii:,\@@_mini_addvspace_viii:}
%   The functions \cs{@@_mini_addvspace_vii:} and
%   \cs{@@_mini_addvspace_viii:} will apply the vertical space
%   \emph{\enquote{only above}} the \myvarenv*{__@@_mini_env*} environment on
%   the \emph{left side} when the \mykey{miniright} key is active in the
%   \myenv*{enumext*} and \myenv*{keyans*} environments.
%
%   Here we will NOT take into account whether \hologo{TeX} is in
%   \mymeta{horizontal mode} or \mymeta{vertical mode}, since |\partopsep|
%   is equal to \mydim{0pt} in both environments.
% \iffalse
%% Apply \addvspace above minipage for |enumext*| and |keyans*| environments.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_mini_addvspace_vii:
  {
    \@@_mini_set_vskip_vii:
    \par\nopagebreak
    \addvspace { \l_@@_minipage_left_skip }
  }
\cs_new_protected:Nn \@@_mini_addvspace_viii:
  {
    \@@_mini_set_vskip_viii:
    \par\nopagebreak
    \addvspace { \l_@@_minipage_left_skip }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{The command \cs{miniright}}\label{cmd:miniright}
%
% The command \ics*{miniright} will close the
% \myvarenv*{__@@_mini_env*} environment on the \emph{\enquote{left
% side}}, open the \myvarenv*{__@@_mini_env*} environment on the
% \emph{\enquote{right side}} adding the \emph{adjusted vertical space}.
% By default we will add |\centering| when starting the
% \emph{\enquote{right side}} environment.
% The \emph{starred version} ‘|*|’ inhibits the use of |\centering|
% command i.e. the usual \hologo{LaTeX} justification is maintained in
% the \myvarenv*{__@@_mini_env*} on the \emph{\enquote{right side}}.
%
% \begin{macro}{\miniright}
%    First we will perform some checks to prevent the command from being
%    executed outside the \myenv*{enumext} environment or from being executed
%    inside the \myenv*{keyanspic} environment, then we call the internal functions
%    for the \myenv*{enumext} and \myenv*{keyans} environments.
%
% \iffalse
%% Definition of |\miniright| command.
% \fi
%    \begin{macrocode}
\NewDocumentCommand \miniright { s }
  {
    \int_compare:nNnT { \l_@@_keyans_pic_level_int } = { 1 }
      {
        \msg_error:nnn { enumext } { wrong-miniright-place }
      }
    \int_compare:nNnT { \l_@@_level_int } = { 0 }
      {
        \msg_error:nnn { enumext } { wrong-miniright-place }
      }
    \int_compare:nNnTF { \l_@@_keyans_level_int } = { 1 }
      {
        \@@_keyans_mini_right_cmd:n {#1}
      }
      { \@@_mini_right_cmd:n {#1} }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_mini_right_cmd:n}
%    The function \cs{@@_mini_right_cmd:n} takes as argument the \emph{starred version} ‘|*|’
%    of the \ics*{miniright} command in the \myenv*{enumext} environment.
%    We check if the \mykey{mini-env} key is active via the variable
%    \myvarenv{l__@@_minipage_right_X_dim}, if so we close the
%    \myenv{multicols} environment with the \myvarenv*{__@@_mini_env*}
%    environment on the \emph{\enquote{left side}}, then we open the
%    \myvarenv*{__@@_mini_env*} environment on the \emph{\enquote{right
%    side}}, apply our adjusted \emph{\enquote{vertical spaces}}, followed by
%    adding the |\centering| command when the starred argument ‘|*|’ is not
%    present and set zero \myvarenv{g__@@_minipage_stat_int}, otherwise we return an error.
% \iffalse
%% Internal function for |\miniright| command in enumext.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_mini_right_cmd:n #1
  {
    \dim_compare:nNnTF
      { \dim_use:c { l_@@_minipage_right_ \@@_level: _dim } } > { \c_zero_dim }
      {
        \@@_multicols_stop:
        \end{@@_mini_env*}
        \hfill
        \begin{@@_mini_env*}
          { \dim_use:c { l_@@_minipage_right_ \@@_level: _dim } }
          \par\addvspace { \l_@@_minipage_right_skip }
          \bool_if:nF {#1}
            {
              \centering
            }
          \int_gzero:N \g_@@_minipage_stat_int
      }
      { \msg_error:nnn { enumext } { wrong-miniright-use } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_keyans_mini_right_cmd:n}
%    The function \cs{@@_keyans_mini_right_cmd:n} takes as argument the \emph{starred version} ‘|*|’
%    of the \ics*{miniright} command in the \myenv*{keyans}
%    environment. The implementation of this function is the same as that of
%    the \cs{@@_mini_right_cmd:n} function of the \myenv*{enumext}
%    environment.
% \iffalse
%% Internal function for |\miniright| command in keyans.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_keyans_mini_right_cmd:n #1
  {
    \dim_compare:nNnTF { \l_@@_minipage_right_v_dim } > { \c_zero_dim }
      {
        \@@_keyans_multicols_stop:
        \end{@@_mini_env*}
        \hfill
        \begin{@@_mini_env*}{ \l_@@_minipage_right_v_dim }
          \par\addvspace { \l_@@_minipage_right_skip }
          \bool_if:nF {#1}
            {
              \centering
            }
          \int_gzero:N \g_@@_minipage_stat_int
      }
      { \msg_error:nnn { enumext } { wrong-miniright-use } }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Setting \texttt{above} and \texttt{below} keys}
%
% While having controlled the \emph{vertical spaces} within
% the \myenv*{enumext} and \myenv*{keyans} environments when using the
% \mykey{columns} or \mykey{mini-env} keys, sometimes the
% \emph{\enquote{vertical spaces above}} or \emph{\enquote{vertical spaces below}} the environments are
% not as expected and it is necessary to be able to apply a
% \emph{\enquote{fine correction}} to these. As I have not been able to
% correct these  \emph{glitches}, the best option is to leave a couple of
% \mymeta{keys} dedicated to this purpose, in this case it is best to use
% |\vspace| or |\vspace*| when convenient.
%
% \begin{macro}[int]{above, above*, below, below*}
%     Define \mykey{above}, \mykey{above*}, \mykey{below} and \mykey{below*} keys for
%     \myenv*{enumext} and \myenv*{keyans} environments.
% \iffalse
%% Add |above| and |below| keys.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        above  .skip_set:c = { l_@@_vspace_above_#2_skip },
        above  .value_required:n = true,
        above* .code:n     = \bool_set_true:c { l_@@_vspace_a_star_#2_bool }
                             \keys_set:nn { enumext / #1 } { above = {##1} },
        above* .value_required:n = true,
        below  .skip_set:c = { l_@@_vspace_below_#2_skip },
        below  .value_required:n = true,
        below* .code:n     = \bool_set_true:c { l_@@_vspace_b_star_#2_bool }
                             \keys_set:nn { enumext / #1 } { below = {##1} },
        below* .value_required:n = true,
      }
  }
\clist_map_inline:Nn \c_@@_all_envs_clist { \@@_tmp:nn #1 }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Functions for \texttt{above} and \texttt{below} keys in \env{enumext}}
%
% \iffalse
%% Function for |above|, |above*|, |below| and |below*| keys in |enumext|.
% \fi
% \begin{macro}{\@@_vspace_above:,}
%    The function \cs{@@_vspace_above:} apply the \emph{vertical space above}
%    the \myenv*{enumext} environment set by the \mykey{above*} and \mykey{above} keys.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_vspace_above:
  {
    \skip_if_eq:nnF
      { \skip_use:c { l_@@_vspace_above_ \@@_level: _skip } } { \c_zero_skip }
      {
        \bool_if:cTF { l_@@_vspace_a_star_ \@@_level: _bool }
          {
            \vspace*{ \skip_use:c { l_@@_vspace_above_ \@@_level: _skip } }
          }
          {
            \vspace { \skip_use:c { l_@@_vspace_above_ \@@_level: _skip } }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_vspace_below:}
%    The function \cs{@@_vspace_below:} apply the \emph{vertical space below}
%    the \myenv*{enumext} environment set by the \mykey{below*} and \mykey{below} keys.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_vspace_below:
  {
    \skip_if_eq:nnF
      { \skip_use:c { l_@@_vspace_below_ \@@_level: _skip } } { \c_zero_skip }
      {
        \bool_if:cTF { l_@@_vspace_b_star_ \@@_level: _bool }
          {
            \vspace*{ \skip_use:c { l_@@_vspace_below_ \@@_level: _skip } }
          }
          {
            \vspace { \skip_use:c { l_@@_vspace_below_ \@@_level: _skip } }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Functions for \texttt{above} and \texttt{below} keys in \env{keyans}}
%
% \begin{macro}{\@@_vspace_above_v:,}
%    The function \cs{@@_vspace_above_v:} apply the \emph{vertical space above}
%    the \myenv*{keyans} environment set by the \mykey{above} and \mykey{above*} keys.
% \iffalse
%% Function for |above|, |above*|, |below| and |below*| keys in |keyans|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_vspace_above_v:
  {
    \skip_if_eq:nnF { \l_@@_vspace_above_v_skip } { \c_zero_skip }
      {
        \bool_if:NTF \l_@@_vspace_a_star_v_bool
          {
            \vspace*{ \l_@@_vspace_above_v_skip }
          }
          { \vspace { \l_@@_vspace_above_v_skip } }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_vspace_below_v:}
%    The function \cs{@@_vspace_below_v:} apply the \emph{vertical space below}
%    the \myenv*{keyans} environment set by the \mykey{below*} and \mykey{below} keys.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_vspace_below_v:
  {
    \skip_if_eq:nnF { \l_@@_vspace_below_v_skip } { \c_zero_skip }
      {
        \bool_if:NTF \l_@@_vspace_b_star_v_bool
          {
            \vspace*{ \l_@@_vspace_below_v_skip }
          }
          { \vspace { \l_@@_vspace_below_v_skip } }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Functions for \texttt{above} and \texttt{below} keys in \env{enumext*} \env{keyans*}}
%
% \begin{macro}{\@@_vspace_above_vii:,\@@_vspace_above_viii:}
%    The functions \cs{@@_vspace_above_vii:} and \cs{@@_vspace_above_viii:} apply the \emph{vertical space above}
%    the \myenv*{enumext*} and \myenv*{keyans*} environments set by the \mykey{above} and \mykey{above*} keys.
% \iffalse
%% Function for |above|, |above*|, |below| and |below*| keys in |enumext*| and |keyans*|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_vspace_above_vii:
  {
    \skip_if_eq:nnF { \l_@@_vspace_above_vii_skip } { \c_zero_skip }
      {
        \bool_if:NTF \l_@@_vspace_a_star_vii_bool
          {
            \vspace*{ \l_@@_vspace_above_vii_skip }
          }
          { \vspace { \l_@@_vspace_above_vii_skip } }
      }
  }
\cs_new_protected:Nn \@@_vspace_above_viii:
  {
    \skip_if_eq:nnF { \l_@@_vspace_above_viii_skip } { \c_zero_skip }
      {
        \bool_if:NTF \l_@@_vspace_a_star_viii_bool
          {
            \vspace*{ \l_@@_vspace_above_viii_skip }
          }
          { \vspace { \l_@@_vspace_above_viii_skip } }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_vspace_below_vii:, \@@_vspace_below_viii:}
%    The functions \cs{@@_vspace_below_vii:} and \cs{@@_vspace_below_viii:} apply the \emph{vertical space below}
%    the \myenv*{enumext*} and \myenv*{keyans*} environments set by the \mykey{below*} and \mykey{below} keys.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_vspace_below_vii:
  {
    \skip_if_eq:nnF { \l_@@_vspace_below_vii_skip } { \c_zero_skip }
      {
        \bool_if:NTF \l_@@_vspace_b_star_vii_bool
          {
            \vspace*{ \l_@@_vspace_below_vii_skip }
          }
          { \vspace { \l_@@_vspace_below_vii_skip } }
      }
  }
\cs_new_protected:Nn \@@_vspace_below_viii:
  {
    \skip_if_eq:nnF { \l_@@_vspace_below_viii_skip } { \c_zero_skip }
      {
        \bool_if:NTF \l_@@_vspace_b_star_viii_bool
          {
            \vspace*{ \l_@@_vspace_below_viii_skip }
          }
          { \vspace { \l_@@_vspace_below_viii_skip } }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Setting \texttt{save-ans} and \texttt{resume} keys}\label{key:resume}
%
% The key \mykey{save-ans} is directly associated with the key
% \mykey{resume}, this will activate the entire \emph{\enquote{storage
% system}} in the \mypkg*{enumext} package.
%
% \begin{macro}[int]{save-ans, series, resume, resume*, }
%     We define the keys \mykey{save-ans}, \mykey{series}, \mykey{resume} and \mykey{resume*} only for the
%     \emph{\enquote{first level}} of \myenv*{enumext} and \myenv*{enumext*}.
% \iffalse
%% Add |save-ans|, |resume*|,  |resume| and |series| keys only on first level.
% \fi
%    \begin{macrocode}
\keys_define:nn { enumext / level-1 }
  {
    save-ans .code:n = \@@_storing_set:n {#1},
    save-ans .value_required:n = true,
    series   .str_set:N = \l_@@_series_str,
    series   .value_required:n = true,
    resume   .code:n = \@@_resume_counter_series:n {#1},
    resume*  .code:n =\@@_resume_starred:,
    resume*  .value_forbidden:n = true,
  }
\keys_define:nn { enumext / enumext* }
  {
    save-ans .code:n = \@@_storing_set:n {#1},
    save-ans .value_required:n = true,
    series   .str_set:N = \l_@@_series_str,
    series   .value_required:n = true,
    resume   .code:n = \@@_resume_counter_series_vii:n {#1},
    resume*  .code:n =\@@_resume_starred_vii:,
    resume*  .value_forbidden:n = true,
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_storing_set:n}
%    The function \cs{@@_storing_set:n} executed by the
%    \mykey{save-ans} key sets the parameters for the operation of
%    \ics*{anskey}, \myenv*{keyans}, \myenv*{keyans*} and \myenv*{keyanspic}.
%    The variable \cs{l_@@_store_name_tl} will have the \emph{\enquote{store name}} with
%    which the \mymeta{sequence} and \mymeta{prop list} will be created, if it does not exist it will
%    create it globally.
%
%    The boolean var \cs{l_@@_store_active_bool} will be set to
%    true activating the entire internal \emph{storage mechanism}, then
%    the integer variable for the \mykey{resume} key will be created (if not exist),
%    finally the function \cs{@@_check_ans_int:n} will be called
%    to activate the internal mechanism for checking the answers if the
%    boolean variable \cs{l_@@_check_ans_bool} set by \mykey{check-ans}
%    key are active.
% \iffalse
%% Function to activate ALL "storing" (and |check-ans|, |resume|) used by |save-ans| key.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_storing_set:n #1
  {
    \tl_set:Ne \l_@@_store_name_tl {#1}
    \prop_if_exist:cF { g_@@_ \l_@@_store_name_tl _prop }
      {
        \prop_new:c { g_@@_ \l_@@_store_name_tl _prop }
      }
    \seq_if_exist:cF { g_@@_ \l_@@_store_name_tl _seq }
      {
        \seq_new:c { g_@@_ \l_@@_store_name_tl _seq }
      }
    \bool_set_true:N \l_@@_store_active_bool
    \bool_set_true:N \l_@@_store_ans_bool
    \int_if_exist:cF { g_@@_resume_#1_int }
      {
        \int_new:c { g_@@_resume_#1_int }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_resume_counter:, \@@_resume_counter_vii:}
%    The functions \cs{@@_resume_counter:} and \cs{@@_resume_counter_vii:}
%     used by \mykey{resume} key if not value is passed in
%    \myenv*{enumext} and \myenv*{enumext*}.
%    If \mykey{save-ans} key present then set the start value from
%    integer created by \cs{@@_storing_set:n}.
% \iffalse
%% Internal function used by |resume| key.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_resume_counter:
  {
    \bool_if:NT \l_@@_store_active_bool
      {
        \int_gset:Nn \g_@@_resume_int
          {
            \int_use:c { g_@@_resume_ \l_@@_store_name_tl _int }
          }
      }
    \int_gincr:N \g_@@_resume_int
    \int_set_eq:NN \l_@@_start_i_int \g_@@_resume_int
  }
\cs_new_protected:Nn \@@_resume_counter_vii:
  {
    \bool_if:NT \l_@@_store_active_bool
      {
        \int_gset:Nn \g_@@_resume_vii_int
          {
            \int_use:c { g_@@_resume_ \l_@@_store_name_tl _int }
          }
      }
    \int_gincr:N \g_@@_resume_vii_int
    \int_set_eq:NN \l_@@_start_vii_int \g_@@_resume_vii_int
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_resume_starred:, \@@_resume_starred_vii:,\@@_filter_series:n, \@@_filter_series_key:n, \@@_filter_series_pair:nn, \@@_parse_series_resume:n}
% \iffalse
%% Internal code for |series| key.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_resume_starred:
  {
    \tl_if_empty:NF \g_@@_series_standar_default_tl
      {
        \@@_resume_counter:
        \keys_set:nV { enumext / level-1 } \g_@@_series_standar_default_tl
      }
  }
\cs_new_protected:Npn \@@_resume_counter_series:n #1
  {
    \tl_if_empty:nTF {#1}
      {
        \@@_resume_counter:
      }
      {
        \tl_if_exist:cTF { g_@@_series_ \tl_to_str:n {#1} _tl }
          {
            \keys_set:nv { enumext / level-1 }
              { g_@@_series_ \tl_to_str:n {#1} _tl }
          }
        { \msg_error:nnn { enumext } { unknown-series } {#1} }
      }
  }
\cs_new_protected:Nn \@@_resume_starred_vii:
  {
    \tl_if_empty:NF \g_@@_series_starred_default_tl
      {
        \@@_resume_counter_vii:
        \keys_set:nV { enumext / enumext* } \g_@@_series_starred_default_tl
      }
  }
\cs_new_protected:Npn \@@_resume_counter_series_vii:n #1
  {
    \tl_if_empty:nTF {#1}
      {
        \@@_resume_counter_vii:
      }
      {
        \tl_if_exist:cTF { g_@@_series_ \tl_to_str:n {#1} _tl }
          {
            \keys_set:nv { enumext / enumext* }
              { g_@@_series_ \tl_to_str:n {#1} _tl }
          }
        { \msg_error:nnn { enumext } { unknown-series } {#1} }
      }
  }
\cs_new:Npn \@@_filter_series:n #1
  {
    \use:e
      {
        \keyval_parse:NNn
          \@@_filter_series_key:n
          \@@_filter_series_pair:nn {#1}
      }
  }
\cs_new:Npn \@@_filter_series_key:n #1
  {
    \str_case:nnF {#1}
      {
        { resume } {}
        { resume* } {}
      }
      { , { \exp_not:n {#1} } }
  }
\cs_new:Npn \@@_filter_series_pair:nn #1#2
  {
    \str_case:nnF {#1}
      {
        { series } {}
        { resume } {}
        { columns* } {}
        { save-key } {}
        { columns-sep* } {}
      }
      { , { \exp_not:n {#1} } = { \exp_not:n {#2} } }
  }
\cs_new_protected:Npn \@@_parse_series_resume:n #1
  {
    \str_if_empty:NTF \l_@@_series_str
      {
        \@@_resume_series_default:n {#1}
      }
      {
        \tl_gclear_new:c { g_@@_series_ \l_@@_series_str _tl }
        \tl_gset:ce { g_@@_series_ \l_@@_series_str _tl }
          { \@@_filter_series:n {#1} }
      }
  }
\cs_new_protected:Npn \@@_resume_series_default:n #1
  {
    \bool_lazy_all:nT
      {
        { \bool_if_p:N \g_@@_standar_bool }
        { \int_compare_p:nNn { \l_@@_level_int } = { 1 } }
        { \int_compare_p:nNn { \l_@@_level_h_int } = { 0 } }
      }
      {
        \typeout{[[ON-LEVEL-ONE-ENUMEXT]]}
        \tl_gclear:N \g_@@_series_standar_default_tl
        \tl_gset:Ne \g_@@_series_standar_default_tl { \@@_filter_series:n {#1} }
      }
    \bool_lazy_all:nT
      {
        { \bool_if_p:N \g_@@_starred_bool }
        { \int_compare_p:nNn { \l_@@_level_h_int } = { 1 } }
        { \int_compare_p:nNn { \l_@@_level_int } = { 0 } }
      }
      {
        \typeout{[[ON-LEVEL-ONE-ENUMEXT*]]}
        \tl_gclear:N \g_@@_series_starred_default_tl
        \tl_gset:Ne \g_@@_series_starred_default_tl { \@@_filter_series:n {#1} }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{The check answer mechanism}\label{int:check-answer}
%
% The mechanism for checking that all questions are answered follows this
% logic:
%
% \begin{quote}
%  If the line begins with |\item| or |\item*| and does NOT
%  \emph{open a nested environment}, each |\item| or |\item*| must contain a
%  \emph{single} execution of the |\anskey| command, i.e. the counter of the
%  executions of the |\anskey| command must be equal to the counter
%  associated with the sum of executions of |\item| and |\item*|.
%
%  If the line begins with |\item| or |\item*| and \emph{opens a nested
%  environment} each |\item| or |\item*| in the nested environment must
%  have a \emph{single} execution of the |\anskey| command and the counter
%  associated to the sum of |\item| and |\item*| executions must decrementing
%  by \emph{\enquote{one}} to maintain equality.
%
% \end{quote}
%
% In order for the mechanism for the check-answer to work (not counting
% \myenv*{keyans}, \myenv*{keyans*} and \myenv*{keyanspic}) we need:
%
% \begin{enumerate}[left=0pt,noitemsep, partopsep=0pt, topsep=5pt]
%   \item We must keep track of the total number of |\item| and |\item*| (enumerated) that appear within
%         the environment including the nested levels.
%   \item We must keep track of the total number of |\item| and |\item*| (enumerated) that appear per
%         level of nesting.
%   \item Keeping track of the number of times the environment nests.
% \end{enumerate}
%
%
% The integer variable associated to the sum of each |\item| and |\item*|
% in the environment \myvarenv{g__@@_count_item_number_int} must match the
% integer variable \myvarenv{g__@@_count_item_anskey_int} associated
% to the execution of the command |\anskey|. We analyze the cases:
%
% \begin{enumerate}[label=\alph*),left=0pt,noitemsep, partopsep=0pt, topsep=5pt]
%   \item If the list only has one level the number of |\item + \item*| = \ics*{anskey}
%
%   \item If the list has \emph{nested levels}, for each level of nesting we need to
%    decrementing by one (for the |\item| or |\item*| that opens the nest) so that the account
%    remains the same.
%
%^^A   \item If there is the option \mykey{no-store} we must add the items within this
%^^A    level plus one to maintain the equality.
% \end{enumerate}
%
% With \myenv*{keyans}, \myenv*{keyans*} and \myenv*{keyanspic} it is enough to increase
% in one the integer of \ics*{anskey}. The integers created must be global
% if they are not lost in the interior levels of nesting and to execute
% the test we will use a \emph{\enquote{hook}} function after closing the
% first level of the environment.
%
% \subsubsection{Setting \texttt{check-ans} key}\label{key:check-ans}
%
% \begin{macro}[int]{check-ans, no-store}
%    Now we define the keys \mykey{check-ans} and \mykey{no-store} for all
%    levels of \myenv*{enumext} and \myenv*{enumext*} environments.
% \iffalse
%% Add |check-ans| and |no-store| keys.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:n #1
  {
    \keys_define:nn { enumext / #1 }
      {
        check-ans .bool_set:N = \l_@@_check_ans_bool,
        check-ans .initial:n  = false,
        no-store  .code:n = {
                              \bool_set_false:N \l_@@_store_ans_bool
                              \bool_set_false:N \l_@@_check_ans_bool
                            },
        no-store  .value_forbidden:n = true,
      }
  }
\clist_map_inline:nn
  {
    level-1, level-2, level-3, level-4, enumext*
  }
  { \@@_tmp:n {#1} }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Set-up check answer mechanism}\label{int:set-check-answer}
%
% \begin{macro}{\@@_check_ans_set:,}
%   The function \cs{@@_check_ans_set:} will adjust the
%   value of the variable \myvarenv{g__@@_count_item_number_int} by
%   decrementing its value by one each time you open a nested level
%   \myenv*{enumext} environment.
% \iffalse
%% Decrementing \g_@@_count_item_number_int for nested level off |enumext|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_check_ans_set:
  {
    \int_case:nn { \l_@@_level_int }
      {
        { 1 }{
               \bool_lazy_all:nT
                 {
                   { \bool_if_p:N \g_@@_starred_bool }
                   { \int_compare_p:nNn { \l_@@_level_h_int } = { 1 } }
                 }
                 {
                   \int_gdecr:N \g_@@_count_item_number_int
                   \typeout{ENUMEXT ~ STANDAR ~ NEEEEEEEEEEEESTED}
                 }
             }
        { 2 }{
               \int_gdecr:N \g_@@_count_item_number_int
             }
        { 3 }{
               \int_gdecr:N \g_@@_count_item_number_int
             }
        { 4 }{
               \int_gdecr:N \g_@@_count_item_number_int
             }
      }
    \int_case:nn { \l_@@_level_h_int }
      {
        { 1 }{
               \bool_if:NT \g_@@_standar_bool
                 {
                   \int_gdecr:N \g_@@_count_item_number_int
                   \typeout{ENUMEXT ~ STARRED ~ NEEEEEEEEEEEESTED}
                 }
             }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_check_ans_exec:}
%    The function \cs{@@_check_ans_exec:} will count the number of
%    times the |\item| and |\item*| commands appears per level within the
%    \myenv*{enumext} environment. The boolean variable
%    \myvarenv{l__@@_store_ans_bool} controlled by the \mykey{no-store} key will
%    increment the integer variable of the level counter by |1| to preserve
%    the equality that we will use in the final comparison of the process.
% \iffalse
%% Function to count |\item| for internal checking answer mechanism in |enumext|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_check_ans_exec:
  {
    \bool_if:NT \l_@@_check_ans_bool
      {
        \@@_check_ans_set:
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_check_ans_show:}
%    The function \cs{@@_check_ans_show:} compares all executions of
%    |\item| and |\item*| with the executions of |\anskey|. After the
%    function is executed, we set the integer variables to zero.
% \iffalse
%% Function to compare |\item| = answer for internal checking answer mechanism in |enumext|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_check_ans_show:
  {
    \int_compare:nNnTF
      { \g_@@_count_item_number_int } = { \g_@@_count_item_anskey_int }
      {
        \msg_term:nnV { enumext } { items-same-answer } \g_@@_store_name_tl
      }
      {
        \msg_warning:nnV { enumext } { item-different-answer } \g_@@_store_name_tl
      }
    \int_gzero:N \g_@@_count_item_number_int
    \int_gzero:N \g_@@_count_item_anskey_int
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Keys and functions associated with storage}\label{int:storage-system}
%
% \begin{macro}[int]{wrap-ans, wrap-opt, save-sep,mark-ans, mark-pos, show-ans, mark-ref, save-ref}
%    We add the keys \mykey{wrap-ans}, \mykey{wrap-opt}, \mykey{save-sep}, \mykey{mark-ans}, \mykey{mark-pos},
%    \mykey{show-ans}, \mykey{show-pos}, \mykey{mark-ref} and \mykey{save-ref}
%    related to the \emph{\enquote{storage system}} and internal
%    mechanism of \emph{\enquote{label and ref}} only at the \emph{first
%    level} of \myenv*{enumext} and \myenv*{enumext*}.
% \iffalse
%% Add keys associated with storage on first level of |enumext| and |enumext*|.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:n #1
  {
    \keys_define:nn { enumext / #1 }
      {
        wrap-ans   .cs_set_protected:Np = \@@_anskey_wrapper:n ##1,
        wrap-ans   .initial:n = \fbox{##1},
        wrap-ans   .value_required:n = true,
        wrap-opt   .cs_set_protected:Np = \@@_keyans_wrapper_opt:n ##1,
        wrap-opt   .initial:n = [{##1}],
        wrap-opt   .value_required:n = true,
        save-sep   .tl_set:N  = \l_@@_store_keyans_item_opt_sep_tl,
        save-sep   .initial:n = {, ~ },
        save-sep   .value_required:n = true,
        mark-ans   .tl_set:N  = \l_@@_mark_answer_sym_tl,
        mark-ans   .initial:n = \textasteriskcentered,
        mark-ans   .value_required:n = true,
        mark-pos   .choice:,
        mark-pos  / left   .code:n = \str_set:Nn \l_@@_mark_position_str { l },
        mark-pos  / right  .code:n = \str_set:Nn \l_@@_mark_position_str { r },
        mark-pos   .initial:n = right,
        mark-pos   .value_required:n = true,
        show-ans   .bool_set:N = \l_@@_show_answer_bool,
        show-ans   .initial:n  = false,
        show-ans   .value_required:n = true,
        show-pos   .bool_set:N = \l_@@_show_position_bool,
        show-pos   .initial:n  = false,
        show-pos   .value_required:n = true,
        mark-ref   .tl_set:N   = \l_@@_mark_ref_sym_tl,
        mark-ref   .initial:n  = \textasteriskcentered,
        mark-ref   .value_required:n = true,
        save-ref   .bool_set:N = \l_@@_store_ref_key_bool,
        save-ref   .initial:n  = false,
        save-ref   .value_required:n = true,
      }
  }
\clist_map_inline:nn { level-1, enumext* } { \@@_tmp:n {#1} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{mark-pos, show-ans}
%    For the \myenv*{keyans} and \myenv*{keyans*} environments we will only add the keys
%    \mykey{mark-pos}, \mykey{show-ans} and \mykey{show-pos}.
% \iffalse
%% Add keys |mark-pos| and |show-ans| for |keyans| and |keyans*|.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:n #1
  {
    \keys_define:nn { enumext / #1 }
      {
        mark-pos .choice:,
        mark-pos / left  .code:n = \str_set:Nn \l_@@_mark_position_str { l },
        mark-pos / right .code:n = \str_set:Nn \l_@@_mark_position_str { r },
        mark-pos .initial:n = right,
        mark-pos .value_required:n  = true,
        show-ans .bool_set:N = \l_@@_show_answer_bool,
        show-ans .initial:n  = false,
        show-ans .value_required:n = true,
        show-pos .bool_set:N = \l_@@_show_position_bool,
        show-pos .initial:n  = false,
        show-pos .value_required:n = true,
      }
  }
\clist_map_inline:nn { keyans, keyans* } { \@@_tmp:n {#1} }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}[int]{columns*, columns-sep*}
%    For the \myenv*{enumext} and \myenv*{enumext*} environments we will only add the keys
%    \mykey{columns*} and \mykey{columns-sep*}.
%
%    The values set by these keys will be passed as optional arguments to
%    the \emph{\enquote{inner levels}} of the \myenv*{enumext} and
%    \myenv*{enumext*} environments via the \cs{@@_store_level_open:}
%    function used by the \emph{\enquote{storage system}} to preserve
%    the structure and then used by the |\printkeyans| command.
%
% \iffalse
%% Add keys |columns-sep*| and |columns*| for |\printkeyans|.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        columns*     .code:n = \bool_set_true:c { l_@@_store_columns_#2_bool }
                               \int_set:cn { l_@@_store_columns_#2_int } {##1}
                               \tl_put_right:ce { l_@@_store_opt_#2_tl }
                                 {
                                    columns = \exp_not:v { l_@@_store_columns_#2_int },
                                 },
        columns*     .value_required:n  = true,
        columns-sep* .code:n = \bool_set_true:c { l_@@_store_columns_sep_#2_bool }
                               \dim_set:cn { l_@@_store_columns_sep_#2_dim } {##1}
                               \tl_put_right:ce { l_@@_store_opt_#2_tl }
                                 {
                                    columns-sep = \exp_not:v { l_@@_store_columns_sep_#2_dim },
                                 },
        columns-sep* .value_required:n  = true,
      }
  }
\clist_map_inline:nn
  {
    {level-1}{i}, {level-2}{ii}, {level-3}{iii}, {level-4}{iv}, {enumext*}{vii}
  }
  { \@@_tmp:nn #1 }
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Function for storing content in prop list}
%
% \begin{macro}{\@@_store_addto_prop:n, \@@_store_addto_prop:V}
%    The function \cs{@@_store_addto_prop:n} stores the content in
%    \mymeta{prop list} defined by \mykey{save-ans} key. The \emph{\enquote{stored
%    content}} is retrieved by means of the \ics*{getkeyans} command.
%
%    \smallskip
%
%    The form in which the content is \emph{\enquote{stored}} in the \mymeta{prop list}
%    is \mymarg[type=tt]{position}\mymarg[type=tt]{content}. This
%    function is used by \ics*{anskey} in \myenv*{enumext} and
%    \myenv*{enumext*} environments, \ics*{item*} in \myenv*{keyans}
%    and \myenv*{keyans*} environments and \ics*{anspic} in \myenv*{keyanspic}
%    environment.
% \iffalse
%% Function for store content to prop list.
% \fi
%    \begin{macrocode}
\cs_generate_variant:Nn \prop_gput_if_not_in:Nnn { cen }
\cs_new_protected:Npn \@@_store_addto_prop:n #1
  {
    \prop_gput_if_not_in:cen { g_@@_ \l_@@_store_name_tl _prop }
      {
        \int_eval:n { \prop_count:c { g_@@_ \l_@@_store_name_tl _prop } + 1 }
      }
      { #1 }
  }
\cs_generate_variant:Nn \@@_store_addto_prop:n { V }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Function for storing content in sequence}
%
% \begin{macro}{\@@_store_addto_seq:n, \@@_store_addto_seq:v, \@@_store_addto_seq:V}
%    The function \cs{@@_store_addto_seq:n} stores the content in
%    \mymeta{sequence} defined by \mykey{save-ans} key. This function is used by \ics*{anskey} in
%    \myenv*{enumext}, \ics*{item*} in \myenv*{keyans} and
%    \ics*{anspic} in \myenv*{keyanspic}.
%
%    The form in which the content is stored in \mymeta{sequence} is in
%    a internal \myenv*{enumext} or \myenv*{enumext*} environments with the \emph{same structure}
%    in which the command was executed.
%
%    The \emph{\enquote{stored content}} is retrieved by means of the \ics*{printkeyans}
%    command.
% \iffalse
%% Function for store content to sequence.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_store_addto_seq:n #1
  {
    \seq_gput_right:cn { g_@@_ \l_@@_store_name_tl _seq } { #1 }
  }
\cs_generate_variant:Nn \@@_store_addto_seq:n { v, V }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Functions for storing the list structure in the sequence}
%
% \begin{macro}{\@@_store_level_open:, \@@_store_level_close:,}
%    The memorization structure of the list is handled by the functions
%    \cs{@@_store_level_open:} and \cs{@@_store_level_close:} which are
%    executed per level within the \myenv*{enumext} environment.
%
%    As this structure will be stored in the sequence set by the
%    \mykey{save-ans} key, we will not be able to modify it locally, so it
%    is better to take only two copies of the values set by the
%    \mykey{columns} and \mykey{columns-sep} keys if they are present when
%    changing levels within the \myenv*{enumext} environment when executing
%    |\anskey|. We will store these values in the variable \myvarenv{l__@@_store_columns_X_tl} if they
%    are different from \mydim{0} and \mydim{0pt} and pass them as an optional argument
%    to the environment stored in the sequence \myenv*{enumext}.
% \iffalse
%% Function for memorize level execution of |\anskey| on |enumext|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_store_level_open:
  {
    \bool_if:NT \l_@@_store_ans_bool
      {
        \tl_if_empty:cTF { l_@@_store_opt_ \@@_level: _tl }
          {
            \@@_store_addto_seq:n
              {
                \item \begin{enumext}
              }
          }
          {
            \tl_put_left:cn { l_@@_store_opt_ \@@_level: _tl }
              {
                \item \begin{enumext} [
              }
            \tl_put_right:cn { l_@@_store_opt_ \@@_level: _tl }
              {
                ]
              }
            \@@_store_addto_seq:v { l_@@_store_opt_ \@@_level: _tl }
          }
      }
  }
\cs_new_protected:Nn \@@_store_level_close:
  {
    \bool_if:NT \l_@@_store_ans_bool
      {
        \@@_store_addto_seq:n { \end{enumext} }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_store_level_open_vii:, \@@_store_level_close_vii:,}
%    When nesting the \myenv*{enumext*} environment in \myenv*{enumext}
%    starting right after \ics{item} (without material between them) there
%    is a problem with the alignment of the labels with the baseline
%    between the two environments. One way to get around this problem is to
%    place |\mode_leave_vertical:| and then apply |\vspace| taking into account
%    |\baselineskip|, the value of |\parsep| of the current level of
%    \myenv*{enumext} and the value of |\topsep| of the \myenv*{enumext*}
%   environment.
%
% \iffalse
%% Function for memorize level execution of |\anskey| on |enumext*|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_store_level_open_vii:
  {
    \bool_if:NT \l_@@_store_ans_bool
      {
        \tl_if_empty:NTF \l_@@_store_opt_vii_tl
          {
            \@@_store_addto_seq:n
              {
                \item \mode_leave_vertical:
                  \vspace { -\skip_eval:n { \baselineskip + \parsep } }
                  \begin{enumext*}[before={\setlength{\topsep}{0pt}},]
              }
          }
          {
            \tl_put_left:Nn \l_@@_store_opt_vii_tl
              {
                \item \mode_leave_vertical:
                  \vspace { -\skip_eval:n { \baselineskip + \parsep } }
                  \begin{enumext*}[before={\setlength{\topsep}{0pt}},
              }
            \tl_put_right:Nn \l_@@_store_opt_vii_tl
              {
                ]
              }
            \@@_store_addto_seq:V \l_@@_store_opt_vii_tl
          }
      }
  }
\cs_new_protected:Nn \@@_store_level_close_vii:
  {
    \bool_if:NT \l_@@_store_ans_bool
      {
        \@@_store_addto_seq:n { \end{enumext*} }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Function for show marks and position}
%
% \begin{macro}{\@@_print_keyans_box:NN, \@@_print_keyans_box:cc }
%   The function \cs{@@_print_keyans_box:NN} print a box in the left
%   margin with \cs{l_@@_mark_answer_sym_tl} used by the \mykey{wrap-ans}, \mykey{show-ans} and
%   \mykey{show-pos} keys. The function takes two arguments:
%
%  \smallskip
%
% \begin{arguments}
%   \item \myvarenv{l__@@_labelwidth_X_dim}
%   \item \myvarenv{l__@@_labelsep_X_dim}
% \end{arguments}
%
% \iffalse
%% Function for put content in box on left margin.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_print_keyans_box:NN
  {
    \mode_leave_vertical:
    \skip_horizontal:n { -\dim_use:N #2 }
    \makebox[0pt][ r ]
      {
        \makebox[ \dim_use:N #1 ][ \l_@@_mark_position_str ]
          {
            \tl_use:N \l_@@_mark_answer_sym_tl
          }
      }
    \skip_horizontal:n { \dim_use:N #2 }
  }
\cs_generate_variant:Nn \@@_print_keyans_box:NN { cc }
%    \end{macrocode}
% \end{macro}
%
% \subsection{The command \cs{anskey} and internal label and ref}\label{cmd:anskey}
%
% Since we will be \emph{\enquote{storing content}} in a list environment
% within \mymeta{sequences} and can (more or less) manage the options
% passed to each level, it is necessary that we have a little more
% control over |\item| when storing. The \ics*{anskey} command will cover
% this point and give it very similar behaviour to that of |\item| in the
% \myenv*{enumext} and \myenv*{enumext*} environments.
%
% \begin{macro}{\anskey}
%
%     We want the command to be executed as follows:
%     \ics*{anskey}\myparg{number}|*|\myoarg[type=tt]{key
%     \textnormal{\textcolor{gray}{=}} val}\mymarg[type=tt]{content} so
%     first we'll add the keys  \mykey{item-sym*}, \mykey{item-pos*} and
%     \mykey{store-brk}.
% \iffalse
%% Add |key=val| for |\anskey|.
% \fi
%    \begin{macrocode}
\keys_define:nn { enumext / anskey }
  {
    item-sym* .tl_set:N   = \l_@@_store_item_symbol_tl,
    item-sym* .value_required:n = true,
    item-pos* .dim_set:N  = \l_@@_store_item_symbol_sep_dim,
    item-pos* .value_required:n = true,
    store-brk .bool_set:N = \l_@@_store_columns_break_bool,
    store-brk .default:n  = true,
    store-brk .value_forbidden:n = true,
  }
%    \end{macrocode}
%
%    This command \ics*{anskey} will only be present when using the
%    \mykey{save-ans} key in \myenv*{enumext} and \myenv*{enumext*}
%    environments, otherwise it will return an error. If the
%    \mykey{check-ans} key is active, increment
%    \cs{g_@@_count_item_with_ans_int}, then call internal function
%    \cs{@@_store_anskey_code:nnnn} will \emph{\enquote{store content}} in
%    the \mymeta{sequence} and in the \mymeta{prop list}.
% \iffalse
%% Define the user command |\anskey|.
%% #1: (number); #2: * starred; #3: key-val; #4: argument
% \fi
%    \begin{macrocode}
\NewDocumentCommand \anskey { d() s o +m }
  {
    \bool_if:NF \l_@@_store_active_bool
      {
        \msg_error:nnnn { enumext } { anskey-wrong-place }{ anskey }{ enumext }
      }
    \int_compare:nNnT { \l_@@_keyans_level_int } = { 1 }
      {
        \msg_error:nnnn { enumext } { command-wrong-place }{ anskey }{ keyans }
      }
    \int_compare:nNnT { \l_@@_keyans_pic_level_int } = { 1 }
      {
        \msg_error:nnnn { enumext } { command-wrong-place }{ anskey }{ keyanspic }
      }
    \group_begin:
      \bool_if:NT \l_@@_store_ans_bool
        {
          \bool_if:NT \l_@@_check_ans_bool
            {
              \int_gincr:N \g_@@_count_item_anskey_int
            }
          \@@_store_anskey_code:nnnn {#1} {#2} {#3} {#4}
        }
    \group_end:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_store_anskey_code:nnnn}
%
%   The internal function \cs{@@_store_anskey_code:nnnn} first we pass the
%   command \mymeta{argument} to the \mymeta{prop list}, then checks the
%   state of the variable \cs{l_@@_store_ref_key_bool} handled by the
%   \mykey{save-ref} key and will call the function
%   \cs{@@_store_internal_ref:} for the internal \emph{\enquote{label
%   and ref}} system. Followed by this if the \mykey{show-ans} or
%   \mykey{show-pos} keys are active we will show the
%   \emph{\enquote{wrapped}} \mymeta{argument} passed to the command.
% \iffalse
%% Internal function of |\anskey|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_store_anskey_code:nnnn #1 #2 #3 #4
  {
    \@@_store_addto_prop:n {#4}
    \bool_if:NT \l_@@_store_ref_key_bool
      {
        \@@_store_internal_ref:
      }
    \@@_store_anskey_show_left:n { #4 }
%    \end{macrocode}
%   Now we start processing the optional arguments passed to the
%   command to build our |\item| in the variable \cs{l_@@_store_anskey_arg_tl}
%   which we will \emph{\enquote{store}} in the \mymeta{sequence}.
%   First we clear the variable \cs{l_@@_store_anskey_arg_tl} and process
%   \myoarg[type=tt]{key \textnormal{\textcolor{gray}{=}} val}, if the
%   \mykey{store-brk} key is present and the command is running under
%   \myenv*{enumext} (not in the starred version) we will add
%   \ics{columnbreak} and then |\item|.
%
%    \begin{macrocode}
    \tl_clear:N \l_@@_store_anskey_arg_tl
    \tl_if_novalue:nF {#3}
      {
        \keys_set:nn { enumext / anskey } {#3}
      }
    \bool_lazy_and:nnT
      { \bool_if_p:N \l_@@_store_columns_break_bool }
      { \bool_not_p:n { \l_@@_starred_bool } }
      {
        \tl_put_left:Nn \l_@@_store_anskey_arg_tl { \columnbreak }
      }
    \tl_put_right:Nn \l_@@_store_anskey_arg_tl { \item }
%    \end{macrocode}
%   Now we will check the \myparg{number} argument and add it to
%   \cs{l_@@_store_anskey_arg_tl} if the command is running under
%   \myenv*{enumext*} (starred version).
%    \begin{macrocode}
    \tl_if_novalue:nF {#1}
      {
        \int_set:Nn \l_@@_store_columns_join_int {#1}
        \bool_if:NT \l_@@_starred_bool
          {
            \tl_put_right:Ne \l_@@_store_anskey_arg_tl
              {
                ( \exp_not:V \l_@@_store_columns_join_int )
              }
          }
      }
%    \end{macrocode}
%   And now we will review the starred argument |*| together with the
%   keys \mykey{item-sym*} and \mykey{item-pos*} and pass them to
%   \cs{l_@@_store_anskey_arg_tl}.
%    \begin{macrocode}
    \bool_if:nTF {#2}
      {
        \tl_put_right:Nn \l_@@_store_anskey_arg_tl { * }
        \tl_if_empty:NF \l_@@_store_item_symbol_tl
          {
            \tl_put_right:Ne \l_@@_store_anskey_arg_tl
              {
                [ \exp_not:V \l_@@_store_item_symbol_tl ]
              }
          }
        \dim_compare:nT
          {
            \l_@@_store_item_symbol_sep_dim != \c_zero_dim
          }
          {
            \tl_put_right:Ne \l_@@_store_anskey_arg_tl
              {
                [ \exp_not:V \l_@@_store_item_symbol_sep_dim ]
              }
          }
        \tl_put_right:Nn \l_@@_store_anskey_arg_tl {#4}
      }
      {
        \tl_put_right:Nn \l_@@_store_anskey_arg_tl {#4}
      }
%    \end{macrocode}
%    Finally we check if the \mykey{save-ref} key is active along with the
%    \mypkg{hyperref} package load, if both conditions are met, it will
%    create the \ics{hyperlink} and then store in \mymeta{sequence}.
%    \begin{macrocode}
    \bool_lazy_and:nnT
      { \bool_if_p:N \l_@@_store_ref_key_bool }
      { \bool_if_p:N \l_@@_hyperref_bool }
      {
        \tl_put_right:Ne \l_@@_store_anskey_arg_tl
          {
            \hfill \exp_not:N \hyperlink { \exp_not:V \l_@@_newlabel_arg_one_tl }
                 { \exp_not:V \l_@@_mark_ref_sym_tl }
          }
      }
    \@@_store_addto_seq:V \l_@@_store_anskey_arg_tl
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_store_internal_ref:}
%    The function \cs{@@_store_internal_ref:} handles the internal
%    \emph{\enquote{label and ref}} system used by the \mykey{save-ref} and
%    \mykey{mark-ref} keys for \ics*{anskey} will allow to execute
%    \ics{ref}\mymarg[type=tt]{store name \textcolor{red}{:} position} and
%    will return |1.(a).i.A|.
%
%    First we will remove the dots \enquote{\textcolor{red}{.}} from
%    the current \mymeta{labels}, we do not want to get double
%    dots in our references, then we will place this in the variable
%    \cs{l_@@_newlabel_arg_two_tl}.
% \iffalse
%% Internal label and ref function for |\anskey|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_store_internal_ref:
  {
    \cs_set_protected:Npn \@@_tmp:n ##1
      {
        \tl_set_eq:cc { l_@@_label_copy_##1_tl } { l_@@_label_##1_tl }
        \tl_reverse:c { l_@@_label_copy_##1_tl }
        \tl_remove_once:cn { l_@@_label_copy_##1_tl } { . }
        \tl_reverse:c { l_@@_label_copy_##1_tl }
      }
    \clist_map_inline:nn { i, ii, iii, iv, vii } { \@@_tmp:n {##1} }
    \cs_set:Npn \@@_tmp:n ##1
      { . \tl_use:c { l_@@_label_copy_ \int_to_roman:n {##1} _tl } }
%    \end{macrocode}
%
%   Here we need to analyse the cases where the environment is started with
%   \myenv*{enumext*} and if \ics*{anskey} is running alone in it or if it
%   is running in a nested \myenv*{enumext} environment within the starting
%   environment.
%    \begin{macrocode}
    \bool_lazy_all:nT
      {
        { \bool_if_p:N \g_@@_starred_bool }
        { \int_compare_p:nNn { \l_@@_level_int } = { \c_zero_int } }
      }
      {
        \tl_put_right:Ne \l_@@_newlabel_arg_two_tl
          { \tl_use:N \l_@@_label_copy_vii_tl }
      }
    \bool_lazy_all:nT
      {
        { \bool_if_p:N \l_@@_standar_bool }
        { \bool_if_p:N \g_@@_starred_bool }
        { \int_compare_p:nNn { \l_@@_level_int } > { \c_zero_int } }
      }
      {
        \tl_put_right:Ne \l_@@_newlabel_arg_two_tl
          {
            \tl_use:N \l_@@_label_copy_vii_tl
            \int_step_function:nnN { 1 } { \l_@@_level_int } \@@_tmp:n
          }
      }
%    \end{macrocode}
%   If started with \myenv*{enumext} and if \ics*{anskey} is running alone in it or if it
%   is running in a nested \myenv*{enumext*} environment within the starting
%   environment.
%    \begin{macrocode}
    \bool_lazy_all:nT
      {
        { \bool_if_p:N \l_@@_standar_bool }
        { \int_compare_p:nNn { \l_@@_level_int } > { \c_zero_int } }
        { \int_compare_p:nNn { \l_@@_level_h_int } = { \c_zero_int } }
        { \bool_not_p:n { \l_@@_starred_bool } }
      }
      {
        \tl_put_right:Ne \l_@@_newlabel_arg_two_tl
          {
            \tl_use:N \l_@@_label_copy_i_tl
            \int_step_function:nnN { 2 } { \l_@@_level_int } \@@_tmp:n
          }
      }
    \cs_set:Npn \@@_tmp:n ##1
      { \tl_use:c { l_@@_label_copy_ \int_to_roman:n {##1} _tl } }
    \bool_lazy_all:nT
      {
        { \bool_if_p:N \l_@@_standar_bool }
        { \int_compare_p:nNn { \l_@@_level_int } > { \c_zero_int } }
        { \bool_not_p:n { \g_@@_starred_bool } }
        { \int_compare_p:nNn { \l_@@_level_h_int } > { \c_zero_int } }
      }
      {
        \tl_put_right:Ne \l_@@_newlabel_arg_two_tl
          {
            \int_step_function:nnN { 1 } { \l_@@_level_int } \@@_tmp:n
            . \tl_use:N \l_@@_label_copy_vii_tl
          }
      }
%    \end{macrocode}
%    Now we set the variable \cs{l_@@_newlabel_arg_one_tl} which will
%    contain \mymarg[type=tt]{store name \textcolor{red}{:} position}.
%    \begin{macrocode}
    \tl_put_right:Ne \l_@@_newlabel_arg_one_tl
      {
        \l_@@_store_name_tl \c_colon_str
        \int_eval:n { \prop_count:c { g_@@_ \l_@@_store_name_tl _prop } }
      }
%    \end{macrocode}
%    Now execute the function \cs{@@_newlabel:nn} and save the
%    result in the variable \cs{l_@@_store_write_aux_file_tl} and
%    finally we write in the |.aux| file.
%    \begin{macrocode}
    \tl_put_right:Ne \l_@@_store_write_aux_file_tl
      {
        \@@_newlabel:nn
          { \exp_not:V \l_@@_newlabel_arg_one_tl }
          { \l_@@_newlabel_arg_two_tl }
      }
    \l_@@_store_write_aux_file_tl
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_store_anskey_show_wrap:n,}
%    The function \cs{@@_store_anskey_show_wrap:n}
%    \emph{\enquote{wraps}} the \mymeta{argument} passed to \ics*{anskey}
%    when using the \mykey{wrap-ans} key.
% \iffalse
%% Internal |wrap-ans| implementation for |\anskey|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_store_anskey_show_wrap:n #1
  {
    \par
    \bool_if:NT \l_@@_starred_bool
      {
       \cs_set:Nn \@@_level: { vii }
      }
    \@@_print_keyans_box:cc
      { l_@@_labelwidth_ \@@_level: _dim }
      { l_@@_labelsep_ \@@_level: _dim }
    \@@_anskey_wrapper:n { #1 }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{ \@@_store_anskey_show_left:n }
%    The function \cs{@@_store_anskey_show_left:n} will show the \emph{\enquote{mark}}
%    defined by the \mykey{mark-ans} key or the \emph{\enquote{position}} of the content
%    stored in the \mymeta{prop list} when using the \mykey{show-pos} key on
%    the left margin next to the \emph{\enquote{wraps}} \mymeta{argument}
%    passed to \ics*{anskey} on the right side when using the \mykey{show-ans}
%    key.
% \iffalse
%% Internal |show-ans| and |show-pos| implementation for |\anskey|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_store_anskey_show_left:n #1
  {
    \bool_if:NT \l_@@_show_answer_bool
      {
        \@@_store_anskey_show_wrap:n { #1 }
      }
    \bool_if:NT \l_@@_show_position_bool
      {
        \tl_set:Ne \l_@@_mark_answer_sym_tl
          {
            \group_begin:
            \exp_not:N \normalfont
            \exp_not:N \footnotesize [ \int_eval:n
              {
                \prop_count:c { g_@@_ \l_@@_store_name_tl _prop }
              }
              ]
            \group_end:
          }
        \@@_store_anskey_show_wrap:n { #1 }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Common functions for \env{keyans}, \env{keyans*} and \env{keyanspic}}
%
% \subsubsection{Storing content in prop list}
%
% \begin{macro}{\@@_keyans_addto_prop:n}
%    The function \cs{@@_keyans_addto_prop:n} will pass the
%    contents of the current \mymeta{label} \cs{l_@@_label_v_tl} for the
%    \myenv*{keyans} environment and the current \mymeta{label} \cs{l_@@_label_vi_tl}
%    for the \myenv*{keyanspic} environment when using
%    \ics*{item*} and \ics*{anspic*}, followed by the \emph{contents} of the
%    optional argument of both commands to the \cs{l_@@_store_keyans_label_tl}
%    variable, which will be passed to the \mymeta{prop list} defined by the
%    \mykey{save-ans} key using the \cs{@@_store_addto_prop:V}.
% \iffalse
%% Function for storing in prop list for |keyans| and |keyanspic|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_keyans_addto_prop:n #1
  {
    \tl_clear:N \l_@@_store_keyans_label_tl
    \int_compare:nNnTF { \l_@@_keyans_pic_level_int } = { 1 }
      {
        \tl_put_right:Ne \l_@@_store_keyans_label_tl { \l_@@_label_vi_tl }
      }
      {
        \tl_put_right:Ne \l_@@_store_keyans_label_tl { \l_@@_label_v_tl }
      }
    \tl_if_novalue:nF { #1 }
      {
        % Set save-sep
        \tl_if_empty:NF \l_@@_store_keyans_item_opt_sep_tl
          {
            \tl_put_right:Ne \l_@@_store_keyans_label_tl { \l_@@_store_keyans_item_opt_sep_tl }
          }
        \tl_put_right:Ne \l_@@_store_keyans_label_tl { #1 }
      }
    \@@_store_addto_prop:V \l_@@_store_keyans_label_tl
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{The \texttt{save-ref} key for \env{keyans}, \env{keyans*} and \env{keyanspic}}
%
% The internal \emph{\enquote{label and ref}} system for the \myenv*{keyans}, \myenv*{keyans*} and
% \myenv*{keyanspic} environments has slight differences with the one
% implemented for the \ics*{anskey} command, basically because in this
% environments we are interested in the current \mymeta{label}. The
% mechanism defined here will allow to execute
% \ics{ref}\mymarg[type=tt]{store name \textcolor{red}{:} position} and
% will return |1.(A)|.
%
%^^A    First we will remove the dots \enquote{\textcolor{red}{\texttt{.}}}
%^^A    from the current \mymeta{labels}, we do not want to get
%^^A    double dots in our references, then we will place this in the
%^^A    variable \cs{l_@@_newlabel_arg_two_tl}.
%
% \begin{macro}{\@@_keyans_store_ref:, \@@_keyans_store_ref_aux_i:,\@@_keyans_store_ref_aux_ii:}
%    The function \cs{@@_keyans_store_ref:} handles the internal \emph{\enquote{label and ref}}
%    system used by the \mykey{save-ref} key for \ics*{item*} and \ics*{anspic*}
%    commands.
%    First we will create copies of the current \mymeta{labels} and remove
%    the dots \enquote{\textcolor{red}{\texttt{.}}} from them, we do not
%    want to get double dots in our references.
%
% \iffalse
%% Internal label and ref function for |keyans|, |keyans*| and |keyanspic|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_store_ref:
  {
    \bool_if:NT \l_@@_store_ref_key_bool
      {
        \cs_set_protected:Npn \@@_tmp:n ##1
          {
            \tl_set_eq:cc { l_@@_label_copy_##1_tl } { l_@@_label_##1_tl }
            \tl_reverse:c { l_@@_label_copy_##1_tl }
            \tl_remove_once:cn { l_@@_label_copy_##1_tl } { . }
            \tl_reverse:c { l_@@_label_copy_##1_tl }
          }
        \clist_map_inline:nn { i, v, vi, vii, viii } { \@@_tmp:n {##1} }
        \@@_keyans_store_ref_aux_i:
      }
   }
%    \end{macrocode}
%    The auxiliary function \cs{@@_keyans_store_ref_aux_i:} set the
%    variable \cs{l_@@_newlabel_arg_one_tl} which will
%    contain \mymarg[type=tt]{store name \textcolor{red}{:} position}
%    analyzing whether the environment in which they are executed is
%    \myenv*{enumext*} or \myenv*{enumext}.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_store_ref_aux_i:
  {
    \bool_if:NT \g_@@_starred_bool
      {
        \tl_set_eq:NN \l_@@_label_copy_i_tl \l_@@_label_copy_vii_tl
      }
    \int_compare:nNnT { \l_@@_keyans_pic_level_int } = { 1 }
      {
        \tl_put_right:Ne \l_@@_newlabel_arg_two_tl
          { \l_@@_label_copy_i_tl . \l_@@_label_copy_vi_tl }
      }
    \int_compare:nNnT { \l_@@_keyans_level_int } = { 1 }
      {
        \tl_put_right:Ne \l_@@_newlabel_arg_two_tl
          { \l_@@_label_copy_i_tl . \l_@@_label_copy_v_tl }
      }
    \int_compare:nNnT { \l_@@_keyans_level_h_int } = { 1 }
      {
        \tl_put_right:Ne \l_@@_newlabel_arg_two_tl
          { \l_@@_label_copy_i_tl . \l_@@_label_copy_viii_tl }
      }
    \tl_put_right:Ne \l_@@_newlabel_arg_one_tl
      {
        \l_@@_store_name_tl \c_colon_str
        \int_eval:n { \prop_count:c { g_@@_ \l_@@_store_name_tl _prop } }
      }
     \@@_keyans_store_ref_aux_ii:
  }
%    \end{macrocode}
%    Now auxiliary function \cs{@@_keyans_store_ref_aux_ii:} save the
%    result in the variable \cs{l_@@_store_write_aux_file_tl} and
%    finally we write in the |.aux| file.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_store_ref_aux_ii:
  {
    \tl_put_right:Ne \l_@@_store_write_aux_file_tl
      {
        \@@_newlabel:nn
          { \exp_not:V \l_@@_newlabel_arg_one_tl }
          { \l_@@_newlabel_arg_two_tl }
      }
    \l_@@_store_write_aux_file_tl
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Storing content in sequence}
%
% \begin{macro}{\@@_keyans_addto_seq:n, \@@_keyans_addto_seq_link:}
%    The function \cs{@@_keyans_addto_seq:n} will pass the
%    contents of the current \mymeta{label} \cs{l_@@_label_v_tl} for the
%    \myenv*{keyans} environment and the \cs{l_@@_label_vi_tl} for the \myenv*{keyanspic} environment when using
%    \ics*{item*} and \ics*{anspic*}, followed by the \mymeta{contents} of the
%    optional argument of both commands to the \cs{l_@@_store_keyans_label_tl}
%    variable to the sequence defined by the \mykey{save-ans} key.
% \iffalse
%% Function for storing in sequence for |keyans| and |keyanspic|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_keyans_addto_seq:n #1
  {
    \tl_clear:N \l_@@_store_keyans_label_tl
    \int_compare:nNnTF { \l_@@_keyans_pic_level_int } = { 1 }
      {
        \tl_put_right:Ne \l_@@_store_keyans_label_tl { \item \l_@@_label_vi_tl }
      }
      {
        \tl_put_right:Ne \l_@@_store_keyans_label_tl { \item \l_@@_label_v_tl }
      }
    \tl_if_novalue:nF { #1 }
      {
        \tl_if_empty:NF \l_@@_store_keyans_item_opt_sep_tl
          {
            \tl_put_right:Ne \l_@@_store_keyans_label_tl { \l_@@_store_keyans_item_opt_sep_tl }
          }
        \tl_put_right:Ne \l_@@_store_keyans_label_tl { #1 }
      }
    \@@_keyans_addto_seq_link:
  }
%    \end{macrocode}
%    Checks if the \mykey{save-ref} key is active along with the
%    \mypkg{hyperref} package load, if both conditions are met, it will
%    create the \ics{hyperlink} and then store using the
%    \cs{@@_store_addto_seq:V} function.
%    Finally, copy the contents of the variable \cs{l_@@_store_keyans_label_tl}
%    into the global variable \cs{g_@@_check_ans_item_tl} to be used
%    by the function \cs{@@_keyans_check_ans:nn} and increment
%    the value of the integer variable \cs{g_@@_count_item_anskey_int} handled
%    by the \mykey{check-ans} key.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_addto_seq_link:
  {
    \bool_lazy_and:nnT
      { \bool_if_p:N \l_@@_store_ref_key_bool }
      { \bool_if_p:N \l_@@_hyperref_bool }
      {
        \tl_put_right:Ne \l_@@_store_keyans_label_tl
          {
            \hfill \exp_not:N \hyperlink
              {
                \exp_not:V \l_@@_newlabel_arg_one_tl
              }
              { \exp_not:V \l_@@_mark_ref_sym_tl }
          }
      }
    \@@_store_addto_seq:V \l_@@_store_keyans_label_tl
    \tl_gset:NV \g_@@_check_ans_item_tl \l_@@_store_keyans_label_tl
    \bool_if:NT \l_@@_check_ans_bool
      {
        \int_gincr:N \g_@@_count_item_anskey_int
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Check for starred commands}
%
% \begin{macro}{\@@_keyans_check_ans:nn,}
%    The function \cs{@@_keyans_check_ans:nn} performs an extra
%    check for the \myenv*{keyans} and \myenv*{keyanspic} environments.
%    Unlike the check executed by \mykey{check-ans} key this one is not
%    controlled by any key, it is intended to prevent the forgetting of
%    \ics*{item*} or \ics*{anspic*} in these environments.
% \iffalse
%% Function for check starred command in |keyans| and |keyanspic|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_keyans_check_ans:nn #1 #2
  {
    \tl_if_empty:NTF \g_@@_check_ans_item_tl
      {
        \msg_warning:nnnn { enumext } { missing-starred }{ #1 }{ #2 }
      }
      { \tl_gclear:N \g_@@_check_ans_item_tl }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{The \texttt{show-ans} and \texttt{show-pos} keys for \env{keyans} and \env{keyanspic}}
%
% The code is very similar to the \ics*{anskey} code, but, if I change
% the order of the operations the counter off \mymeta{label} are incorrect.
%
% \begin{macro}{\@@_keyans_show_left:n,\@@_keyans_show_ans:, \@@_keyans_show_pos:, \@@_keyans_show_item_opt:,}
%    Common function to show \emph{starred commands} |\item*| and \mymeta{position} of
%    stored content in \mymeta{prop list} for \myenv*{keyans} and
%    \myenv*{keyanspic}. Need add |1| to \cs{g_@@_ \l_@@_store_name_tl _prop } for \mykey{show-pos} key.
% \iffalse
%% Function for |show-ans| and |show-pos| keys for |keyans| and |keyanspic|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_keyans_show_left:n #1
  {
    \tl_if_novalue:nF { #1 }
      {
        \tl_set:Ne \l_@@_keyans_item_opt_tl { #1 }
      }
    \bool_if:NT \l_@@_show_answer_bool
      {
        \@@_keyans_show_ans:
      }
    \bool_if:NT \l_@@_show_position_bool
      {
        \@@_keyans_show_pos:
      }
  }
\cs_new_protected:Nn \@@_keyans_show_item_opt:
  {
    \tl_if_empty:NF \l_@@_keyans_item_opt_tl
      {
        \bool_lazy_or:nnT
          { \bool_if_p:N \l_@@_show_answer_bool }
          { \bool_if_p:N \l_@@_show_position_bool }
          {
            \@@_keyans_wrapper_opt:n { \l_@@_keyans_item_opt_tl } \c_space_tl
          }
      }
  }
\cs_new_protected:Nn \@@_keyans_show_ans:
  {
    \tl_put_left:Nn \l_@@_label_v_tl
      {
        \@@_print_keyans_box:NN \l_@@_labelwidth_i_dim \l_@@_labelsep_i_dim
      }
  }
\cs_new_protected:Nn \@@_keyans_show_pos:
  {
    \int_compare:nNnTF { \l_@@_keyans_pic_level_int } = { 1 }
      {
        \tl_set:Ne \l_@@_mark_answer_sym_tl
          {
            \group_begin:
            \exp_not:N \normalfont
            \exp_not:N \footnotesize [ \int_eval:n
              {
                \prop_count:c { g_@@_ \l_@@_store_name_tl _prop }
              }
              ]
            \group_end:
          }
      }
      {
        \tl_set:Ne \l_@@_mark_answer_sym_tl
          {
            \group_begin:
            \exp_not:N \normalfont
            \exp_not:N \footnotesize [ \int_eval:n
              {
                \prop_count:c { g_@@_ \l_@@_store_name_tl _prop } + 1
              }
              ]
            \group_end:
          }
      }
    \tl_put_left:Nn \l_@@_label_v_tl
      {
        \@@_print_keyans_box:NN
          \l_@@_labelwidth_i_dim
          \l_@@_labelsep_i_dim
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Setting \texttt{item-sym*} and \texttt{item-pos*} keys}\label{key:item-starred}
%
% In order to have a cleaner implementation of |\item*| it is best to
% define a couple of keys that allow us to control and set by default the
% \mymeta{symbol} and its \mymeta{offset}.
%
% \begin{macro}[int]{item-sym*, item-pos*}
%    Define and set \mykey{item-sym*} and \mykey{item-pos*} keys
%    for \myenv*{enumext} and \myenv*{enumext*}.
% \iffalse
%% Add |item-sym*| and |item*-sep| keys.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        item-sym* .tl_set:c  = { l_@@_item_symbol_#2_tl },
        item-sym* .value_required:n = true,
        item-sym* .initial:n  = {$\star$},
        item-pos* .dim_set:c  = { l_@@_item_symbol_sep_#2_dim },
        item-pos* .value_required:n = true,
      }
  }
\clist_map_inline:nn
  {
    {level-1}{i}, {level-2}{ii}, {level-3}{iii}, {level-4}{iv}, {enumext*}{vii}
  }
  { \@@_tmp:nn #1 }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Redefining \cs{footnote} command }\label{ltx:footnote}
%
% \begin{macro}[int]{\@@_footnotetext:nn, \@@_renew_footnote:,\@@_print_footnote:}
%   To keep the correct numbering of \ics{footnote} and to make it work
%   correctly with the \mykey{mini-env} key and in the \myenv*{enumext*} and \myenv*{keyans*}
%   environments, it is necessary to redefine the command.
%   This implementation is adapted from the answer given by Clea F. Rees (\texttt{@cfr})
%   in \href{https://tex.stackexchange.com/a/700092}{footnotes in boxes compatible with hyperref}.
% \iffalse
%% Redefining \footnote.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_footnotetext:nn
  {
    \footnotetext[#1]{#2}
  }
\cs_new_protected:Nn \@@_renew_footnote:
  {
    \seq_gclear:N \g_@@_footnote_arg_seq
    \seq_gclear:N \g_@@_footnote_int_seq
    \RenewDocumentCommand \footnote { o +m }
      {
        \tl_if_novalue:nTF {##1}
          {
            \stepcounter{footnote}
            \int_gset_eq:Nc \g_@@_footnote_int { c@footnote }
          }
          {
            \int_gset:Nn \g_@@_footnote_int { ##1 }
          }
        \footnotemark [ \g_@@_footnote_int ]
        \seq_gput_right:Nn \g_@@_footnote_arg_seq { ##2 }
        \seq_gput_right:NV \g_@@_footnote_int_seq \g_@@_footnote_int
     }
  }
\cs_new_protected:Nn \@@_print_footnote:
  {
    \seq_if_empty:NF \g_@@_footnote_int_seq
      {
        \seq_map_pairwise_function:NNN
          \g_@@_footnote_int_seq
          \g_@@_footnote_arg_seq
          \@@_footnotetext:nn
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Redefining \cs{item} command }\label{ltx:item}
%
% Redefining the \ics{item} command is not as simple as I thought. This
% command works in conjunction with the \ics{makelabel} command so I have
% to redefine both of them, in addition to this, we will have to use a
% couple of \emph{global} variables to pass the values from one command
% to the other.
%
% \subsubsection{The \cs{item} command in \env{enumext}}\label{env:item-starred-enumext}
%
% \begin{macro}[int]{\@@_default_item:n}
%   The \ics*{item} and \ics*{item}\myoarg[type=tt]{custom}
%   commands work in the usual way on \myenv*{enumext}.
%
%   \smallskip
%
%   First we will see if the optional argument is present, if it is NOT
%   present we will check the state of the variable \cs{l_@@_check_ans_bool}
%   set by the key \mykey{check-ans}, set the boolean variable
%   \myvarenv{l__@@_wrap_label_X_bool} to \enquote{true}
%   and execute \cs{@@_item_std:w}.
%
%   \smallskip
%
%   Otherwise we will check the state of the boolean variable
%   \myvarenv{l__@@_wrap_label_opt_X_bool} set by the key \mykey{wrap-label*} and
%   execute \cs{@@_item_std:w} with the optional argument.
%
%   \smallskip
%
%   The boolean variable \myvarenv{l__@@_wrap_label_X_bool} is used by
%   the function \cs{@@_make_label:} (\S\ref{ltx:makelabel}).
%
% \iffalse
%% Internal function for |\item| whit check-answer mechanism in |enumext|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_default_item:n #1
  {
    \tl_if_novalue:nTF {#1}
      {
        \bool_if:NT \l_@@_check_ans_bool
          {
            \int_gincr:N \g_@@_count_item_number_int
          }
        \bool_set_true:c { l_@@_wrap_label_ \@@_level: _bool }
        \@@_item_std:w \tl_use:c { l_@@_fake_item_indent_ \@@_level: _tl }
      }
      {
        \bool_set_eq:cc
          { l_@@_wrap_label_ \@@_level: _bool }
          { l_@@_wrap_label_opt_ \@@_level: _bool }
        \@@_item_std:w [#1] \tl_use:c { l_@@_fake_item_indent_ \@@_level: _tl }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\@@_starred_item:nn}
%
%    The \ics*{item*}, \ics*{item*}\myoarg[type=tt]{symbol} and
%    \ics*{item*}\myoarg[type=tt]{symbol}\myoarg[type=tt]{offset} works like
%    the numbered |\item|, but placing a \myoarg[type=tt]{symbol} to the \emph{\enquote{left}} of the
%    \mymeta{label} separated from it by the value set by the
%    \mykey{labelsep} key and can be \emph{offset} using the second optional
%    argument \myoarg[type=tt]{offset}.
%
% \begin{arguments}
%   \item \myvarenv{l__@@_item_symbol_X_tl}
%   \item \myvarenv{l__@@_item_symbol_sep_X_dim}
% \end{arguments}
%
%   First we will make a copy of \myvarenv{l__@@_item_symbol_X_tl} which is
%   set by the key \mykey{item-sym*} or passed as optional argument in
%   the global variable \cs{g_@@_item_symbol_tl}, followed by setting the
%   variable \myvarenv{l__@@_item_symbol_sep_X_dim} set by the key
%   \mykey{item*-sep} or by the second optional argument.
%
%   \smallskip
%
%   Then we will see the state of the variable \cs{l_@@_check_ans_bool}
%   set by the key \mykey{check-ans}, set the boolean variable
%   \myvarenv{l__@@_wrap_label_X_bool} to \enquote{true} and execute \cs{@@_item_std:w}.
%
%   \smallskip
%
%   In this function the optional argument of \cs{@@_item_std:w} is
%   omitted, we only want it to be numbered.
%
%   \smallskip
%
%   The boolean variable \myvarenv{l__@@_wrap_label_X_bool}
%   and the vars \myvarenv{l__@@_item_symbol_sep_X_dim}, \myvarenv{g__@@_item_symbol_tl}
%   are used by the function \cs{@@_make_label:} (\S\ref{ltx:makelabel}).
%
% \iffalse
%% Internal function for |\item*[symb][sep]| whit check-answer mechanism in |enumext|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_starred_item:nn #1 #2
  {
    \tl_if_novalue:nF {#1}
      {
        \tl_set:cn { l_@@_item_symbol_ \@@_level: _tl } {#1}
      }
    \tl_gset_eq:Nc \g_@@_item_symbol_tl { l_@@_item_symbol_ \@@_level: _tl }
    \tl_if_novalue:nTF {#2}
      {
        \dim_set_eq:cc
          { l_@@_item_symbol_sep_ \@@_level: _dim }
          { l_@@_labelsep_ \@@_level: _dim }
      }
      {
        \dim_set:cn { l_@@_item_symbol_sep_ \@@_level: _dim } {#2}
      }
    \bool_if:NT \l_@@_check_ans_bool
      {
        \int_gincr:N \g_@@_count_item_number_int
      }
    \bool_set_true:c { l_@@_wrap_label_ \@@_level: _bool }
    \@@_item_std:w \tl_use:c { l_@@_fake_item_indent_ \@@_level: _tl }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_redefine_item:}
%    The function \cs{@@_redefine_item:} will redefine the |\item|
%    command in the \myenv*{enumext} environment for the internal mechanism of
%    check-answers for \mykey{check-ans} key and adding the starred
%    |\item*| version.
%
%    \smallskip
%
%    This function is passed to \myvarenv{__@@_list_arg_two_X:} which is used
%    in the definition of the \myenv*{enumext} environment (\S\ref{ltx:second-arg}).
% \iffalse
%% Redefinition of |\item| for internal check-answer mechanism and \item* in |enumext|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_redefine_item:
  {
    \RenewDocumentCommand \item { s o o }
      {
       \bool_if:nTF {##1}
         {
           \@@_starred_item:nn {##2} {##3}
         }
         { \@@_default_item:n {##2} }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{The \cs{item} command  in \texttt{keyans}}\label{cmd:item-starred}
%
% The \ics*{item*} and \ics*{item*}\myoarg[type=tt]{content} commands \emph{store}
% the current \mymeta{label} next to the \myoarg[type=tt]{content} if it is present
% in the \mymeta{sequence} and \mymeta{prop list} defined by \mykey{save-ans} key.
%
% \begin{macro}{\@@_keyans_default_item:n,}
%    The function \cs{@@_keyans_default_item:n} executes the original
%    behavior of the \ics*{item}.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_keyans_default_item:n #1
  {
    \tl_if_novalue:nTF { #1 }
      {
        \bool_set_true:N \l_@@_wrap_label_v_bool
        \@@_item_std:w \tl_use:N \l_@@_fake_item_indent_v_tl
      }
      {
        \bool_set_eq:NN \l_@@_wrap_label_v_bool \l_@@_wrap_label_opt_v_bool
        \@@_item_std:w [#1] \tl_use:N \l_@@_fake_item_indent_v_tl
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_keyans_starred_item:n}
%    The function \cs{@@_keyans_starred_item:n}
%    which will make a temporary copy of the current \mymeta{label}, execute the
%    \mykey{show-ans} or \mykey{show-pos} keys using the function
%    \cs{@@_keyans_show_left:n} and will display the contents
%    of that item using the internal copy \cs{@@_item_std:w}, this is
%    necessary to prevent incrementing the current \emph{\enquote{counter}} of the original
%    \mymeta{label}.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_keyans_starred_item:n #1
  {
    \tl_set_eq:NN \l_@@_keyans_tmpa_tl \l_@@_label_v_tl
    \@@_keyans_show_left:n { #1 }
    \bool_set_true:N \l_@@_wrap_label_v_bool
    \@@_item_std:w \tl_use:N \l_@@_fake_item_indent_v_tl \@@_keyans_show_item_opt:
%    \end{macrocode}
%    Recover the original value of the current \mymeta{label} and \emph{store}
%    it first in the \mymeta{prop list} (including the optional argument), run the
%    internal \emph{\enquote{label and ref}} system if the \mykey{save-ref} key is active and
%    finally \emph{store} it in the \mymeta{sequence}.
%    \begin{macrocode}
    \tl_set_eq:NN \l_@@_label_v_tl \l_@@_keyans_tmpa_tl
    \@@_keyans_addto_prop:n { #1 }
    \@@_keyans_store_ref:
    \@@_keyans_addto_seq:n { #1 }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\item*,\@@_keyans_redefine_item:}
%    The function \cs{@@_keyans_redefine_item:} is responsible for adding
%    the \emph{starred} and \emph{optional} argument by the
%    \cs{@@_list_arg_two_v:} function in the definition of the
%    \myenv*{keyans} environment. Here we need to use
%    |\peek_remove_spaces:n| to prevent an unwanted space when using
%    |\item*| in conjunction with the \mykey{itemindent} key.
%
%    \smallskip
%
%    This function is passed to \myvarenv{__@@_list_arg_two_v:} which is used
%    in the definition of the \myenv*{keyans} environment (\S\ref{ltx:second-arg}).
% \iffalse
%% Redefine |\item| for |keyans|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_redefine_item:
  {
    \RenewDocumentCommand \item { s o }
      {
        \bool_if:nTF {##1}
          {
            \peek_remove_spaces:n
              {
                \@@_keyans_starred_item:n {##2}
              }
          }
          {
            \@@_keyans_default_item:n {##2}
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Redefining \cs{makelabel} command}\label{ltx:makelabel}
%
% Redefine \ics{makelabel} for the keys \mykey{align}, \mykey{font},
% \mykey{wrap-label}, \mykey{wrap-label*} and |\item*| for
% \myenv*{enumext} and \myenv*{keyans} environments.
%
% \subsubsection{Redefining \cs{makelabel} for \env{enumext}}
%
% \begin{macro}{\@@_item_starred:}
%    The function \cs{@@_item_starred:} will be responsible for
%    executing |\item*| for the \myenv*{enumext} environment.
% \iffalse
%% Function for |\item*[][]| in |\makelabel| for enumext.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_item_starred:
  {
    \tl_if_empty:cF { l_@@_item_symbol_ \@@_level: _tl }
      {
        \mode_leave_vertical:
        \skip_horizontal:n { -\dim_use:c { l_@@_item_symbol_sep_ \@@_level: _dim } }
        \makebox[ 0pt ][ r ]{ \g_@@_item_symbol_tl }
        \skip_horizontal:n { \dim_use:c { l_@@_item_symbol_sep_ \@@_level: _dim } }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_make_label:}
%    The function \cs{@@_make_label:} redefine \ics{makelabel} for
%    the \myenv*{enumext} environment.
%    \smallskip
%
%    This function is passed to \myvarenv{__@@_list_arg_two_X:} which is used
%    in the definition of the \myenv*{enumext} environment (\S\ref{ltx:second-arg}).
% \iffalse
%% Redefinition of |\makelabel| for |\item| and |\item*[][]| in enumext.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_make_label:
  {
    \RenewDocumentCommand \makelabel { m }
      {
        \tl_use:c { l_@@_label_fill_left_ \@@_level: _tl }
        \tl_use:c { l_@@_label_font_style_ \@@_level: _tl }
        \bool_if:cTF { l_@@_wrap_label_ \@@_level: _bool }
          {
            \@@_item_starred:
            \use:c { @@_wrapper_label_ \@@_level: :n } { ##1 }
          }
          { ##1 }
        \tl_use:c { l_@@_label_fill_right_ \@@_level: _tl }
        \tl_gclear:N \g_@@_item_symbol_tl
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Redefining \cs{makelabel} for \env{keyans}}
%
% \begin{macro}{\@@_keyans_make_label:}
%    The function \cs{@@_keyans_make_label:} redefine \ics{makelabel}
%    for \myenv*{keyans} environment.
%    \smallskip
%
%    This function is passed to \myvarenv{__@@_list_arg_two_v:} which is used
%    in the definition of the \myenv*{keyans} environment (\S\ref{ltx:second-arg}).
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_make_label:
  {
    \RenewDocumentCommand \makelabel { m }
      {
        \tl_use:N \l_@@_label_fill_left_v_tl
        \tl_use:N \l_@@_label_font_style_v_tl
        \bool_if:NTF \l_@@_wrap_label_v_bool
          {
            \@@_wrapper_label_v:n { ##1 }
          }
          { ##1 }
        \tl_use:N \l_@@_label_fill_right_v_tl
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Calculation of \cs{leftmargin} and \cs{itemindent}}\label{int:leftmargin}
%
% Consider the figure \ref{fig:eight} where the default margins (on the
% left) of a list are represented.
%
% \begin{figure}[!htbp]
%   \centering
%   \begin{tikzpicture}[line cap=round,line join=round,x=0.8cm,y=0.8cm,every node/.style={font=\footnotesize}]
%     \draw[<->,color=gray] (-0.5,6.175) --node[below,text=lightgray,font=\footnotesize\ttfamily]{margin page} (2,6.175);
%     \draw[line width=0.5pt,dash pattern=on 2pt off 2pt,color=gray] (2,4.85) -- (2,7.5);
%     \draw[<->,color=gray] (2.0,7.0) --node[above,text=optcolor]{\vphantom{p}\texttt{list-offset}} (4.5,7.0);
%     \draw[<->,color=gray] (4.5,7.0) --node[above,text=blue!75]{\vphantom{p}\texttt{\textbackslash{}labelwidth}} (7.5,7.0);
%     \draw[<->,color=gray] (7.5,7.0) --node[above,text=blue!75]{\texttt{\textbackslash{}labelsep}} (9.5,7.0);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (4.5,6.5) rectangle (7.5,6.85);% labelwidth
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.5,6.5) rectangle (9.5,6.85);% labelsep
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (9.5,6.5) rectangle (15,6.85);% item width
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (9.5,6.0) rectangle (15,6.35);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (9.5,5.5) rectangle (15,5.85);
%     \draw[<->,color=gray] (1.25,5.35) --node[below,text=blue!75]%
%       {\begin{tabular}{c}
%          \texttt{\textbackslash{}leftmargin + \textbackslash{}itemindent} \\
%          \textcolor{optcolor}{\texttt{list-indent}}
%        \end{tabular}} (9.5,5.35);
%   \end{tikzpicture}
%   \caption{Representation of standard horizontal lengths in \myenv{list} environment.}
%   \label{fig:eight}
% \end{figure}
%
% The idea is to have control over these margins so that our list does
% not overlap the left margin of the page. The \emph{key} relationship is that
% the right edge of the |\labelsep| equals the right edge of the |\itemindent|,
% so that the left edge of the \emph{label box} is at |\leftmargin+\itemindent| minus |\labelwidth+\labelsep|.
% Thus, the handling of the margins by the package will be as shown in
% the figure \ref{fig:nine}.
%
% \begin{figure}[!htbp]
%   \centering
%   \begin{tikzpicture}[line cap=round,line join=round,x=0.8cm,y=0.8cm,every node/.style={font=\footnotesize}]
%     \draw[<->,color=gray] (-0.5,6.175) --node[below,text=lightgray,font=\footnotesize\ttfamily]{margin page} (2,6.175);
%     \draw[line width=0.5pt,dash pattern=on 2pt off 2pt,color=gray] (2,4.85) -- (2,7.5);
%     \draw[<->,color=gray] (2.0,7.0) --node[above,text=optcolor]{\vphantom{p}\texttt{list-offset}} (4.5,7.0);
%     \draw[<->,color=gray] (4.5,7.0) --node[above,text=blue!75]{\vphantom{p}\texttt{\textbackslash{}labelwidth}} (7.5,7.0);
%     \draw[<->,color=gray] (7.5,7.0) --node[above,text=blue!75]{\texttt{\textbackslash{}labelsep}} (9.5,7.0);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (4.5,6.5) rectangle (7.5,6.85);% labelwidth
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.5,6.5) rectangle (9.5,6.85);% labelsep
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (9.5,6.5) rectangle (15,6.85);% item width
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (9.5,6.0) rectangle (15,6.35);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (9.5,5.5) rectangle (15,5.85);
%     \draw[<->,color=gray] (4.5,5.35) --node[below,text=blue!75]%
%       {\begin{tabular}{c}
%          \texttt{\textbackslash{}leftmargin + \textbackslash{}itemindent} \\
%          \textcolor{optcolor}{\texttt{list-indent}}
%        \end{tabular}} (9.5,5.35);
%   \end{tikzpicture}
%   \caption{Representation of horizontal lengths concept in list in \mypkg*{enumext}.}
%   \label{fig:nine}
% \end{figure}
%
% Where the default values will look like in the figure \ref{fig:last}.
%
% \begin{figure}[htbp]
%   \centering
%   \begin{tikzpicture}[line cap=round,line join=round,x=0.8cm,y=0.8cm,every node/.style={font=\footnotesize}]
%     \draw[<->,color=gray] (-0.5,6.175) --node[below,text=lightgray,font=\footnotesize\ttfamily]{margin page} (2,6.175);
%     \draw [line width=0.5pt,dash pattern=on 2pt off 2pt,color=gray] (2,4.85) -- (2,7.5);
%     \draw[<->,color=gray] (2.0,7.0) --node[above,text=blue!75]{\vphantom{p}\texttt{labelwidth}} (5.0,7.0);
%     \draw[<->,color=gray] (5.0,7.0) --node[above,text=blue!75]{\texttt{labelsep}} (7.0,7.0);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (2.0,6.5) rectangle (5.0,6.85);% labelwidth
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (5.0,6.5) rectangle (7.0,6.85);% labelsep
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,6.5) rectangle (15,6.85);% item width
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,6.0) rectangle (15,6.35);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,5.5) rectangle (15,5.85);
%     \draw[<->,color=gray] (2.0,5.35) --node[below,text=blue!75]%
%       {\begin{tabular}{c}
%          \texttt{\textbackslash{}leftmargin + \textbackslash{}itemindent} \\
%          \textcolor{optcolor}{\texttt{list-indent}}
%        \end{tabular}}
%     (7.0,5.35);
%   \end{tikzpicture}
%   \caption{Default horizontal lengths in \mypkg*{enumext}.}
%   \label{fig:last}
% \end{figure}
%
% \begin{macro}{\@@_calc_hspace:NNNNNNN, \@@_calc_hspace:ccccccc}
%
%   The function \cs{@@_calc_hspace:NNNNNNN} takes seven arguments to be
%   able to determine horizontal spaces for all list environment:
%
%   \begin{verbatim}
%     #1: \l__enumext_labelwidth_X_dim       #2: \l__enumext_labelsep_X_dim
%     #3: \l__enumext_listoffset_X_dim       #4: \l__enumext_leftmargin_tmp_X_dim
%     #5: \l__enumext_leftmargin_X_dim       #6: \l__enumext_itemindent_X_dim
%     #7: \l__enumext_leftmargin_tmp_X_bool
%   \end{verbatim}
%
%   And returns the \emph{\enquote{adjusted}} values of |\leftmargin|
%   and |\itemindent|.
%
%   \smallskip
%
%   This function is passed to \myvarenv{__@@_list_arg_two_X:} which
%   is used in the definition of the \myenv*{enumext} and \myenv*{keyans}
%   environments (\S\ref{ltx:second-arg}).
% \iffalse
%% Function to calc of horizontal length for all list environment.
%% #1: \l__enumext_labelwidth_X_dim     #2: \l__enumext_labelsep_X_dim
%% #3: \l__enumext_listoffset_X_dim     #4: \l__enumext_leftmargin_tmp_X_dim
%% #5: \l__enumext_leftmargin_X_dim     #6: \l__enumext_itemindent_X_dim
%% #7: \l__enumext_leftmargin_tmp_X_bool
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_calc_hspace:NNNNNNN #1 #2 #3 #4 #5 #6 #7
  {
    \dim_compare:nNnT { #1 } < { \c_zero_dim }
      {
        \msg_warning:nnnV { enumext } { width-non-positive }{ labelwidth }{ #1 }
        \dim_set:Nn #1 { \dim_abs:n { #1 } }
      }
    \dim_compare:nNnT { #2 } < { \c_zero_dim }
      {
        \msg_warning:nnnV { enumext } { width-negative }{ labelsep }{ #2 }
        \dim_set:Nn #2 { \dim_abs:n { #2 } }
      }
%    \end{macrocode}
%
%    If no value has been passed to the \mykey{labelwidth} and \mykey{labelsep} keys we
%    set the default values for \myvarenv{l__@@_leftmargin_tmp_X_dim}.
%
%    \begin{macrocode}
    \bool_if:nF #7 { \dim_set:Nn #4 { #1 + #2} }
%    \end{macrocode}
%
%    We now analyze the cases and set the values for \ics{leftmargin} and
%    \ics{itemindent}.
%
%    \begin{macrocode}
    \dim_compare:nNnTF { #4 } < { \c_zero_dim }
      {
        \dim_set:Nn #6 { #1 + #2 - #4}
        \dim_set:Nn #5 { #1 + #2 + #3 - #6 }
      }
      {
        \dim_compare:nNnT { #4 } = { #1 + #2 }
          { \dim_set:Nn #6 { \c_zero_dim } }
        \dim_compare:nNnT { #4 } < { #1 + #2 }
          { \dim_set:Nn #6 { #1 + #2 - #4} }
        \dim_compare:nNnT { #4 } > { #1 + #2 }
          {
            \dim_set:Nn #6 { -#1 - #2 + #4}
            \dim_set:Nn #6 { #6*-1}
          }
        \dim_set:Nn #5 { #1 + #2 + #3 - #6 }
      }
  }
\cs_generate_variant:Nn \@@_calc_hspace:NNNNNNN { ccccccc }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Setting second argument of the lists}\label{ltx:second-arg}
%
%    At this point of the code we have already programmed the necessary
%    tools to create a custom \myenv{list} environment, remember that the function
%    \cs{@@_start_list:nn} takes two arguments, the first one we have
%    ready, the second one we will define for all the levels of the
%    environment \myenv*{enumext} and the environment \myenv*{keyans}.
%
%
% \begin{macro}{\@@_list_arg_two_i:,\@@_list_arg_two_ii:,\@@_list_arg_two_iii:,
%               \@@_list_arg_two_iv:,\@@_list_arg_two_v:,}
%    In this function for the second list argument we will implement the
%    keys \mykey{start}, \mykey{resume} and \mykey{show-length} together
%    with the redefinition of |\item| for \myenv*{enumext} and
%    \myenv*{keyans} environments.
%
%    We will \enquote{not set} |\leftmargini|, |\leftmarginii|, |\leftmarginiii| or
%    |\leftmarginiv|, in this case, we will directly set the parameters
%    for vertical and horizontal list spacing per level.
% \iffalse
%% Define "second arg" of list for |enumext| and |keyans|.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:n #1
  {
    \cs_new_protected:cpn { @@_list_arg_two_#1: }
      {
        \@@_calc_hspace:ccccccc
          { l_@@_labelwidth_#1_dim } { l_@@_labelsep_#1_dim }
          { l_@@_listoffset_#1_dim } { l_@@_leftmargin_tmp_#1_dim }
          { l_@@_leftmargin_#1_dim } { l_@@_itemindent_#1_dim }
          { l_@@_leftmargin_tmp_#1_bool }
        \clist_map_inline:nn
          { labelsep, labelwidth, itemindent, leftmargin, rightmargin, listparindent }
          { \dim_set_eq:cc {####1} { l_@@_####1_#1_dim } }
        \clist_map_inline:nn { topsep, parsep, partopsep, itemsep }
          { \skip_set_eq:cc {####1} { l_@@_####1_#1_skip } }
        \usecounter { enumX#1 }
        \setcounter { enumX#1 } { \int_eval:n { \int_use:c { l_@@_start_#1_int } - 1 } }
        \str_if_eq:nnTF {#1} { v }
          {
            \@@_keyans_redefine_item:
            \@@_keyans_make_label:
            \@@_keyans_fake_item:
            \bool_if:cT { l_@@_show_length_#1_bool }
              {
                \msg_term:nnnn { enumext } { list-lengths-not-nested } { v } { keyans }
              }
          }
          {
            \@@_redefine_item:
            \@@_make_label:
            \@@_use_key_ref:
            \@@_fake_item:
            \bool_if:cT { l_@@_show_length_#1_bool }
              {
                \msg_term:nnne { enumext } { list-lengths } {#1} { \int_use:N \l_@@_level_int }
              }
          }
      }
  }
\clist_map_inline:nn { i, ii, iii, iv, v } { \@@_tmp:n {#1} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_list_arg_two_vii:,\@@_list_arg_two_viii:,}
%   For the horizontal environments \myenv*{enumext*} and \myenv*{keyans*}
%   the implementation is similar, but, the value of |\partopsep| is always
%   \mydim{0pt}. At this point we will modify the \mykey{parsep} key to
%   make it take the value of the \mykey{itemsep} key and later, in the
%   environment definition, we will modify \mykey{parindent} to make it set
%   the value of \mykey{lisparindent} and \mykey{parsep} to set the value
%   of |\parskip| locally.
% \iffalse
%% Define "second arg" of list for |enumext*| and |keyans*|.
% \fi
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:n #1
  {
    \cs_new_protected:cpn { @@_list_arg_two_#1: }
      {
        \@@_calc_hspace:ccccccc
          { l_@@_labelwidth_#1_dim } { l_@@_labelsep_#1_dim }
          { l_@@_listoffset_#1_dim } { l_@@_leftmargin_tmp_#1_dim }
          { l_@@_leftmargin_#1_dim } { l_@@_itemindent_#1_dim }
          { l_@@_leftmargin_tmp_#1_bool }
        \clist_map_inline:nn
          { labelsep, labelwidth, itemindent, leftmargin, rightmargin, listparindent }
          { \dim_set_eq:cc {####1} { l_@@_####1_#1_dim } }
        \clist_map_inline:nn { topsep, parsep, partopsep, itemsep }
          { \skip_set_eq:cc {####1} { l_@@_####1_#1_skip } }
        \skip_set_eq:Nc \parsep  { l_@@_itemsep_#1_skip }
        \skip_zero:N \partopsep
        \usecounter { enumX#1 }
        \setcounter { enumX#1 } { \int_eval:n { \int_use:c { l_@@_start_#1_int } - 1 } }
        \@@_use_key_ref_h:
        \str_if_eq:nnTF {#1} { vii }
          {
            \@@_fake_item_vii:
            \bool_if:cT { l_@@_show_length_vii_bool }
              { \msg_term:nnnn { enumext } { list-lengths-not-nested } { vii } { enumext* } }
          }
          {
            \@@_fake_item_viii:
            \bool_if:cT { l_@@_show_length_#1_bool }
              { \msg_term:nnnn { enumext } { list-lengths-not-nested } { #1 } { keyans* } }
          }
      }
  }
\clist_map_inline:nn { vii, viii } { \@@_tmp:n {#1} }
%    \end{macrocode}
% \end{macro}
%
% \subsection{The environment \env{enumext}}\label{env:enumext}
%
% \begin{macro}{enumext}
%    We create the \myenv*{enumext} environment based on \myenv{list}
%    environment by levels.
% \iffalse
%% Definition of |enumext| environment.
% \fi
%    \begin{macrocode}
\NewDocumentEnvironment{enumext}{ O{} }
  {
    \@@_current_env:
    \@@_safe_exec:
    \@@_parse_keys:n {#1}
    \@@_before_list:
    \@@_start_store_level:
    \@@_start_list:nn
      { \tl_use:c { l_@@_label_ \@@_level: _tl } }
      {
        \use:c { @@_list_arg_two_ \@@_level: : }
        \@@_before_keys_exec:
      }
    \@@_after_args_exec:
  }
  {
    \@@_stop_list:
    \@@_stop_store_level:
    \@@_after_list:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_safe_exec:}
%    First check the maximum nesting level for the \myenv*{enumext}
%    environment and set the state of the booleans vars
%    \myvarenv{l__@@_standar_bool} and \myvarenv{g__@@_standar_bool} to
%    \emph{\enquote{true}}, the latter only if the environment is NOT nested
%    in the \myenv*{enumext*} environment.
% \iffalse
%% Increment deep-level for |enumext|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_safe_exec:
  {
    \int_incr:N \l_@@_level_int
    \int_compare:nNnT { \l_@@_level_int } > { 4 }
      { \msg_fatal:nn { enumext } { list-too-deep } }
    \bool_set_true:N \l_@@_standar_bool
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_parse_keys:n}
%    Parse \myoarg[type=tt]{key \textnormal{\textcolor{gray}{=}} val}
%    by levels in \myenv*{enumext}. If the variable
%    \cs{l_@@_store_active_bool} is true it will call the function
%    \cs{@@_parse_store_keys:n} and reprocess the \mymeta{keys} to pass them to the
%    storage sequence.
% \iffalse
%% Parse |key=val| and store keys for \printkeyans.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_parse_keys:n #1
  {
    \tl_if_novalue:nF {#1}
      {
        \str_clear:N \l_@@_series_str
        \int_compare:nNnTF { \l_@@_level_int } = { 1 }
          {
            \keys_set:nn { enumext / level-1 } {#1}
            \@@_parse_series_resume:n {#1}
          }
          {
            \exp_args:Ne \keys_set:nn
              { enumext / level-\int_use:N \l_@@_level_int } {#1}
          }
        \bool_if:NT \l_@@_store_active_bool
          {
            \@@_parse_store_keys:n {#1}
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_parse_store_keys:n}
%   The function \cs{@@_parse_store_keys:n} searches for the values of the
%   \mykey{columns} and \mykey{columns-sep} keys in the optional arguments
%   per-level in \myenv*{enumext} environment as long as the starred
%   versions of the \mykey{columns*} and \mykey{columns-sep*} keys are not
%   active. The captured values are stored in the variable
%   \myvarenv{l__@@_store_opt_X_tl} which is used by the function
%   \cs{@@_store_level_open:}.
% \iffalse
%% Set |key=val| (store keys) for \printkeyans.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_parse_store_keys:n #1
  {
    \bool_if:cF { l_@@_store_columns_ \@@_level: _bool }
      {
        \regex_match:nnT { \b columns\b } {#1}
          {
            \int_set_eq:cc
              { l_@@_store_columns_ \@@_level: _int }
              { l_@@_columns_  \@@_level: _int }
            \tl_put_right:ce { l_@@_store_opt_ \@@_level: _tl }
              {
                columns = \exp_not:v { l_@@_store_columns_ \@@_level: _int },
              }
          }
      }
    \bool_if:cF { l_@@_store_columns_sep_ \@@_level: _bool }
      {
        \regex_match:nnT { \b columns-sep \b} {#1}
          {
            \dim_set_eq:cc
              { l_@@_store_columns_sep_ \__@@_level: _dim }
              { l_@@_columns_sep_  \__@@_level: _dim }
            \tl_put_right:ce { l_@@_store_opt_ \@@_level: _tl }
              {
                columns-sep = \exp_not:v { l_@@_store_columns_sep_ \@@_level: _dim },
              }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_start_store_level:, \@@_stop_store_level:}
%    The \cs{@@_start_store_level:} and \cs{@@_stop_store_level:}
%    functions activate the level saving mechanism for storage in
%    \mymeta{sequence} of the \ics*{anskey} command.
%
%    If \myenv*{enumext} are nested in \myenv*{enumext*} add \myvarenv{__@@_store_level_open:}
%    to preserve the stored structure.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_start_store_level:
  {
    \bool_lazy_all:nT
      {
        { \bool_if_p:N \l_@@_store_active_bool }
        { \bool_not_p:n { \l_@@_keyans_env_bool } }
        { \bool_not_p:n { \g_@@_starred_bool } }
      }
      {
        \int_compare:nNnT { \l_@@_level_int } > { 1 }
          {
            \bool_set_true:c { l_@@_store_upper_level_ \@@_level: _bool }
            \@@_store_level_open:
          }
      }
    \bool_lazy_all:nT
      {
        { \bool_if_p:N \l_@@_store_active_bool }
        { \bool_not_p:n { \l_@@_keyans_env_bool } }
        { \bool_if_p:N \g_@@_starred_bool }
      }
      {
        \int_compare:nNnT { \l_@@_level_int } > { 0 }
          {
            \bool_set_true:c { l_@@_store_upper_level_ \@@_level: _bool }
            \@@_store_level_open:
          }
      }
  }
\cs_new_protected:Nn \@@_stop_store_level:
  {
    \bool_if:cT { l_@@_store_upper_level_ \@@_level: _bool }
      {
        \@@_store_level_close:
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_before_list:}
%    The function \cs{@@_before_list:} will add the vertical
%    spacing on the environment if the \mykey{above} key is active next to
%    the \mymarg[type=tt]{code} defined by the \mykey{before*} key if it is active.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_before_list:
  {
    \@@_vspace_above:
    \@@_before_args_exec:
%    \end{macrocode}
%    The function \cs{@@_check_ans_exec:}  will handle the check
%    answer mechanism, which will be activated with the \mykey{check-ans}
%    key.
%    \begin{macrocode}
    \@@_check_ans_exec:
%    \end{macrocode}
%    When the \mykey{mini-env} key is active it will set the value of the
%    \myvarenv{l__@@_minipage_right_X_dim} to be the \emph{width} of the \myvarenv*{__@@_mini_env*}
%    environment on the \emph{\enquote{right side}}, using this value together with the value
%    of the \myvarenv{l__@@_minipage_hsep_X_dim} set by the \mykey{mini-sep} key,
%    the value of \myvarenv{l__@@_minipage_left_X_dim} will be set, which will be
%    the \emph{width} of \myvarenv*{__@@_mini_env*} environment on the \emph{\enquote{left side}}, always having
%    a current \ics{linewidth} as \emph{maximum width} between them.
% \iffalse
%% Set |mini-env| width value.
% \fi
%    \begin{macrocode}
    \dim_compare:nNnT
      { \dim_use:c { l_@@_minipage_right_ \@@_level: _dim } } > { \c_zero_dim }
      {
        \dim_set:cn { l_@@_minipage_left_ \@@_level: _dim }
          {
            \linewidth
            - \dim_use:c { l_@@_minipage_right_ \@@_level: _dim }
            - \dim_use:c { l_@@_minipage_hsep_ \@@_level: _dim }
          }
%    \end{macrocode}
%    The boolean variable \myvarenv{l__@@_minipage_active_X_bool} will be
%    activated and the integer variable \cs{g_@@_minipage_stat_int}
%    used by the \ics*{miniright} command will be incremented, then
%    the function \cs{@@_mini_addvspace:} is called and the
%    \myvarenv*{__@@_mini_env*} environment on the \emph{\enquote{left side}} will be initialized followed by the
%    \emph{\enquote{vertical spacing}} applied to preserve
%    the \emph{\enquote{baseline}} between the \emph{left} and \emph{right} side
%    environments.
%    After these actions, the function \cs{@@_multicols_start:} is
%    called to handle the \myenv{multicols} environment.
%    \begin{important}*
%      Here we use the plain \hologo{TeX} macro
%      |\nointerlineskip| to prevent baseline \emph{\enquote{glue}} being
%      added between the next pair of boxes in a \emph{vertical list}.
%    \end{important}
%
% \iffalse
%% Use internal minipage with |\nointerlineskip| and |\addvspace| here
% \fi
%    \begin{macrocode}
        \bool_set_true:c { l_@@_minipage_active_ \@@_level: _bool }
        \int_gincr:N \g_@@_minipage_stat_int
        \@@_mini_addvspace:
        \nointerlineskip\noindent
        \begin{@@_mini_env*}
          { \dim_use:c { l_@@_minipage_left_ \@@_level: _dim } }
      }
    \@@_multicols_start:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_multicols_start:}
%    The function \cs{@@_multicols_start:} will start the
%    \myenv{multicols} environment according to the value passed by the
%    \mykey{columns} key, then set the default value for
%    \ics{columnsep} when \mykey{columns-sep}=\mydim{0pt} and set the value of \ics{multicolsep} equal to zero and leave
%    \ics{columnseprule} equal to zero for inner levels.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_multicols_start:
  {
    \int_compare:nNnT
      { \int_use:c { l_@@_columns_ \@@_level: _int } } > { 1 }
      {
        \dim_compare:nNnT
          { \dim_use:c { l_@@_columns_sep_ \@@_level: _dim } } = { \c_zero_dim }
          {
            \dim_set:cn { l_@@_columns_sep_ \@@_level: _dim }
              {
                ( \dim_use:c { l_@@_labelwidth_ \@@_level: _dim }
                  + \dim_use:c { l_@@_labelsep_ \@@_level: _dim }
                ) / \int_use:c { l_@@_columns_ \@@_level: _int }
                - \dim_use:c { l_@@_listoffset_ \@@_level: _dim }
              }
          }
        \dim_set_eq:Nc \columnsep { l_@@_columns_sep_ \@@_level: _dim  }
        \skip_zero:N \multicolsep
        \int_compare:nNnT { \l_@@_level_int } > { 1 }
          {
            \dim_zero:N \columnseprule
          }
%    \end{macrocode}
%    We will calculate the \emph{vertical spacing} settings for the
%    \myenv{multicols} environment using the function \cs{@@_multi_addvspace:},
%    apply our \emph{\enquote{vertical adjust spacing}}, then start the
%    \myenv{multicols} environment.
%    \begin{macrocode}
        \bool_if:cF { l_@@_minipage_active_ \@@_level: _bool }
          {
            \@@_multi_addvspace:
          }
        \raggedcolumns
        \begin{multicols}{ \int_use:c { l_@@_columns_ \@@_level: _int } }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_multicols_stop:}
%    The function \cs{@@_multicols_stop:} will stop the
%    \myenv{multicols} environment. If the boolean variable
%    \myvarenv{l__@@_minipage_active_X_bool} is false (not nested in
%    \myvarenv*{__@@_mini_env*}) we will apply our
%    \emph{\enquote{vertical adjust}} spacing.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_multicols_stop:
  {
    \int_compare:nNnT
      { \int_use:c { l_@@_columns_ \@@_level: _int } } > { 1 }
      {
        \end{multicols}
        \bool_if:cF { l_@@_minipage_active_ \@@_level: _bool }
          {
            \par\addvspace{ \skip_use:c { l_@@_multicols_below_ \@@_level: _skip } }
          }
      }
%    \end{macrocode}
%    If the \mykey{check-ans} key is active, we set the boolean variable
%    \cs{g_@@_check_ans_show_bool} to true and copy the stored name to
%    the variable \cs{g_@@_store_name_tl}. These variables will be used
%    by the function \cs{@@_after_env:n} to display the result of the
%    internal check answer mechanism in the terminal.
%    \begin{macrocode}
    \bool_lazy_and:nnT
      { \bool_if_p:N \l_@@_check_ans_bool }
      { \bool_not_p:n { \g_@@_starred_bool } }
      {
        \bool_gset_true:N \g_@@_check_ans_show_bool
        \tl_gset:NV \g_@@_store_name_tl \l_@@_store_name_tl
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_after_list:}
%    The function \cs{@@_after_list:}  will will check the state of
%    the boolean variable \myvarenv{l__@@_minipage_active_X_bool}, if it is
%    \enquote{true} a small test will be executed to check if we have
%    omitted the use of \ics*{miniright} (the \myvarenv*{__@@_mini_env*}
%    environment has not been closed), then close
%    \myvarenv*{__@@_mini_env*} and add the \emph{adjusted vertical
%    space} \cs{l_@@_minipage_after_skip}, otherwise we will close
%    the \myenv{multicols} environment.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_after_list:
  {
    \bool_if:cTF { l_@@_minipage_active_ \@@_level: _bool }
      {
        \int_compare:nNnT { \g_@@_minipage_stat_int } = { 1 }
          {
            \msg_warning:nn { enumext } { missing-miniright }
            \miniright
          }
        \int_gzero:N \g_@@_minipage_stat_int
        \end{@@_mini_env*}
        \par\addvspace { \l_@@_minipage_after_skip }
      }
      { \@@_multicols_stop: }
%    \end{macrocode}
%    Now apply the \mymarg[type=tt]{code} handled by the \mykey{after} key
%    together with the \emph{vertical space} handled by the \mykey{below} key if
%    they are present.
%    \begin{macrocode}
    \@@_after_stop_list:
    \@@_vspace_below:
%    \end{macrocode}
%   Finally save the \emph{current value} of the counter in
%   \cs{g_@@_resume_int} for the \mykey{resume} key. If the
%   \mykey{save-ans} key is active, it will create the integer variable
%   for the \mykey{resume} key, we only have to assign it the
%   value of the current counter.
%    \begin{macrocode}
    \bool_set_false:N \l_@@_standar_bool
    \int_gset_eq:NN \g_@@_resume_int \value{enumXi}
    \int_if_exist:cT { g_@@_resume_ \l_@@_store_name_tl _int }
      {
        \int_gset_eq:cN
          { g_@@_resume_ \l_@@_store_name_tl _int }
          { \value{enumXi} }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% As we don't want our check to be executed \mykey{check-ans} by levels but on the
% complete list, we will take it out of the \myenv*{enumext}
% environment using the \emph{\enquote{hook}} function \cs{@@_after_env:nn}.
% \iffalse
%% Execute |check-ans| key out of |enumext|.
% \fi
%    \begin{macrocode}
\@@_after_env:nn {enumext}
  {
    \int_compare:nNnT { \l_@@_level_int } = { 0 }
      {
        \bool_if:NT \g_@@_check_ans_show_bool
          {
            \@@_check_ans_show:
          }
        \bool_gset_false:N \g_@@_standar_bool
        \bool_gset_false:N \g_@@_check_ans_show_bool
        \tl_gclear:N \g_@@_store_name_tl
      }
  }
%    \end{macrocode}
%
%
% \subsection{The environment \env{keyans}}\label{env:keyans}
%
% The environment \myenv*{keyans} also based on lists.
% The main differences with the \myenv*{enumext} environment are the
% \emph{nesting} and the way the \emph{answers} (choice) will be stored and checked, this
% environment is intended exclusively for \emph{\enquote{multiple choice questions}}.
%
% \begin{macro}{keyans}
%    Now we define the environment \myenv*{keyans} also based on lists.
% \iffalse
%% Definition of |keyans| environment.
% \fi
%    \begin{macrocode}
\NewDocumentEnvironment{keyans}{ O{} }
  {
    \@@_keyans_safe_exec:
    \@@_keyans_parse_keys:n {#1}
    \@@_before_list_v:
    \@@_start_list:nn
      { \tl_use:N \l_@@_label_v_tl }
      {
        \@@_list_arg_two_v:
        \@@_before_keys_exec_v:
      }
    \@@_after_args_exec_v:
  }
  {
    \@@_keyans_check_ans:nn { item }{ keyans }
    \@@_stop_list:
    \@@_after_list_v:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_keyans_safe_exec:}
%   The \myenv*{keyans} environment will only be available if the
%   \mykey{save-ans} key is active and can only be used at the first
%   level within the \myenv*{enumext} environment. We do not want the
%   environment to be nested, so we will set a maximum at this point.
%   If the conditions are not met, an error message will be returned.
% \iffalse
%% Function for check nested level in |keyans|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_safe_exec:
  {
    \bool_if:NF \l_@@_store_active_bool
      {
        \msg_error:nnnn { enumext } { wrong-place }{ keyans }{ save-ans }
      }
    \int_incr:N \l_@@_keyans_level_int
    \bool_set_true:N \l_@@_keyans_env_bool
    % Set false for interfering with enumext nested in keyans (yes, its possible and crayze)
    \bool_set_false:N \l_@@_store_active_bool
    \int_compare:nNnT { \l_@@_keyans_level_int } > { 1 }
      {
        \msg_error:nn { enumext } { keyans-nested }
      }
    \int_compare:nNnT { \l_@@_level_int } > { 1 }
      {
        \msg_error:nn { enumext } { keyans-wrong-level }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_keyans_parse_keys:n}
%    Parse \myoarg[type=tt]{key \textnormal{\textcolor{gray}{=}} val} for
%    \myenv*{keyans} environment.
% \iffalse
%% Function for parse |key=val| in |keyans|. Replace \exp_args:Nx \keys_set:nn => \keys_set:nx => => \keys_set:nn
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_keyans_parse_keys:n #1
  {
    \keys_set:nn { enumext / keyans } {#1}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_before_list_v:}
%    The function \cs{@@_before_list_v:} will add the \emph{vertical
%    spacing above} the environment if the \mykey{above} key is active next to
%    the \mymeta{code} defined by the \mykey{before} key if it is
%    active.
% \iffalse
%% Actions before start |keyans| environment.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_before_list_v:
  {
    \@@_vspace_above_v:
    \@@_before_args_exec_v:
%    \end{macrocode}
%    When the \mykey{mini-env} key is active it will set the value of the
%    \cs{l_@@_minipage_right_v_dim} to be the \emph{width} of the \myvarenv*{__@@_mini_env*}
%    environment on the \emph{left side}, using this value together with the value
%    of the \cs{l_@@_minipage_hsep_v_dim} set by the \mykey{mini-sep} key,
%    the value of \cs{l_@@_minipage_left_v_dim} will be set, which will be
%    the \emph{width} of \myvarenv*{__@@t_mini_env*} environment on the \emph{right side}, always having
%    \ics{linewidth} as the maximum width between them.
%    \begin{macrocode}
    \dim_compare:nNnT { \l_@@_minipage_right_v_dim } > { \c_zero_dim }
      {
        \dim_set:Nn \l_@@_minipage_left_v_dim
          {
            \linewidth - \l_@@_minipage_right_v_dim - \l_@@_minipage_hsep_v_dim
          }
%    \end{macrocode}
%    The boolean variable \cs{l_@@_minipage_active_v_bool} will be
%    activated and the integer variable \cs{g_@@_minipage_stat_int} used
%    by the \ics*{miniright} command will be incremented, then the function
%    \cs{@@_keyans_mini_addvspace:} is called and the
%    \myvarenv*{__@@_mini_env*} environment on \emph{left side} will be
%    initialized followed by the \emph{vertical spacing} \cs{l_@@_minipage_left_skip}.
%    Here we use the plain \hologo{TeX} macro |\nointerlineskip| to prevent
%    baseline \emph{\enquote{glue}} being added between the next pair of
%    boxes in a \emph{vertical list}.
%    \begin{macrocode}
        \bool_set_true:N \l_@@_minipage_active_v_bool
        \int_gincr:N \g_@@_minipage_stat_int
        \@@_keyans_mini_addvspace:
        \nointerlineskip\noindent
        \begin{@@_mini_env*}{ \l_@@_minipage_left_v_dim }
      }
%    \end{macrocode}
%    After these actions, the \cs{@@_keyans_multicols_start:} function is
%    called to handle the \myenv{multicols} environment.
%    \begin{macrocode}
    \@@_keyans_multicols_start:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_keyans_multicols_start:,}
%    The function \cs{@@_keyans_multicols_start:} will start the
%    \myenv{multicols} environment according to the value passed by the
%    \mykey{columns} key.
% \iffalse
%% Activate multicols in |keyans|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_multicols_start:
  {
    \int_compare:nNnT { \l_@@_columns_v_int } > { 1 }
      {
%    \end{macrocode}
%    Set the default value for \ics{columnsep} when \mykey{columns-sep} key is \mydim{0pt}.
%    \begin{macrocode}
        \dim_compare:nNnT { \l_@@_columns_sep_v_dim } = { \c_zero_dim }
          {
            \dim_set:Nn \l_@@_columns_sep_v_dim
              {
                (
                  \l_@@_labelwidth_v_dim + \l_@@_labelsep_v_dim
                ) / \l_@@_columns_v_int
               - \l_@@_listoffset_v_dim
              }
          }
        \dim_set_eq:NN \columnsep \l_@@_columns_sep_v_dim
%    \end{macrocode}
%    Then we will set the value of \ics{multicolsep} and
%    \ics{columnseprule} equal to zero (we do not want a vertical rule in
%    this environment).
%    \begin{macrocode}
        \skip_zero:N \multicolsep
        \dim_zero:N \columnseprule
%    \end{macrocode}
%    We will calculate the \emph{vertical spacing} settings for the
%    \myenv{multicols} environment using the function
%    \cs{@@_keyans_multi_addvspace:} and apply our \emph{\enquote{vertical adjust spacing}},
%    then start the \myenv{multicols} environment.
%    \begin{macrocode}
        \bool_if:NF \l_@@_minipage_active_v_bool
          {
            \@@_keyans_multi_addvspace:
          }
        \raggedcolumns
        \begin{multicols}{ \l_@@_columns_v_int }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_keyans_multicols_stop:}
%    The function \cs{@@_keyans_multicols_stop:} will stop the
%    \myenv{multicols} environment. If the boolean variable
%    \cs{l_@@_minipage_active_v_bool} is false (not nested in
%    \myvarenv*{__@@_mini_env*}) we will apply our vertical
%    \enquote{adjust} spacing.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_multicols_stop:
  {
    \int_compare:nNnT { \l_@@_columns_v_int } > { 1 }
      {
        \end{multicols}
        \bool_if:NF \l_@@_minipage_active_v_bool
          {
            \par\addvspace{ \l_@@_multicols_below_v_skip }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_after_list_v:,}
%    The function \cs{@@_after_list_v:}  will will check the state of
%    the boolean variable \cs{l_@@_minipage_active_v_bool}, if it is
%    \enquote{true} a small test will be executed to check if we have
%    omitted the use of \ics*{miniright} (the \myvarenv*{__@@_mini_env*}
%    environment has not been closed), then close \myvarenv*{__@@_mini_env*} and
%    add the vertical adjustment space \cs{l_@@_minipage_after_skip},
%    otherwise we will close the \myenv{multicols} environment.
% \iffalse
%% Actions after |keyans|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_after_list_v:
  {
    \bool_if:NTF \l_@@_minipage_active_v_bool
      {
        \int_compare:nNnT { \g_@@_minipage_stat_int } = { 1 }
          {
            \msg_warning:nn { enumext } { missing-miniright }
            \miniright
          }
        \int_gzero:N \g_@@_minipage_stat_int
        \end{@@_mini_env*}
        \par\addvspace{ \l_@@_minipage_after_skip }
      }
      { \@@_keyans_multicols_stop: }
%    \end{macrocode}
%    Finally we will apply the \mymarg[type=tt]{code} handled by the \mykey{after} key
%    together with the \emph{vertical space} handled by the \mykey{below} key if
%    they are present.
%    \begin{macrocode}
    \bool_set_false:N \l_@@_keyans_env_bool
    \@@_after_stop_list_v:
    \@@_vspace_below_v:
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{The environment \env{keyanspic} and \cs{anspic}}
%
% The \myenv*{keyanspic} environment is a list-based environment that
% uses the same configuration for \emph{\enquote{spacing}} and \mymeta{label}
% as the \myenv*{keyans} environment, but it does not use \ics{item}.
%
% The contents are passed to the environment by means of the \ics*{anspic}
% command and are placed inside \myenv{minipage} environments, with the
% \mymeta{label} underneath, adjusting widths according to the
% options passed to the environment.
%
% Again it is necessary to \enquote{adjust} the spacing, both vertical and
% horizontal, to obtain an output like the one shown in the figure
% \ref{fig:keyanspic}.
%
% \begin{figure}[ht]
%   \centering
%   \begin{tikzpicture}[line cap=round,line join=round,x=0.8cm,y=0.8cm,every node/.style={font=\footnotesize}]
%     % space above
%     \draw[color=white] (7.0,6.10) rectangle (17.5,6.5) node[pos=.5,text=black]%
%       { \textcolor{blue}{\texttt{space above keyanspic}} };
%     % space between
%     \draw[color=white] (7.0,4.5) rectangle (17.5,4.9) node[pos=.5,text=black]%
%       { \textcolor{blue}{\texttt{\textbackslash{}parsep [+\textbackslash{}itemsep]}} };
%     % space below
%     \draw[color=white] (7.0,2.9) rectangle (17.5,3.3) node[pos=.5,text=black]%
%       { \textcolor{blue}{\texttt{space below keyanspic}} };
%     % labelwidth
%     \draw[<->,color=gray] (2.0,7.0) --node[above,text=optcolor]{\vphantom{p}\texttt{labelwidth}} (5.0,7.0);
%     \draw[<->,color=gray] (5.0,7.0) --node[above,text=optcolor]{\texttt{labelsep}} (7.0,7.0);
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (2.0,6.5) rectangle (5.0,6.85);% labelwidth
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (5.0,6.5) rectangle (7.0,6.85);% labelsep
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,6.5) rectangle (17.5,6.85);% item width
%     % minipage one
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,5.25) rectangle (10.5,6.10) node[pos=.5,text=black]%
%       {\begin{tabular}{c}
%          \texttt{minipage one} \\
%          \textcolor{blue}{\emph{drawing or tabular}}
%        \end{tabular}};
%     % label one
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,4.9) rectangle (10.5,5.25) node[pos=.5,text=black]%
%       { \textcolor{blue}{\texttt{label}} };
%     % minipage two
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (10.5,5.25) rectangle (14,6.10) node[pos=.5,text=black]%
%       {\begin{tabular}{c}
%          \texttt{minipage two} \\
%          \textcolor{blue}{\emph{drawing or tabular}}
%        \end{tabular}};
%     % label two
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (10.5,4.9) rectangle (14,5.25) node[pos=.5,text=black]%
%       { \textcolor{blue}{\texttt{label}} };
%     % minipage three
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (14,5.25) rectangle (17.5,6.10) node[pos=.5,text=black]%
%      {\begin{tabular}{c}
%          \texttt{minipage three} \\
%          \textcolor{blue}{\emph{drawing or tabular}}
%        \end{tabular}};
%     % label three
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (14,4.9) rectangle (17.5,5.25) node[pos=.5,text=black]%
%       { \textcolor{blue}{\texttt{label}} };
%     % minipage four
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,3.65) rectangle (12.25,4.5) node[pos=.5,text=black]%
%      {\begin{tabular}{c}
%          \texttt{minipage four} \\
%          \textcolor{blue}{\emph{drawing or tabular}}
%        \end{tabular}};
%     % label four
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,3.3) rectangle (12.25,3.65) node[pos=.5,text=black]%
%       { \textcolor{blue}{\texttt{label}} };
%     % minipage five
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (12.25,3.65) rectangle (17.5,4.5) node[pos=.5,text=black]%
%      {\begin{tabular}{c}
%          \texttt{minipage five} \\
%          \textcolor{blue}{\emph{drawing or tabular}}
%        \end{tabular}};
%     % label five
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (12.25,3.3) rectangle (17.5,3.65) node[pos=.5,text=black]%
%       { \textcolor{blue}{\texttt{label}} };
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (2.0,2.55) rectangle (5.0,2.9);% labelwidth
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (5.0,2.55) rectangle (7.0,2.9);% labelsep
%     \draw[color=lightgray,fill=lightgray,fill opacity=0.15] (7.0,2.55) rectangle (17.5,2.9);% item width
%   \end{tikzpicture}
%   \caption{Representation of the \myenv*{keyanspic} spacing in \mypkg*{enumext}.}
%   \label{fig:keyanspic}
% \end{figure}
%
%  This implementation is adapted from the answer given by Enrico Gregorio
%  in \href{https://tex.stackexchange.com/a/577705/7832}{How to process the body of an environment and divide it by a \textbackslash macro?}.
%
% \subsubsection{The command \cs{anspic}}\label{cmd:anspic}
%
% \begin{macro}{\anspic}
%    The \ics*{anspic} command take three arguments, the
%    starred (|*|) versions \ics*{anspic*} and \ics*{anspic*}\myoarg[type=tt]{content}
%    store the current \mymeta{label} next to the
%    \myoarg[type=tt]{content} if it is present in the \mymeta{sequence} and \mymeta{prop list}
%    defined by \mykey{save-ans} key. This command is used as a
%    replacement for \ics{item} in the \myenv*{keyanspic} environment.
% \iffalse
%% Define |\anspic| for |keyanspic|.
% \fi
%    \begin{macrocode}
\NewDocumentCommand \anspic { s o +m }
  {
%    \end{macrocode}
%    We check that the command is active in the \myenv*{keyanspic}
%    environment only if the \mykey{save-ans} key is present, otherwise
%    we return an error.
%    \begin{macrocode}
    \bool_if:NF \l_@@_store_active_bool
      {
        \msg_error:nnnn { enumext } { wrong-place }{ keyanspic }{ save-ans }
      }
    \int_compare:nNnT { \l_@@_level_int } > { 1 }
      {
        \msg_error:nn { enumext } { keyanspic-wrong-level }
      }
    \int_compare:nNnT { \l_@@_keyans_level_int } = { 1 }
      {
        \msg_error:nnnn { enumext } { command-wrong-place }{ anspic }{ keyans }
      }
%    \end{macrocode}
%    The three arguments are handled by the function
%    \cs{@@_keyans_anspic_code:nnn} and stored in the sequence
%    \cs{l_@@_keyans_pic_body_seq} which is processed by the
%    \myenv*{keyanspic} environment.
%    \begin{macrocode}
    \seq_put_right:Nn \l_@@_keyans_pic_body_seq
      {
        \@@_keyans_anspic_code:nnn { #1 } { #2 } { #3 }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_keyans_anspic_code:nnn,}
%    The function \cs{@@_keyans_anspic_code:nnn} will be in charge of
%    handling the \emph{\enquote{counter}} and \mymeta{label},
%    which will have the same configuration as the \myenv*{keyans}
%    environment.
% \iffalse
%% Internal code for |\anspic|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_anspic_code:nnn
  {
    \stepcounter { enumXvi }
    #3 \\
    \bool_if:nT { #1 }
      {
        \@@_keyans_addto_prop:n { #2 }
        \@@_keyans_store_ref:
        \@@_keyans_addto_seq:n { #2 }
        \bool_lazy_or:nnT
          { \bool_if_p:N \l_@@_show_answer_bool }
          { \bool_if_p:N \l_@@_show_position_bool }
          {
            \tl_set_eq:NN \l_@@_label_v_tl \l_@@_label_vi_tl
            \@@_keyans_show_left:n { #2 }
            \tl_set_eq:NN \l_@@_label_vi_tl \l_@@_label_v_tl
          }
      }
    \tl_use:N \l_@@_label_font_style_v_tl
    \@@_wrapper_label_v:n { \l_@@_label_vi_tl } \@@_keyans_show_item_opt:
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{The environment \env{keyanspic}}\label{env:keyanspic}
%
% \begin{macro}{keyanspic}
%    Now we define the environment \myenv*{keyanspic} based on list.
%    The optional argument \myoarg[type=tt]{number above, number below}
%    will determine the number of \myenv{minipage} environments that
%    will be above and below separated by \ics{parsep}+\ics{itemsep} within it.
% \iffalse
%% Define |keyanspic| environment.
% \fi
%    \begin{macrocode}
\NewDocumentEnvironment{keyanspic}{ o }
  {
    \@@_keyans_pic_safe_exec:
    \@@_start_list:nn
      { }
      {
        \@@_keyans_pic_arg_two:
      }
%    \end{macrocode}
%    We apply the \enquote{adjusted} vertical spacing above the environment
%    \begin{macrocode}
    \vspace { \l_@@_keyans_pic_above_skip }
  }
%    \end{macrocode}
%    If the optional argument is not present, the number of times the
%    \ics*{anspic} command appears will be counted from
%    \cs{l_@@_keyans_pic_body_seq} and placed in \myenv{minipage}
%    environments on a single line. Finally we check if \ics*{anspic*}
%    has been used, set the counter to zero and apply our
%    \enquote{adjusted} vertical space below the environment.
%    \begin{macrocode}
  {
    \tl_if_novalue:nTF { #1 }
      {
        \@@_keyans_pic_do:e { \seq_count:N \l_@@_keyans_pic_body_seq }
      }
      { \@@_keyans_pic_do:n { #1 } }
    \@@_stop_list:
    \@@_keyans_check_ans:nn { anspic } { keyanspic }
    \setcounter { enumXvi } { 0 }
    \vspace { \l_@@_topsep_v_skip }
    %\bool_set_false:N \l_@@_store_active_bool
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_keyans_pic_safe_exec:}
%    The function \cs{@@_keyans_pic_safe_exec:} check nested and
%    level position inside the \myenv*{enumext} environment.
% \iffalse
%% Internal code for |keyanspic| environment.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_pic_safe_exec:
  {
    \int_incr:N \l_@@_keyans_pic_level_int
    \int_compare:nNnT { \l_@@_keyans_pic_level_int } > { 1 }
      {
        \msg_error:nn { enumext } { keyanspic-nested }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_keyans_pic_skip_abs:N}
%    The function \cs{@@_keyans_pic_skip_abs:N} will return a positive
%    value \ics{parsep}.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_keyans_pic_skip_abs:N #1
  {
    \dim_compare:nNnT { #1 } < { 0pt }
      { \skip_set:Nn #1 { -#1 } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_keyans_pic_arg_two:}
%    The function \cs{@@_keyans_pic_arg_two:} will be used in the
%    second argument of the \cs{@@_start_list:nn} function that defines
%    the \myenv*{keyanspic} environment, it will handle the setting of
%    spaces.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_pic_arg_two:
  {
%    \end{macrocode}
%    The first thing to do is to set the boolean variable
%    \cs{l_@@_leftmargin_tmp_v_bool} handled by the \mykey{list-indent} key
%    to false, then we copy the definition of the second list argument from
%    the \myenv*{keyans} environment.
%    \begin{macrocode}
    \bool_set_false:N \l_@@_leftmargin_tmp_v_bool
    \@@_list_arg_two_v:
%    \end{macrocode}
%   We will add the value of \ics{itemsep} to \ics{parsep} which we will
%   use as vertical spacing between the above and below \myenv{minipage}
%   environments. and adjust the value of |\leftmargin|, the label and
%   counter are handled directly by the \ics*{anspic} command.
%   Then we make equal to zero \ics{labelwidth}, \ics{labelsep}, \ics{partopsep}
%   and \ics{itemsep} so that the horizontal and vertical spacing is not affected.
%    \begin{macrocode}
    \skip_add:Nn \parsep { \itemsep }
    \dim_add:Nn  \leftmargin { -\labelwidth - \labelsep }
    \dim_zero:N  \labelwidth
    \dim_zero:N  \listparindent
    \dim_zero:N  \labelsep
    \skip_zero:N \partopsep
    \skip_zero:N \itemsep
%    \end{macrocode}
%    We set the value of \cs{l_@@_keyans_pic_above_skip} which we will use
%    to apply our \enquote{adjust} space above \myenv*{keyanspic}, finally
%    we call \cs{@@_item_std:w} followed by \cs{scan_stop:} to prevent the error
%    message returned by \hologo{LaTeX} when not using the \ics{item}
%    command.
%    \begin{macrocode}
    \@@_keyans_pic_skip_abs:N \parsep
    \skip_set:Nn \l_@@_keyans_pic_above_skip
      {
        \box_dp:N \strutbox
        + \l_@@_topsep_v_skip
        - \parsep
      }
    \@@_item_std:w \scan_stop:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_keyans_pic_do:n, \@@_keyans_pic_do:e}
%    The optional argument is split by comma and is handled directly by
%    the function \cs{@@_keyans_pic_do:n} and passed to the function
%    \cs{@@_keyans_pic_row:n}.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_pic_do:n
  {
    \clist_map_function:nN { #1 } \@@_keyans_pic_row:n
  }
\cs_generate_variant:Nn \@@_keyans_pic_do:n { e }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_keyans_pic_row:n}
%    The function \cs{@@_keyans_pic_row:n} will set the widths for
%    the \myenv{minipage} environments and place the content \mymeta{stored}
%    by \ics*{anspic*} in the \cs{l_@@_keyans_pic_body_seq} sequence inside
%    them.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_keyans_pic_row:n
  {
    \dim_set:Nn \l_@@_keyans_pic_width_dim { \linewidth / #1 }
    \int_set:Nn \l_@@_keyans_pic_above_int { \l_@@_keyans_pic_below_int }
    \int_set:Nn \l_@@_keyans_pic_below_int { \l_@@_keyans_pic_above_int + #1 }
    \int_step_inline:nnn
      { \l_@@_keyans_pic_above_int + 1 }
      { \l_@@_keyans_pic_below_int }
      {
        \@@_minipage:w [ b ]{ \l_@@_keyans_pic_width_dim }
          \centering
          \seq_item:Nn \l_@@_keyans_pic_body_seq { ##1 }
        \@@_endminipage:
      }
    \par
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{The \env{enumext*} environment}\label{env:starred}
%
% Generating horizontal list environments is NOT as simple as standard
% \hologo{LaTeX} list environments. The fundamental part of the code is adapted
% from the \mypkg{shortlst} package to a more modern version using \mypkg{expl3}.
% It is not possible to redefine \ics{item} and \ics{makelabel} as in
% the non starred versions (at least I have not achieved it) and as we
% will make it behave differently, we have no other option than to define
% a cascade of functions.
%
% To achieve the horizontal list environment we will capture the \ics{item}
% command and the content of this in an plain \myenv{lrbox} box using \ics{makebox} for
% the \mykey{label} and a \myenv{minipage} environment for the content passed to
% \ics{item}, we will also add the optional argument \myparg{number} to \ics{item}
% to be able to \emph{join columns} horizontally, in simple terms, we want
% \ics{item} to behave in the same way as in the \myenv*{enumext} environment but
% adding an optional first argument \myparg{number}.
%
%
% \subsubsection{Functions for item box width}
%
% \begin{macro}{\@@_starred_columns_set_vii:}
%    We set the default value for the width of the box containing the
%    content of the items and create \ics*{itemwidth} in a public form.
% \iffalse
%% Define default columns width
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_starred_columns_set_vii:
  {
    \dim_compare:nNnT { \l_@@_columns_sep_vii_dim } = { \c_zero_dim }
      {
        \dim_set:Nn \l_@@_columns_sep_vii_dim
          {
            ( \l_@@_labelwidth_vii_dim + \l_@@_labelsep_vii_dim )
            / \l_@@_columns_vii_int
          }
      }
    \int_set:Nn \l_@@_tmpa_vii_int { \l_@@_columns_vii_int - \c_one_int }
    \dim_set:Nn \l_@@_item_width_vii_dim
      {
        ( \linewidth - \l_@@_columns_sep_vii_dim * \l_@@_tmpa_vii_int )
        / \l_@@_columns_vii_int - \l_@@_labelwidth_vii_dim
        - \l_@@_labelsep_vii_dim
      }
    \dim_zero_new:N \itemwidth
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_starred_joined_item_vii:n}
%    The function \cs{@@_starred_joined_item_vii:n} will set the \emph{width} of the
%    box in which the content passed to \ics*{item}\myparg{number} will be
%    stored together with the value of \ics*{itemwidth}.
%
% \iffalse
%% Set width for joined item's for |enumext*|
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_starred_joined_item_vii:n #1
  {
    \int_set:Nn \l_@@_joined_item_vii_int {#1}
    \int_compare:nNnT { \l_@@_joined_item_vii_int } > { \l_@@_columns_vii_int }
      {
        \msg_warning:nnee { enumext } { item-joined }
          { \int_use:N \l_@@_joined_item_vii_int }
          { \int_use:N \l_@@_columns_vii_int }
        \int_set:Nn \l_@@_joined_item_vii_int
          {
            \l_@@_columns_vii_int - \l_@@_item_column_pos_vii_int + \c_one_int
          }
      }
    \int_compare:nNnT
      { \l_@@_joined_item_vii_int }
        >
      { \l_@@_columns_vii_int - \l_@@_item_column_pos_vii_int + \c_one_int }
      {
        \msg_warning:nnee { enumext } { item-joined-columns }
          { \int_use:N \l_@@_joined_item_vii_int }
          {
            \int_eval:n
              { \l_@@_columns_vii_int - \l_@@_item_column_pos_vii_int + \c_one_int }
          }
        \int_set:Nn \l_@@_joined_item_vii_int
          {
            \l_@@_columns_vii_int - \l_@@_item_column_pos_vii_int + \c_one_int
          }
      }
%    \end{macrocode}
%    Only need if |#1 > 1| (default are set before).
%    \begin{macrocode}
    \int_compare:nNnTF { \l_@@_joined_item_vii_int } > { \c_one_int }
      {
        \int_set_eq:NN \l_@@_joined_item_aux_vii_int \l_@@_joined_item_vii_int
        \int_decr:N \l_@@_joined_item_aux_vii_int
        \int_add:Nn \l_@@_item_column_pos_vii_int { \l_@@_joined_item_aux_vii_int }
        \int_gadd:Nn \g_@@_item_count_all_vii_int { \l_@@_joined_item_aux_vii_int }
        \dim_set:Nn \l_@@_joined_width_vii_dim
          {
            \l_@@_item_width_vii_dim * \l_@@_joined_item_vii_int
            + (  \l_@@_labelwidth_vii_dim + \l_@@_labelsep_vii_dim
               + \l_@@_columns_sep_vii_dim
              )*\l_@@_joined_item_aux_vii_int
          }
        \dim_set_eq:NN \itemwidth \l_@@_joined_width_vii_dim
      }
      {
        \dim_set_eq:NN \l_@@_joined_width_vii_dim \l_@@_item_width_vii_dim
        \dim_set_eq:NN \itemwidth \l_@@_item_width_vii_dim
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_start_mini_vii:}
%
% The implementation of the \mykey{mini-env} key support is almost
% identical to the one used in the \myenv*{enumext} and \myenv*{keyans}
% environments, the difference is that the \myvarenv*{__@@_mini_env*}
% environment on the \emph{\enquote{right side}} is executed
% \emph{\enquote{after}} closing the environment, so it is necessary to
% make a global copy of the variable \cs{l_@@_minipage_right_vii_dim} in
% the variable \cs{g_@@_minipage_right_vii_dim}.
%
% \iffalse
%% Start support for |mini-env| key in |enumext*| environment
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_start_mini_vii:
  {
    \dim_compare:nNnT { \l_@@_minipage_right_vii_dim } > { \c_zero_dim }
      {
        \dim_set:Nn \l_@@_minipage_left_vii_dim
          {
            \linewidth
            - \l_@@_minipage_right_vii_dim
            - \l_@@_minipage_hsep_vii_dim
          }
        \bool_set_true:N \l_@@_minipage_active_vii_bool
        \dim_gset_eq:NN
          \g_@@_minipage_right_vii_dim
          \l_@@_minipage_right_vii_dim
        \@@_mini_addvspace_vii:
        \nointerlineskip\noindent
        \begin{@@_mini_env*}{ \l_@@_minipage_left_vii_dim }
      }
   }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_stop_mini_vii:}
%   The function \cs{@@_stop_mini_vii:} closes the
%   \myvarenv*{__@@_mini_env*} environment on the left side, applies
%   |\hfill| and sets the value of the variable
%   \cs{g_@@_minipage_active_vii_bool} to true which will be used in the
%   function \cs{@@_after_star_env:nn} to execute the
%   \myvarenv*{__@@_mini_env*} on the \emph{\enquote{right side}}.
% \iffalse
%% Stop support for |mini-env| key in |enumext*| environment
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_stop_mini_vii:
  {
    \bool_if:NT \l_@@_minipage_active_vii_bool
      {
        \end{@@_mini_env*}
        \hfill
        \bool_gset_true:N \g_@@_minipage_active_vii_bool
      }
   }
%    \end{macrocode}
%
%    Finally we execute code passed to the \mykey{miniright} key
%    stored in the variable \cs{g_@@_miniright_code_vii_tl} in the
%    \myvarenv*{__@@_mini_env*} environment on the \emph{\enquote{right side}}.
% \iffalse
%% Exec |miniright| key in |enumext*| environment
% \fi
%    \begin{macrocode}
\@@_after_env:nn {enumext*}
  {
    \bool_if:NT \g_@@_minipage_active_vii_bool
      {
        \begin{@@_mini_env*}{ \g_@@_minipage_right_vii_dim }
          \par\addvspace { \g_@@_minipage_right_skip }
          \bool_if:NF \g_@@_minipage_center_vii_bool
            {
              \centering
            }
          \tl_use:N \g_@@_miniright_code_vii_tl % the code
        \end{@@_mini_env*}
        \par\addvspace{ \g_@@_minipage_after_skip }
      }
    \bool_gset_false:N \g_@@_minipage_active_vii_bool
    \bool_gset_true:N \g_@@_minipage_center_vii_bool
    \tl_gclear:N \g_@@_miniright_code_vii_tl
    \dim_gzero:N \g_@@_minipage_right_vii_dim
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{enumext*}
%    First we will generate the environment and we will give a
%    temporary definition to \cs{@@_stop_item_tmp_vii:} equal to
%    \ics{noindent} and next to \ics{item} equal to
%    \cs{@@_start_item_tmp_vii:} which we will redefine later.
% \iffalse
%% Define |enumext*|
% \fi
%    \begin{macrocode}
\NewDocumentEnvironment{enumext*}{ o }
  {
    \@@_current_env:
    \@@_safe_exec_vii:
    \@@_parse_keys_vii:n {#1}
    \@@_before_list_vii:
    \@@_start_store_level_vii:
    \@@_start_list:nn { }
      {
        \@@_list_arg_two_vii:
        \@@_before_keys_exec_vii:
      }
      \@@_starred_columns_set_vii:
      \item[] \scan_stop:
      \cs_set_eq:NN \@@_stop_item_tmp_vii: \noindent
      \cs_set_eq:NN \item \@@_start_item_tmp_vii:
  }
  {
    \@@_stop_item_tmp_vii:
    \@@_remove_extra_parsep_vii:
    \@@_stop_list:
    \@@_stop_store_level_vii:
    \@@_after_list_vii:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_safe_exec_vii:}
%    First check the maximum nesting level for the \myenv*{enumext*}
%    environment then set the vars \cs{l_@@_starred_bool} and \cs{g_@@_starred_bool}.
% \iffalse
%% Test deep-level for |enumext*| and set bool vars.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_safe_exec_vii:
  {
    \int_incr:N \l_@@_level_h_int
    \int_compare:nNnT { \l_@@_level_h_int } > { 1 }
      {
        \msg_error:nn { enumext } { nested }
      }
    \bool_set_true:N \l_@@_starred_bool
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_parse_keys_vii:n}
%    Parse \myoarg[type=tt]{key \textnormal{\textcolor{gray}{=}} val}
%    for \myenv*{enumext*}. If the variable
%    \cs{l_@@_store_active_bool} is true it will call the function
%    \cs{@@_parse_store_keys_vii:n} and reprocess the keys to pass them to the
%    storage sequence.
% \iffalse
%% Parse |key=val| and store keys for |enumext*|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_parse_keys_vii:n #1
  {
    \tl_if_novalue:nF {#1}
      {
        \str_clear:N \l_@@_series_str
        \keys_set:nn { enumext / enumext* } {#1}
        \@@_parse_series_resume:n {#1}
        \bool_if:NT \l_@@_store_active_bool
          {
            \@@_parse_store_keys_vii:n {#1}
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_parse_store_keys_vii:n}
%   The function \cs{@@_parse_store_keys_vii:n} searches for the values of the
%   \mykey{columns} and \mykey{columns-sep} keys in the optional argument
%   in \myenv*{enumext*} environment as long as the starred
%   versions of the \mykey{columns*} and \mykey{columns-sep*} keys are not
%   active. The captured values are stored in the variable
%   \myvarenv{l__@@_store_opt_vii_tl} which is used by the function
%   \cs{@@_store_level_open_vii:}.
% \iffalse
%% Set |key=val| (store keys) for \printkeyans for |enumext*|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_parse_store_keys_vii:n #1
  {
    \bool_if:NF \l_@@_store_columns_vii_bool
      {
        \regex_match:nnT { \b columns\b } {#1}
          {
            \int_set_eq:NN
              \l_@@_store_columns_vii_int
              \l_@@_columns_vii_int
            \tl_put_right:Ne \l_@@_store_opt_vii_tl
              {
                columns = \exp_not:V \l_@@_store_columns_vii_int ,
              }
          }
      }
    \bool_if:NF \l_@@_store_columns_sep_vii_bool
      {
        \regex_match:nnT { \b columns-sep \b} {#1}
          {
            \dim_set_eq:NN
              \l_@@_store_columns_sep_vii_dim
              \l_@@_columns_sep_vii_dim
            \tl_put_right:Ne \l_@@_store_opt_vii_tl
              {
                columns-sep = \exp_not:V \l_@@_store_columns_sep_vii_dim,
              }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_before_list_vii:}
%    The function \cs{@@_before_list_vii:} will add the vertical
%    spacing on the environment if the \mykey{above} key is active next to
%    the \mymarg[type=tt]{code} defined by the \mykey{before*} key if
%    it is active, the call the function \cs{@@_start_mini_vii:} handle by
%    \mykey{mini-env}.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_before_list_vii:
  {
    \@@_vspace_above_vii:
    \@@_check_ans_exec: % need by chek-ans
    \@@_before_args_exec_vii:
    \@@_start_mini_vii:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_after_list_vii:}
%    The function \cs{@@_after_list:} first call the function \cs{@@_stop_mini_vii:},
%    then apply the \mymarg[type=tt]{code} handled by the \mykey{after} key
%    together with the \emph{vertical space} handled by the \mykey{below} key if
%    they are present.
%    Finally set false the vars \cs{g_@@_starred_bool} and \cs{l_@@_starred_bool},
%    save the \emph{current value} of the counter in
%    \cs{g_@@_resume_vii_int} for the \mykey{resume} key. If the
%    \mykey{save-ans} key is active, it will create the integer variable
%    for the \mykey{resume} key, we only have to assign it the
%    value of the current counter.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_after_list_vii:
  {
    \@@_stop_mini_vii:
    \@@_after_stop_list_vii:
    \@@_vspace_below_vii:
    \int_gset_eq:NN \g_@@_resume_vii_int \value{enumXvii}
    \int_if_exist:cT { g_@@_resume_ \l_@@_store_name_tl _int }
      {
        \int_gset_eq:cN
          { g_@@_resume_ \l_@@_store_name_tl _int }
          { \value{enumXvii} }
      }
    \bool_lazy_and:nnT
      { \bool_if_p:N \g_@@_starred_bool }
      { \bool_if_p:N \l_@@_check_ans_bool }
      {
        \bool_gset_true:N \g_@@_check_ans_show_h_bool
        \tl_gset:NV \g_@@_store_name_tl \l_@@_store_name_tl
      }
    %\bool_gset_false:N \g_@@_starred_bool
    \bool_set_false:N \l_@@_starred_bool
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_start_store_level_vii:, \@@_stop_store_level_vii:}
%    The \cs{@@_start_store_level_vii:} and \cs{@@_stop_store_level_vii:}
%    functions activate the level saving mechanism for storage in \mymeta{sequence} of
%    the \ics*{anskey} command if \myenv*{enumext*} are nested in \myenv*{enumext}.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_start_store_level_vii:
  {
    \bool_if:NT \l_@@_store_active_bool
      {
        \int_compare:nNnT { \l_@@_level_int } > { \c_zero_int }
          {
            \@@_store_level_open_vii:
          }
      }
  }
\cs_new_protected:Nn \@@_stop_store_level_vii:
  {
    \bool_if:NT \l_@@_store_active_bool
      {
        \int_compare:nNnT { \l_@@_level_int } > { \c_zero_int }
          {
            \@@_store_level_close_vii:
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{The command \cs{item} in \env{enumext*}}\label{cmd:item-boxed-vii}
%
% \begin{macro}{\@@_start_item_tmp_vii:}
%
% First we will call the function \cs{@@_stop_item_tmp_vii:} that we
% will redefine later, we will increment the value of
% \cs{l_@@_item_column_pos_vii_int} that will count the item's by rows and
% the value of \cs{g_@@_item_count_all_vii_int} that will count the
% total of item's in the environment. After that we will call the
% function \cs{@@_item_peek_args_vii:} that will handle the
% arguments passed to \ics*{item}.
% \iffalse
%% % Start boxed item's for |enumext*|
% \fi
%    \begin{macrocode}
\cs_new_protected_nopar:Nn \@@_start_item_tmp_vii:
  {
    \@@_stop_item_tmp_vii:
    \int_incr:N \l_@@_item_column_pos_vii_int
    \int_gincr:N \g_@@_item_count_all_vii_int
    \@@_item_peek_args_vii:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_item_peek_args_vii:}
%
%    The function \cs{@@_item_peek_args_vii:} will handle the \ics*{item}\myparg{number}.
%    Look for the argument \enquote{\textcolor{MediumOrchid}{\ttfamily (}}, if it is
%    present we will call the function \cs{@@_joined_item_vii:w} \myparg{number}, which is in charge of joining the item's
%    in the same row, in case they are not present we will set the default
%    value \textcolor{gray}{\ttfamily(\mydim{1})}.
% \iffalse
%% Peek argument for \item()*[][] for |enumext*|
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_item_peek_args_vii:
  {
    \peek_meaning:NTF (
      { \@@_joined_item_vii:w }
      { \@@_joined_item_vii:w (1) }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_joined_item_vii:w}
%
%    The function \cs{@@_joined_item_vii:w} will first call the
%    function \cs{@@_starred_joined_item_vii:n} in charge of setting the
%    \emph{width} of the box that will store the content passed to \ics*{item}. Then we
%    will look for the argument \enquote{\textcolor{MediumOrchid}{\ttfamily *}}, if it is present we will call the
%    function \cs{@@_starred_item_vii:w} otherwise we will call the
%    function \cs{@@_standard_item_vii:w}.
% \iffalse
%% Joined item's for |enumext*|
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_joined_item_vii:w (#1)
  {
    \@@_starred_joined_item_vii:n {#1}
    \peek_meaning_remove:NTF *
      { \@@_starred_item_vii:w  }
      { \@@_standard_item_vii:w }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_standard_item_vii:w}
%
% The function \cs{@@_standard_item_vii:w} will first look for the
% argument “|[|”, if present it will set the state of the variable
% \cs{l_@@_wrap_label_opt_vii_bool} equal to the state of the variable
% \cs{l_@@_wrap_label_opt_vii_bool} handled by the key
% \mykey{wrap-label*} and finally execute the \emph{non-enumerated}
% version \ics*{item}\myoarg[type=tt]{custom} by means of the function
% \cs{@@_start_item_vii:w}, otherwise we will set the value of the
% variable \cs{l_@@_wrap_label_vii_bool} handled by the
% \mykey{wrap-label} key to true and set the switch |\if@noitemarg| to
% true to execute the enumerated version of \ics*{item} by means of the
% function \cs{@@_start_item_vii:w} |[| \myvarenv{l__@@_label_vii_tl} |]|.
%
% \iffalse
%% Set \item[opt] for |enumext*|
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_standard_item_vii:w
  {
    \bool_set_false:N \l_@@_item_starred_vii_bool
      \peek_meaning:NTF [
        {
          \bool_set_eq:NN
            \l_@@_wrap_label_vii_bool
            \l_@@_wrap_label_opt_vii_bool
          \@@_start_item_vii:w
        }
        {
          \bool_set_true:N \l_@@_wrap_label_vii_bool
          \legacy_if_set_true:n { @noitemarg }
          \@@_start_item_vii:w [ \l_@@_label_vii_tl ]
        }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_starred_item_vii:w, \@@_starred_item_vii_aux_i:w,
%               \@@_starred_item_vii_aux_ii:w, \@@_starred_item_vii_aux_iii:w,}
%
% The function \cs{@@_starred_item_vii:w} together with the specified
% auxiliary functions |aux_i:w|, |aux_ii:w|, and |aux_iii:w| execute \ics*{item*},
% \ics*{item*}\myoarg[type=tt]{symbol} and
% \ics*{item*}\myoarg[type=tt]{symbol}\myoarg[type=tt]{offset}.
%
% \iffalse
%% Set \item*[sym][sep] for |enumext*| environment.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_starred_item_vii:w
  {
    \bool_set_true:N \l_@@_item_starred_vii_bool
    \bool_set_true:N \l_@@_wrap_label_vii_bool
    \peek_meaning:NTF [
      { \@@_starred_item_vii_aux_i:w }
      { \@@_starred_item_vii_aux_ii:w }
  }
\cs_new_protected:Npn \@@_starred_item_vii_aux_i:w [#1]
  {
    \tl_gset:Nn \g_@@_item_symbol_aux_vii_tl {#1}
    \@@_starred_item_vii_aux_ii:w
  }
\cs_new_protected:Npn \@@_starred_item_vii_aux_ii:w
  {
    \peek_meaning:NTF [
      { \@@_starred_item_vii_aux_iii:w }
      {
        \dim_set_eq:NN
          \l_@@_item_symbol_sep_vii_dim
          \l_@@_labelsep_vii_dim
        \legacy_if_set_true:n { @noitemarg }
        \@@_start_item_vii:w [ \l_@@_label_vii_tl ]
      }
  }
\cs_new_protected:Npn \@@_starred_item_vii_aux_iii:w [#1]
  {
    \dim_set:Nn \l_@@_item_symbol_sep_vii_dim {#1}
    \legacy_if_set_true:n { @noitemarg }
    \@@_start_item_vii:w [ \l_@@_label_vii_tl ]
  }
%    \end{macrocode}
% \end{macro}
%
%  \subsubsection{Real definition of \cs{item} in \env{enumext*}}
%
% \begin{macro}{\@@_start_item_vii:w}
%  The functions \cs{@@_start_item_vii:w} and \cs{@@_stop_item_vii:} executing the true definition of
%  \ics*{item} inside the \myenv*{enumext*} environment.
%
%    The first thing we will do is set the value of \cs{@@_stop_item_tmp_vii:} equal to the
%    value of \cs{@@_stop_item_vii:} which we will define later and add the
%    \mypkg{hyperref} compatible \icounter{enumXvii} counter, after that we will
%    start capturing the item content in a box. Here need setting the |\if@hyper@item| switch to
%    \emph{\enquote{true}} for \mypkg{hyperref} compatible. The
%    explanation for this is given by the master Heiko Oberdiek on
%    \href{https://tex.stackexchange.com/a/404911}{\textbackslash refstepcounter\{enumi\} twice (or more) creates destination with the same identifier}.
%
% \iffalse
%% Real \item definition for |enumext*| \legacy_if_set_true:n { @hyper@item } :D. (doc p170)
% \fi
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \@@_start_item_vii:w [#1]
  {
    \cs_set_eq:NN \@@_stop_item_tmp_vii: \@@_stop_item_vii:
    \legacy_if:nT { @noitemarg }
      {
        \legacy_if_set_false:n { @noitemarg }
        \legacy_if:nT { @nmbrlist }
          {
            \bool_if:NT \l_@@_hyperref_bool
              {
                \legacy_if_set_true:n { @hyper@item }
              }
            \refstepcounter{enumXvii}
            \bool_if:NT \l_@@_check_ans_bool
              {
                \int_gincr:N \g_@@_count_item_number_int
              }
          }
      }
%    \end{macrocode}
%
%    Here we start capturing |\item| and its contents into a group using the
%    plain form of the \myenv{lrbox} environment. If the state of the
%    variable \cs{l_@@_footnotes_key_bool} is false, we will redefine the
%    command |\footnote|, followed by printing the \mymeta{symbol} defined
%    for |\item*| if it is present and open a new group inside which we
%    execute \mykey{font} key next to |\item| and the keys
%    \mykey{wrap-label}, \mykey{wrap-label*}, \mykey{align}, close the group and execute
%    the key \mykey{labelsep} and then the key \mykey{first}. Finally we
%    open the \myenv{minipage} environment and execute the
%    \mykey{listparindent} key which will be equal to |\parindent|, the
%    \mykey{parsep} key which will be equal to |\parskip| and the
%    \mykey{itemindent} key.
%    \begin{macrocode}
    \group_begin:
      \lrbox{ \l_@@_item_text_vii_box }
        \bool_if:NF \l_@@_footnotes_key_bool
          {
            \@@_renew_footnote:
          }
        \bool_if:NT \l_@@_item_starred_vii_bool
          {
            \tl_if_blank:VT \g_@@_item_symbol_aux_vii_tl
              {
                \tl_gset_eq:NN
                  \g_@@_item_symbol_aux_vii_tl \l_@@_item_symbol_vii_tl
              }
            \mode_leave_vertical:
            \skip_horizontal:n { -\l_@@_item_symbol_sep_vii_dim }
            \makebox[ 0pt ][ r ]{ \g_@@_item_symbol_aux_vii_tl }
            \skip_horizontal:N \l_@@_item_symbol_sep_vii_dim
            \tl_gclear:N \g_@@_item_symbol_aux_vii_tl
          }
        \group_begin:
          \tl_use:N \l_@@_label_font_style_vii_tl
          \bool_if:NTF \l_@@_wrap_label_vii_bool
            {
              \makebox[ \l_@@_labelwidth_vii_dim ][ \l_@@_align_label_vii_str ]
                { \@@_wrapper_label_vii:n {#1} }
            }
            {
              \makebox[ \l_@@_labelwidth_vii_dim ][ \l_@@_align_label_vii_str ]{ #1 }
            }
        \group_end:
        \skip_horizontal:N \l_@@_labelsep_vii_dim
        \tl_use:N \l_@@_after_list_args_vii_tl
        \@@_minipage:w [ t ]{ \l_@@_joined_width_vii_dim  }
          \skip_set_eq:NN \parindent \l_@@_listparindent_vii_dim
          \skip_set_eq:NN \parskip \l_@@_parsep_vii_skip
          \tl_use:N \l_@@_fake_item_indent_vii_tl
   }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_stop_item_vii:}
%   The function \cs{@@_stop_item_vii:} shall terminate with the capture of
%   |\item| and its \mymeta{contents}. Close the environments
%   \myenv{minipage}, \myenv{lrbox} and the group. Then we
%   only have to set the width of the box and print it next to
%   |\footnote|, and add the horizontal and vertical separation between
%   the boxes.
%    \begin{macrocode}
\cs_new_protected_nopar:Nn \@@_stop_item_vii:
  {
        \@@_endminipage:
      \endlrbox
    \group_end:
    \box_set_wd:Nn \l_@@_item_text_vii_box
      {
        \l_@@_joined_width_vii_dim
        + \l_@@_labelwidth_vii_dim
        + \l_@@_labelsep_vii_dim
      }
    \int_set:Nn \hbadness { 10000 }
    \box_use:N \l_@@_item_text_vii_box
    \bool_if:NF \l_@@_footnotes_key_bool
      {
        \@@_print_footnote:
      }
    \int_compare:nNnTF { \l_@@_item_column_pos_vii_int } = { \l_@@_columns_vii_int }
      {
        \par\noindent
        \int_zero:N \l_@@_item_column_pos_vii_int
      }
      { \hspace{ \l_@@_columns_sep_vii_dim } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_remove_extra_parsep_vii:}
%   Finally we will remove the vertical space equal to |\parsep| when the
%   total number of items is divisible by the number of items in the last
%   row of the environment.
%
% \iffalse
%% Remove extra \parsep in |enumext*|
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_remove_extra_parsep_vii:
  {
    \int_compare:nNnT
      {
        \int_mod:nn {  \g_@@_item_count_all_vii_int } { \l_@@_columns_vii_int }
      }
      =
      { \c_zero_int }
      {
        \par
        \vspace{ -\l_@@_itemsep_vii_skip }
        \int_gzero:N \g_@@_item_count_all_vii_int
      }
  }
%    \end{macrocode}
% \end{macro}
%
% As we don't want our check to be executed \mykey{check-ans} by levels but on the
% complete list, we will take it out of the \myenv*{enumext*}
% environment using the \emph{\enquote{hook}} function \cs{@@_after_env:nn}.
% \iffalse
%% Execute |check-ans| key out of |enumext*|.
% \fi
%    \begin{macrocode}
\@@_after_env:nn {enumext*}
  {
    \int_compare:nNnT { \l_@@_level_int } = { 0 }
      {
        \bool_if:NT \g_@@_check_ans_show_h_bool
          {
            \@@_check_ans_show:
          }
        \bool_gset_false:N \g_@@_starred_bool
        \bool_gset_false:N \g_@@_check_ans_show_h_bool
        \tl_gclear:N \g_@@_store_name_tl
      }
  }
%    \end{macrocode}
%
% \subsection{The \env{keyans*} environment}\label{env:keyans-starred}
%
% \subsubsection{Functions for item box width}
%
% \begin{macro}{\@@_starred_columns_set_viii:}
%    We set the default value for the width of the box containing the
%    content of the items and create \ics*{itemwidth} in a public form.
% \iffalse
%% Define default columns width for |keyans*|
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_starred_columns_set_viii:
  {
    \dim_compare:nNnT { \l_@@_columns_sep_viii_dim } = { \c_zero_dim }
      {
        \dim_set:Nn \l_@@_columns_sep_viii_dim
          {
            ( \l_@@_labelwidth_viii_dim + \l_@@_labelsep_viii_dim )
            / \l_@@_columns_viii_int
          }
      }
    \int_set:Nn \l_@@_tmpa_viii_int { \l_@@_columns_viii_int - \c_one_int }
    \dim_set:Nn \l_@@_item_width_viii_dim
      {
        ( \linewidth - \l_@@_columns_sep_viii_dim * \l_@@_tmpa_viii_int )
        / \l_@@_columns_viii_int - \l_@@_labelwidth_viii_dim
        - \l_@@_labelsep_viii_dim
      }
    \dim_zero_new:N \itemwidth
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_starred_joined_item_viii:n}
%    The function \cs{@@_starred_joined_item_viii:n} will set the \emph{width} of the
%    box in which the content passed to \ics*{item}\myparg{number} will be
%    stored together with the value of \ics*{itemwidth}.
%
% \iffalse
%% Set width for joined item's for |keyans*|
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_starred_joined_item_viii:n #1
  {
    \int_set:Nn \l_@@_joined_item_viii_int {#1}
    \int_compare:nNnT { \l_@@_joined_item_viii_int } > { \l_@@_columns_viii_int }
      {
        \msg_warning:nnee { enumext } { item-joined }
          { \int_use:N \l_@@_joined_item_viii_int }
          { \int_use:N \l_@@_columns_viii_int }
        \int_set:Nn \l_@@_joined_item_viii_int
          {
            \l_@@_columns_viii_int - \l_@@_item_column_pos_viii_int + \c_one_int
          }
      }
    \int_compare:nNnT
      { \l_@@_joined_item_viii_int }
        >
      { \l_@@_columns_viii_int - \l_@@_item_column_pos_viii_int + \c_one_int }
      {
        \msg_warning:nnee { enumext } { item-joined-columns }
          { \int_use:N \l_@@_joined_item_viii_int }
          {
            \int_eval:n
              { \l_@@_columns_viii_int - \l_@@_item_column_pos_viii_int + \c_one_int }
          }
        \int_set:Nn \l_@@_joined_item_viii_int
          {
            \l_@@_columns_viii_int - \l_@@_item_column_pos_viii_int + \c_one_int
          }
      }
    \int_compare:nNnTF { \l_@@_joined_item_viii_int } > { \c_one_int }
      {
        \int_set_eq:NN \l_@@_joined_item_aux_viii_int \l_@@_joined_item_viii_int
        \int_decr:N \l_@@_joined_item_aux_viii_int
        \int_add:Nn \l_@@_item_column_pos_viii_int { \l_@@_joined_item_aux_viii_int }
        \int_gadd:Nn \g_@@_item_count_all_viii_int { \l_@@_joined_item_aux_viii_int }
        \dim_set:Nn \l_@@_joined_width_viii_dim
          {
            \l_@@_item_width_viii_dim * \l_@@_joined_item_viii_int
            + (  \l_@@_labelwidth_viii_dim + \l_@@_labelsep_viii_dim
               + \l_@@_columns_sep_viii_dim
              )*\l_@@_joined_item_aux_viii_int
          }
        \dim_set_eq:NN \itemwidth \l_@@_joined_width_viii_dim
      }
      {
        \dim_set_eq:NN \l_@@_joined_width_viii_dim \l_@@_item_width_viii_dim
        \dim_set_eq:NN \itemwidth \l_@@_item_width_viii_dim
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_start_mini_viii:,\@@_stop_mini_viii:}
%
% The implementation of the \mykey{mini-env} key is identical
% to the one used in the \myenv*{enumext*} environment.
%
% \iffalse
%% Start support for |mini-env| key in |keyans*| environment
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_start_mini_viii:
  {
    \dim_compare:nNnT { \l_@@_minipage_right_viii_dim } > { \c_zero_dim }
      {
        \dim_set:Nn \l_@@_minipage_left_viii_dim
          {
            \linewidth
            - \l_@@_minipage_right_viii_dim
            - \l_@@_minipage_hsep_viii_dim
          }
        \bool_set_true:N \l_@@_minipage_active_viii_bool
        \dim_gset_eq:NN
          \g_@@_minipage_right_viii_dim
          \l_@@_minipage_right_viii_dim
        \@@_mini_addvspace_viii:
        \nointerlineskip\noindent
        \begin{@@_mini_env*}{ \l_@@_minipage_left_viii_dim }
      }
   }
\cs_new_protected:Nn \@@_stop_mini_viii:
  {
    \bool_if:NT \l_@@_minipage_active_viii_bool
      {
        \end{@@_mini_env*}
        \hfill
        \bool_gset_true:N \g_@@_minipage_active_viii_bool
      }
   }
\@@_after_env:nn {keyans*}
  {
    \bool_if:NT \g_@@_minipage_active_viii_bool
      {
        \begin{@@_mini_env*}{ \g_@@_minipage_right_viii_dim }
          \par\addvspace { \g_@@_minipage_right_skip }
          \bool_if:NF \g_@@_minipage_center_viii_bool
            {
              \centering
            }
          \tl_use:N \g_@@_miniright_code_viii_tl % the code
        \end{@@_mini_env*}
        \par\addvspace{ \g_@@_minipage_after_skip }
      }
    \bool_gset_false:N \g_@@_minipage_active_viii_bool
    \bool_gset_true:N \g_@@_minipage_center_viii_bool
    \tl_gclear:N \g_@@_miniright_code_viii_tl
    \dim_gzero:N \g_@@_minipage_right_viii_dim
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{keyans*}
%    First we will generate the environment and we will give a
%    temporary definition to \cs{@@_stop_item_tmp_viii:} equal to
%    \ics{noindent} and next to \ics{item} equal to
%    \cs{@@_start_item_tmp_viii:} which we will redefine later.
% \iffalse
%% Define |keyans*|
% \fi
%    \begin{macrocode}
\NewDocumentEnvironment{keyans*}{ o }
  {
    \@@_safe_exec_viii:
    \@@_parse_keys_viii:n {#1}
    \@@_before_list_viii:
    \@@_start_list:nn { }
      {
        \@@_list_arg_two_viii:
        \@@_before_keys_exec_viii:
      }
      \@@_starred_columns_set_viii:
      \item[] \scan_stop:
      \cs_set_eq:NN \@@_stop_item_tmp_viii: \noindent
      \cs_set_eq:NN \item \@@_start_item_tmp_viii:
  }
  {
    \@@_stop_item_tmp_viii:
    \@@_remove_extra_parsep_viii:
    \@@_keyans_check_ans:nn { item }{ keyans* }
    \@@_stop_list:
    \@@_after_list_viii:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_safe_exec_viii:}
%    First check the maximum nesting level for the \myenv*{keyans*}
%    environment.
% \iffalse
%% Test deep-level for |keyans*| and set bool vars.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_safe_exec_viii:
  {
    \int_incr:N \l_@@_keyans_level_h_int
    \int_compare:nNnT { \l_@@_keyans_level_h_int } > { 1 }
      {
        \msg_error:nn { enumext } { nested }
      }
    % Set false for interfering with enumext nested in keyans* (yes, its possible and crayze)
    \bool_set_false:N \l_@@_store_active_bool
    \int_compare:nNnT { \l_@@_level_int } > { 1 }
      {
        \msg_error:nn { enumext } { keyans-wrong-level }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_parse_keys_viii:n}
%    Parse \myoarg[type=tt]{key \textnormal{\textcolor{gray}{=}} val}
%    for \myenv*{keyans*}.
% \iffalse
%% Parse |key=val| and store keys for |keyans*|.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_parse_keys_viii:n #1
  {
    \tl_if_novalue:nF {#1}
      {
        \keys_set:nn { enumext / keyans* } {#1}
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_before_list_viii:}
%    The function \cs{@@_before_list_viii:} will add the vertical
%    spacing on the environment if the \mykey{above} key is active next to
%    the \mymarg[type=tt]{code} defined by the \mykey{before*} key if
%    it is active, the call the function \cs{@@_start_mini_viii:} handle by
%    \mykey{mini-env}.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_before_list_viii:
  {
    \@@_vspace_above_viii:
    \@@_before_args_exec_viii:
    \@@_start_mini_viii:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_after_list_viii:}
%    The function \cs{@@_after_list:} first call the function \cs{@@_stop_mini_viii:},
%    then apply the \mymarg[type=tt]{code} handled by the \mykey{after} key
%    together with the \emph{vertical space} handled by the \mykey{below} key if
%    they are present.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_after_list_viii:
  {
    \@@_stop_mini_viii:
    \@@_after_stop_list_viii:
    \@@_vspace_below_viii:
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{The command \cs{item} in \env{keyans*}}\label{cmd:item-boxed-viii}
%
% The idea here is to make the |\item| command behave in the same way as
% in the \myenv*{keyans} environment with the difference of the optional
% argument \myparg{number} which works in the same way as in the \myenv*{enumext*}
% environment.
% In simple terms we want to store the \mymeta{label} next to the \myoarg[type=tt]{content} if it is present
% in the \mymeta{sequence} and \mymeta{prop list} defined by \mykey{save-ans} key for
% |\item*|, |\item*|\myoarg[type=tt]{content}, |\item|\myparg{number}|*| and
% |\item|\myparg{number}|*|\myoarg[type=tt]{content} commands.
%
% \begin{macro}{\@@_start_item_tmp_viii:}
%
% First we will call the function \cs{@@_stop_item_tmp_viii:} that we
% will redefine later, we will increment the value of
% \cs{l_@@_item_column_pos_viii_int} that will count the item's by rows and
% the value of \cs{g_@@_item_count_all_viii_int} that will count the
% total of item's in the environment. After that we will call the
% function \cs{@@_item_peek_args_viii:} that will handle the
% arguments passed to \ics*{item}.
% \iffalse
%% % Start boxed item's for |keyans*|
% \fi
%    \begin{macrocode}
\cs_new_protected_nopar:Nn \@@_start_item_tmp_viii:
  {
    \@@_stop_item_tmp_viii:
    \int_incr:N \l_@@_item_column_pos_viii_int
    \int_gincr:N \g_@@_item_count_all_viii_int
    \@@_item_peek_args_viii:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_item_peek_args_viii:}
%
%    The function \cs{@@_item_peek_args_viii:} will handle the \ics*{item}\myparg{number}.
%    Look for the argument \enquote{\textcolor{MediumOrchid}{\ttfamily (}}, if it is
%    present we will call the function \cs{@@_joined_item_viii:w} \myparg{number}, which is in charge of joining the item's
%    in the same row, in case they are not present we will set the default
%    value \textcolor{gray}{\ttfamily(\mydim{1})}.
% \iffalse
%% Peek argument for \item(number)*[opt] for |keyans*| environment.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_item_peek_args_viii:
  {
    \peek_meaning:NTF (
      { \@@_joined_item_viii:w }
      { \@@_joined_item_viii:w (1) }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_joined_item_viii:w}
%    The function \cs{@@_joined_item_viii:w} will first call the
%    function \cs{@@_starred_joined_item_viii:n} in charge of setting the
%    \emph{width} of the box that will store the content passed to \ics*{item}. Then we
%    will look for the argument \enquote{\textcolor{MediumOrchid}{\ttfamily *}}, if it is present we will call the
%    function \cs{@@_starred_item_viii:w} otherwise we will call the
%    function \cs{@@_standard_item_viii:w}.
% \iffalse
%% Joined item's for |keyans*|
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_joined_item_viii:w (#1)
  {
    \@@_starred_joined_item_viii:n {#1}
    \peek_meaning_remove:NTF *
      { \@@_starred_item_viii:w  }
      { \@@_standard_item_viii:w }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_standard_item_viii:w}
%   The function \cs{@@_standard_item_viii:w} will first look for the
%   argument “|[|”, if present it will set the state of the variable
%   \cs{l_@@_wrap_label_opt_viii_bool} equal to the state of the variable
%   \cs{l_@@_wrap_label_opt_viii_bool} handled by the key
%   \mykey{wrap-label*} and finally execute the \emph{non-enumerated}
%   version \ics*{item}\myoarg[type=tt]{custom} by means of the function
%   \cs{@@_start_item_viii:w}, otherwise we will set the value of the
%   variable \cs{l_@@_wrap_label_viii_bool} handled by the
%   \mykey{wrap-label} key to true and set the switch |\if@noitemarg| to
%   true to execute the enumerated version of \ics*{item} by means of the
%   function \cs{@@_start_item_viii:w} |[| \myvarenv{l__@@_label_viii_tl} |]|.
% \iffalse
%% Set standar \item[opt] for |keyans*| environment.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_standard_item_viii:w
  {
    \bool_set_false:N \l_@@_item_starred_viii_bool
      \peek_meaning:NTF [
        {
          \bool_set_eq:NN
            \l_@@_wrap_label_viii_bool
            \l_@@_wrap_label_opt_viii_bool
          \@@_start_item_viii:w
        }
        {
          \bool_set_true:N \l_@@_wrap_label_viii_bool
          \legacy_if_set_true:n { @noitemarg }
          \@@_start_item_viii:w [ \l_@@_label_viii_tl ]
        }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_starred_item_viii:w, \@@_starred_item_viii_aux_i:w,
%               \@@_starred_item_viii_aux_ii:w,}
% The function \cs{@@_starred_item_viii:w} together with the specified
% auxiliary functions |aux_i:w| and |aux_ii:w| execute \ics*{item*}
% and \ics*{item*}\myoarg[type=tt]{content}.
% \iffalse
%% Set \item*[content] for |keyans*| environment.
% \fi
%    \begin{macrocode}
\cs_new_protected:Npn \@@_starred_item_viii:w
  {
    \bool_set_true:N \l_@@_item_starred_viii_bool
    \bool_set_true:N \l_@@_wrap_label_viii_bool
    \peek_meaning:NTF [
      { \@@_starred_item_viii_aux_i:w }
      { \@@_starred_item_viii_aux_ii:w }
  }
%    \end{macrocode}
% The optional argument will be captured in the variables
% \cs{l_@@_keyans_tmpa_tl} and \cs{l_@@_keyans_tmpb_tl} which we will use
% later for the implementation of the \mykey{show-ans} and
% \mykey{show-pos} keys together with the stored in \mymeta{sequence} and
% \mymeta{prop list}.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_starred_item_viii_aux_i:w [#1]
  {
    \tl_clear:N \l_@@_store_keyans_label_tl
    \tl_if_novalue:nF { #1 }
      {
        \tl_if_empty:NF \l_@@_store_keyans_item_opt_sep_tl
          {
            \tl_put_right:Ne \l_@@_store_keyans_label_tl { \l_@@_store_keyans_item_opt_sep_tl }
            \tl_put_right:Ne \l_@@_store_keyans_label_tl { #1 }
          }
        \tl_set:Ne \l_@@_keyans_item_opt_tl { #1 }
      }
    \@@_starred_item_viii_aux_ii:w
  }
\cs_new_protected:Npn \@@_starred_item_viii_aux_ii:w
  {
    \legacy_if_set_true:n { @noitemarg }
    \@@_start_item_viii:w [ \l_@@_label_viii_tl ]
  }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\@@_starred_item_exec:,}
% The function \cs{@@_starred_item_exec:} will be in charge of storing
% the current \mymeta{label} for \ics*{item*} followed by the
% \myoarg[type=tt]{content} for \ics*{item*}\myoarg[type=tt]{content} if
% present in the \mymeta{sequence} and \mymeta{prop list} set by the
% \mykey{save-ans} key. In this same function the keys \mykey{show-ans},
% \mykey{show-pos} and \mykey{save-ref} are implemented.
%
% \iffalse
%% Set \item*[content] for |keyans*| environment.
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_starred_item_exec:
  {
    \tl_put_left:Ne \l_@@_store_keyans_label_tl { \l_@@_label_viii_tl }
    \@@_store_addto_prop:V \l_@@_store_keyans_label_tl
    \@@_keyans_store_ref:
    \tl_put_left:Ne \l_@@_store_keyans_label_tl { \item }
    \@@_keyans_addto_seq_link:
    \bool_if:NT \l_@@_show_answer_bool
      {
        \@@_print_keyans_box:NN \l_@@_labelwidth_i_dim \l_@@_labelsep_i_dim
      }
    \bool_if:NT \l_@@_show_position_bool
      {
        \tl_set:Ne \l_@@_mark_answer_sym_tl
          {
            \group_begin:
              \exp_not:N \normalfont
              \exp_not:N \footnotesize [ \int_eval:n
                {
                  \prop_count:c { g_@@_ \l_@@_store_name_tl _prop }
                }
               ]
            \group_end:
          }
        \@@_print_keyans_box:NN \l_@@_labelwidth_i_dim \l_@@_labelsep_i_dim
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection*{Real definition of \cs{item} in \env{keyans*}}
%
% \begin{macro}{\@@_start_item_viii:w}
%    The implementation at this point is very similar to that of the
%    \myenv*{enumext*} environment.
% \iffalse
%% Real |\item| definition for |keyans*| environment.
% \fi
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \@@_start_item_viii:w [#1]
  {
    \cs_set_eq:NN \@@_stop_item_tmp_viii: \@@_stop_item_viii:
    \legacy_if:nT { @noitemarg }
      {
        \legacy_if_set_false:n { @noitemarg }
        \legacy_if:nT { @nmbrlist }
          {
            \bool_if:NT \l_@@_hyperref_bool
              {
                \legacy_if_set_true:n { @hyper@item }
              }
            \refstepcounter{enumXviii}
          }
      }
%    \end{macrocode}
%    Here we start capturing |\item| and its contents into a group using the
%    plain form of the \myenv{lrbox} environment.
%    \begin{macrocode}
    \group_begin:
      \lrbox{ \l_@@_item_text_viii_box }
        \bool_if:NF \l_@@_footnotes_key_bool
          {
            \@@_renew_footnote:
          }
        \bool_if:NT \l_@@_item_starred_viii_bool
          {
            \@@_starred_item_exec:
          }
        \group_begin:
          \tl_use:N \l_@@_label_font_style_viii_tl
          \bool_if:NTF \l_@@_wrap_label_viii_bool
            {
              \makebox[ \l_@@_labelwidth_viii_dim ][ \l_@@_align_label_viii_str ]
                { \@@_wrapper_label_viii:n {#1} }
            }
            {
              \makebox[ \l_@@_labelwidth_viii_dim ][ \l_@@_align_label_viii_str ]{ #1 }
            }
        \group_end:
        \skip_horizontal:N \l_@@_labelsep_viii_dim
        \tl_use:N \l_@@_after_list_args_viii_tl
        \@@_minipage:w [ t ]{ \l_@@_joined_width_viii_dim  }
          \skip_set_eq:NN \parindent \l_@@_listparindent_viii_dim
          \skip_set_eq:NN \parskip \l_@@_parsep_viii_skip
          \bool_if:NT \l_@@_item_starred_viii_bool
            {
              \tl_use:N \l_@@_fake_item_indent_viii_tl
              \@@_keyans_show_item_opt: \skip_horizontal:n { -\l_@@_fake_item_indent_viii_dim }
            }
            {
              \tl_use:N \l_@@_fake_item_indent_viii_tl
            }
   }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_stop_item_viii:}
%   The function \cs{@@_stop_item_viii:} shall terminate with the capture of
%   |\item| and its \mymeta{contents}. Close the environments
%   \myenv{minipage}, \myenv{lrbox} and the group. Then we
%   only have to set the width of the box and print it next to
%   |\footnote|, and add the horizontal and vertical separation between
%   the boxes.
%    \begin{macrocode}
\cs_new_protected_nopar:Nn \@@_stop_item_viii:
  {
        \@@_endminipage:
      \endlrbox
    \group_end:
    \box_set_wd:Nn \l_@@_item_text_viii_box
      {
        \l_@@_joined_width_viii_dim
        + \l_@@_labelwidth_viii_dim
        + \l_@@_labelsep_viii_dim
      }
    \int_set:Nn \hbadness { 10000 }
    \box_use:N \l_@@_item_text_viii_box
    \bool_if:NF \l_@@_footnotes_key_bool
      {
        \@@_print_footnote:
      }
    \int_compare:nNnTF { \l_@@_item_column_pos_viii_int } = { \l_@@_columns_viii_int }
      {
        \par\noindent
        \int_zero:N \l_@@_item_column_pos_viii_int
      }
      { \hspace{ \l_@@_columns_sep_viii_dim } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_remove_extra_parsep_viii:}
%   Finally we will remove the vertical space equal to |\parsep| when the
%   total number of items is divisible by the number of items in the last
%   row of the environment.
%
% \iffalse
%% Remove extra \parsep in |keyans*|
% \fi
%    \begin{macrocode}
\cs_new_protected:Nn \@@_remove_extra_parsep_viii:
  {
    \int_compare:nNnT
      {
        \int_mod:nn {  \g_@@_item_count_all_viii_int } { \l_@@_columns_viii_int }
      }
      =
      { \c_zero_int }
      {
        \par
        \vspace{ -\l_@@_itemsep_viii_skip }
        \int_gzero:N \g_@@_item_count_all_viii_int
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{The command \cs{getkeyans}}\label{cmd:getkeyans}
%
% \begin{macro}{\getkeyans}
%    The \ics*{getkeyans} command takes a mandatory argument of the
%    form \mymarg[type=tt]{store name \textcolor{red}{:} position}.
%    Retrieve a \emph{\enquote{single}} content stored by \ics*{anskey}, \ics*{anspic*}
%    and \ics*{item*} from \mymeta{prop list} defined by \mykey{save-ans} key.
% \iffalse
%% Define |\getkeyans|, need \exp_args:Ne \tl_to_str:e
% \fi
%    \begin{macrocode}
\NewDocumentCommand \getkeyans { m }
  {
    \exp_args:Ne \@@_getkeyans_aux:n
      { \tl_to_str:e { \text_expand:n {#1} } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_getkeyans_aux:n}
%    The internal function \cs{@@_getkeyans_aux:n} is in charge of
%    \emph{splitting} the \mymeta{argument} using \enquote{\textcolor{red}{:}}.
%    If \enquote{\textcolor{red}{:}} is omitted it will return an error.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_getkeyans_aux:n #1
  {
    \str_if_in:nnTF {#1} { : }
      {
        \use:e
          {
            \cs_set:Npn \exp_not:N \@@_tmp:w ##1 \c_colon_str ##2 \scan_stop:
              { {##1} {##2} }
          }
        \exp_after:wN \@@_getkeyans:nn \@@_tmp:w #1 \scan_stop:
      }
      { \msg_error:nnn { enumext } { missing-colon } {#1} }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_getkeyans:nn}
%    The internal function \cs{@@_getkeyans:nn} will check for the existence
%    of the \mymeta{prop list}, if it does not exist it will return an error
%    message, then it will fetch the content specified by the second
%    \mymeta{argument} from \mymeta{prop list}.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_getkeyans:nn #1 #2
  {
    \prop_if_exist:cF { g_@@_#1_prop }
      { \msg_error:nnn { enumext } { undefined-storage-anskey } {#1} }
    \group_begin:
      \prop_item:cn { g_@@_#1_prop }{#2}
    \group_end:
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{The command \cs{printkeyans}}\label{cmd:printkeyans}
%
% The \ics*{printkeyans} command prints \emph{\enquote{all stored
% content}} in the \mymeta{sequence} defined by the \mykey{save-ans} key.
%
% The first thing we will do is to define a set of \mymeta{keys} with
% which we will control the options of the different nesting levels for
% the \myenv*{enumext} and \myenv*{enumext*} environment by storing the
% values of these in the token list variables \myvarenv{l__@@_print_keyans_X_tl}.
%
% \iffalse
%% Add keys for |\printkeyans|.
% \fi
%    \begin{macrocode}
\keys_define:nn  { keyanskey / print }
  {
    level-1 .code:n     = \tl_put_right:Nn \l_@@_print_keyans_i_tl
                            {
                              \setenumext[level,1] {#1} \setenumext[print,1] {#1}
                            },
    level-1 .initial:n  = { label=\arabic*., nosep, columns=2, first=\small, font=\small },
    level-2 .code:n     = \tl_put_right:Nn \l_@@_print_keyans_ii_tl
                            {
                              \setenumext[level,2] {#1} \setenumext[print,2] {#1}
                            },
    level-2 .initial:n  = { nosep, label=(\alph*), first=\small, font=\small },
    level-3 .code:n     = \tl_put_right:Nn \l_@@_print_keyans_iii_tl
                            {
                              \setenumext[level,3] {#1} \setenumext[print,3] {#1}
                            },
    level-3 .initial:n  = { nosep, label=\roman*., first=\small, font=\small },
    level-4 .code:n     = \tl_put_right:Nn \l_@@_print_keyans_iv_tl
                            {
                              \setenumext[level,4] {#1} \setenumext[print,4] {#1}
                            },
    level-4 .initial:n  = { nosep, label=\Alph*., first=\small, font=\small },
    level-* .code:n     = \tl_put_right:Nn \l_@@_print_keyans_vii_tl % starred
                            {
                              \setenumext[enumext*] {#1} %%\setenumext[print,*] {#1}
                            },
    level-* .initial:n  = { label=\arabic*., nosep, columns=2, first=\small, font=\small },
  }
%    \end{macrocode}
%
% \begin{macro}{\printkeyans}
%    Create a user command to print \emph{\enquote{all stored content}}
%    in \mymeta{sequence} for \ics*{anskey}, \ics*{item*} and \ics*{anspic*}.
% \iffalse
%% Define |\printkeyans|.
% \fi
%    \begin{macrocode}
\NewDocumentCommand \printkeyans { s O{} m }
  {
    \group_begin:
      \tl_use:N \l_@@_print_keyans_i_tl
      \tl_use:N \l_@@_print_keyans_ii_tl
      \tl_use:N \l_@@_print_keyans_iii_tl
      \tl_use:N \l_@@_print_keyans_iv_tl
      \tl_use:N \l_@@_print_keyans_vii_tl
      \@@_printkeyans:nnn { #1 } { #2 } { #3 }
    \group_end:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_printkeyans:nnn}
%    The internal function \cs{@@_printkeyans:nnn} will check
%    for the existence of the \mymeta{sequence}, if it does not exist
%    it will return an error message, then it will fetch the content
%    specified by the first argument mapping the \mymeta{sequence}.
%
% \begin{arguments}
%    \item starred
%    \item key-val
%    \item seq-name
% \end{arguments}
%
%    \begin{macrocode}
\cs_new_protected:Npn \@@_printkeyans:nnn #1 #2 #3
  {
    \seq_if_exist:cTF { g_@@_#3_seq }
      {
        \seq_if_empty:cF { g_@@_#3_seq }
          {
            %%\seq_show:c { g_@@_#3_seq }
            \bool_if:nTF {#1}
              {
                \begin{enumext*}[#2]
                  \seq_map_inline:cn { g_@@_#3_seq } { ##1 }
                \end{enumext*}
              }
              {
                \begin{enumext}[#2]
                  \seq_map_inline:cn { g_@@_#3_seq } { ##1 }
                \end{enumext}
              }
          }
      }
      {
        \msg_error:nnn { enumext } { undefined-storage-anskey } {#3}
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{The command \cs{setenumext}}\label{cmd:setenumext}
%
% First we define a \emph{\enquote{meta families}} of \mymeta{keys}
% to access from \ics*{setenumext}.
% \iffalse
%% Add keys for |\setenumext|.
% \fi
%    \begin{macrocode}
\keys_define:nn { enumext / meta-families }
  {
    level-1  .code:n = { \keys_set:nn { enumext / level-1  } {#1} } ,
    level-2  .code:n = { \keys_set:nn { enumext / level-2  } {#1} } ,
    level-3  .code:n = { \keys_set:nn { enumext / level-3  } {#1} } ,
    level-4  .code:n = { \keys_set:nn { enumext / level-4  } {#1} } ,
    keyans   .code:n = { \keys_set:nn { enumext / keyans   } {#1} } ,
    enumext* .code:n = { \keys_set:nn { enumext / enumext* } {#1} } ,
    keyans*  .code:n = { \keys_set:nn { enumext / keyans*  } {#1} } ,
    print-1  .code:n = { \keys_set:nn { keyanskey / print } { level-1 = {#1} } } ,
    print-2  .code:n = { \keys_set:nn { keyanskey / print } { level-2 = {#1} } } ,
    print-3  .code:n = { \keys_set:nn { keyanskey / print } { level-3 = {#1} } } ,
    print-4  .code:n = { \keys_set:nn { keyanskey / print } { level-4 = {#1} } } ,
    print-*  .code:n = { \keys_set:nn { keyanskey / print } { level-* = {#1} } } ,
    unknown  .code:n = { \msg_error:nn { enumext } { unknown-key-family } } ,
  }
%    \end{macrocode}
%    We store them in the constant sequence \cs{c_@@_all_families_seq}
%    separated by commas.
%    \begin{macrocode}
\seq_const_from_clist:Nn \c_@@_all_families_seq
  {
    level-1 , level-2 , level-3 , level-4 , keyans, enumext*,
    keyans* , print-1 , print-2 , print-3 , print-4 , print-*,
  }
%    \end{macrocode}
%
% \begin{macro}{\setenumext}
%    Now we define the user command \ics*{setenumext}.
% \iffalse
%% Define |\setenumext|,  \tl_if_novalue:nTF here (program level)
% \fi
%    \begin{macrocode}
\NewDocumentCommand \setenumext { o +m }
  {
    \tl_if_novalue:nTF {#1}
      {
        \seq_map_inline:Nn \c_@@_all_families_seq
      }
      {
        \seq_clear:N \l_@@_setkey_tmpa_seq
        \seq_set_from_clist:Nn \l_@@_setkey_tmpb_seq {#1}
        \int_set:Nn \l_@@_setkey_tmpa_int
          {
            \seq_count:N \l_@@_setkey_tmpb_seq
          }
        \int_compare:nNnTF { \l_@@_setkey_tmpa_int } > { 1 }
          {
            \seq_pop_left:NN \l_@@_setkey_tmpb_seq \l_@@_setkey_tmpa_tl
            \seq_map_function:NN \l_@@_setkey_tmpb_seq \@@_set_parse:n
            \seq_set_map_e:NNn \l_@@_setkey_tmpa_seq \l_@@_setkey_tmpa_seq
              {
                \tl_use:N \l_@@_setkey_tmpa_tl - ##1
              }
          }
          {
            \seq_put_right:Ne \l_@@_setkey_tmpa_seq { \tl_trim_spaces:n {#1} }
          }
        \seq_if_empty:NTF \l_@@_setkey_tmpa_seq
          { \seq_map_inline:Nn \c_@@_all_families_seq }
          { \seq_map_inline:Nn \l_@@_setkey_tmpa_seq }
      }
      {
        \keys_set:nn { enumext / meta-families } { ##1 = {#2} }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_set_parse:n, \@@_set_error:nn, }
%    Internal functions used by the \ics*{setenumext} command.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_set_parse:n #1
  {
    \tl_set:Ne \l_@@_setkey_tmpb_tl { \tl_trim_spaces:n {#1} }
    \int_step_inline:nnn { 0 } { 4 } % <- max level
      { \tl_remove_all:Nn \l_@@_setkey_tmpb_tl {##1} }
    \tl_if_empty:NTF \l_@@_setkey_tmpb_tl
      {
        \seq_put_right:Ne \l_@@_setkey_tmpa_seq
          { \tl_trim_spaces:n {#1} }
      }
      { \@@_set_error:nn {#1} { } }
  }
\cs_new_protected:Npn \@@_set_error:nn #1 #2
  { \msg_error:nnn { enumext } { invalid-key } {#1} {#2} }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Messages}
%
% \iffalse
%% Messages.
% \fi
% Message used by package-load for \mypkg{multicol} and \mypkg{hyperref} packages.
%    \begin{macrocode}
\msg_new:nnn { enumext } { package-load }
  {
    The ~ '#1' ~ package ~ is ~ already ~ loaded.
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\msg_new:nnn { enumext } { package-not-load }
  {
    The ~ '#1' ~ package ~ will ~ be ~ loaded ~ as ~ a ~ dependency.
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\msg_new:nnn { enumext } { package-load-foot }
  {
    The ~ '#1' ~ package ~ is ~ loaded ~ with ~ the ~ option ~ '#2'.
  }
%    \end{macrocode}
%
% Message used in the creation of counters by \mypkg*{enumext} package.
%    \begin{macrocode}
\msg_new:nnn { enumext } { counters }
  {
    The ~ counter ~ '#1' ~ is ~ already ~ defined ~ by ~ some ~ \\
    package ~ or ~ macro, ~ it ~ cannot ~ be ~ continued.
  }
%    \end{macrocode}
% Message used by \myoarg[type=tt]{key \textnormal{\textcolor{gray}{=}} val}
% system and \ics*{setenumext} command.
%    \begin{macrocode}
\msg_new:nnn { enumext } { invalid-key }
  {
    The ~ key ~ '#1' ~ is ~ not ~ know ~ the ~ level ~ #2.
  }
\msg_new:nnn { enumext } { unknown-key-family }
  {
    Unknown~key~family~`\l_keys_key_str'~for~enumext.
  }
%    \end{macrocode}
% Messages used in length calculation.
%    \begin{macrocode}
\msg_new:nnn { enumext } { width-negative }
  {
    Ignoring ~ negative ~ value ~ '#1=#2' ~ \msg_line_context:.\\
    The ~ key ~ '#1'~ accepts ~ values  ~ >= ~ 0pt.
  }
\msg_new:nnn { enumext } { width-zero }
  {
    Invalid ~ '#1=#2' ~ \msg_line_context:.\\
    The ~ key ~ '#1'~ accepts ~ values  ~ > ~ 0pt.
  }
%    \end{macrocode}
% Messages used by \mykey{show-length} key in \myenv*{enumext}.
%    \begin{macrocode}
\msg_new:nnn { enumext } { list-lengths }
  {
    **** ~ Lengths ~ used ~ by ~ 'enumext' ~ level ~ '#2' ~ \msg_line_context:~\c_space_tl ****\\
    \@@_show_length:nnn { dim  } { labelsep      } {#1}
    \@@_show_length:nnn { dim  } { labelwidth    } {#1}
    \@@_show_length:nnn { dim  } { itemindent    } {#1}
    \@@_show_length:nnn { dim  } { leftmargin    } {#1}
    \@@_show_length:nnn { dim  } { rightmargin   } {#1}
    \@@_show_length:nnn { dim  } { listparindent } {#1}
    \@@_show_length:nnn { skip } { topsep    } {#1}
    \@@_show_length:nnn { skip } { parsep    } {#1}
    \@@_show_length:nnn { skip } { partopsep } {#1}
    \@@_show_length:nnn { skip } { itemsep   } {#1}
    ****************************************************
  }
%    \end{macrocode}
%
%  Messages used by \mykey{show-length} key in  \myenv*{enumext*},
%  \myenv*{keyans*} and \myenv*{keyans}.
%    \begin{macrocode}
\msg_new:nnn { enumext } { list-lengths-not-nested }
  {
    **** ~ Lengths ~ used ~ by ~ '#2' ~ environment ~ \msg_line_context:~\c_space_tl ****\\
    \@@_show_length:nnn { dim  } { labelsep      } {#1}
    \@@_show_length:nnn { dim  } { labelwidth    } {#1}
    \@@_show_length:nnn { dim  } { itemindent    } {#1}
    \@@_show_length:nnn { dim  } { leftmargin    } {#1}
    \@@_show_length:nnn { dim  } { rightmargin   } {#1}
    \@@_show_length:nnn { dim  } { listparindent } {#1}
    \@@_show_length:nnn { skip } { topsep    } {#1}
    \@@_show_length:nnn { skip } { parsep    } {#1}
    \@@_show_length:nnn { skip } { partopsep } {#1}
    \@@_show_length:nnn { skip } { itemsep   } {#1}
    ****************************************************
  }
%    \end{macrocode}
%
%  Messages used by the internal system to check answer used by
% \mykey{check-ans} key.
%    \begin{macrocode}
\msg_new:nnn { enumext } { items-same-answer }
  {
    **********~Checking~answers~on~'#1'~OK~**********\\
    **~ All ~ items ~ stored ~ in ~ sequence ~ '#1' ~ have ~ an ~ answer. \\
    ****************************************
    \prg_replicate:nn { 7 + \str_count:n {#1} } { * }
  }
\msg_new:nnn { enumext } { item-different-answer }
  {
    Number ~ of ~ items ~ different ~  of ~ number ~ of ~
    answer ~ in ~ sequence ~ '#1'~ closed ~ \msg_line_context:.
  }
%    \end{macrocode}
%  Messages used by the internal system to check for
%  \emph{\enquote{starred}} |\item*| commands.
%    \begin{macrocode}
\msg_new:nnn { enumext } { missing-starred }
  {
    Missing ~ '\c_backslash_str #1*' ~ in ~ '#2' ~ \msg_line_context:.
  }
%    \end{macrocode}
% Message for the nesting depth of the environment \myenv*{enumext}.
%    \begin{macrocode}
\msg_new:nnn { enumext } { list-too-deep }
  {
    Too ~ deep ~ nesting  ~ for ~ 'enumext' ~ \msg_line_context:.~ \\
    The ~ maximum  ~ level  ~ of  ~ nesting  ~ is ~ 4.
  }
%    \end{macrocode}
% Messages used by \ics*{anskey} and \ics*{anspic} commands.
%    \begin{macrocode}
\msg_new:nnn { enumext } { anskey-wrong-place }
  {
    Wrong ~ place ~ for ~ command ~ '\c_backslash_str #1' ~ \msg_line_context:.~ \\
    '\c_backslash_str #1' ~ works ~ in ~ the ~ environment ~ '#2'.
  }
\msg_new:nnn { enumext } { anspic-wrong-place }
  {
    Wrong ~ place ~ for ~ command ~ '\c_backslash_str #1' ~ \msg_line_context:.~ \\
    '\c_backslash_str #1' ~ works ~ in ~ the ~ environment ~ '#2'.
  }
\msg_new:nnn { enumext } { command-wrong-place }
  {
    Wrong ~ place ~ for ~ command ~ '\c_backslash_str #1' ~ \msg_line_context:.~ \\
    '\c_backslash_str #1' ~ works ~ outside ~ the ~ environment ~ '#2'.
  }
%    \end{macrocode}
% Messages used by \myenv*{keyans} and \myenv*{keyanspic} environment.
%    \begin{macrocode}
\msg_new:nnn { enumext } { keyans-nested }
  {
    The ~ environment ~ 'keyans' ~ can't ~ be  ~ nested  ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { keyans-wrong-level }
  {
    Wrong ~ level ~ position ~ for ~ 'keyans' ~ \msg_line_context:.~ \\
    The ~ environment ~ 'keyans' ~ can ~ only ~ be ~ in ~ the ~ first ~ level.
  }
\msg_new:nnn { enumext } { wrong-place }
  {
    Wrong ~ place ~ for ~ '#1' ~ environment ~\msg_line_context:.~ \\
    '#1' ~ is ~ only ~ found ~ with ~ '#2' ~  in  ~  'enumext.
  }
\msg_new:nnn { enumext } { keyanspic-nested }
  {
    The ~ environment ~ 'keyanspic' ~ can't ~ be  ~ nested~ \msg_line_context:.~.
  }
\msg_new:nnn { enumext } { keyanspic-wrong-level }
  {
    Wrong ~ level ~ position ~ for ~ 'keyanspic' ~ \msg_line_context:.~ \\
    The ~ environment ~ 'keyans' ~ can ~ only ~ be ~ in ~ the ~ first ~ level.
  }
%    \end{macrocode}
% Messages used by \ics*{getkeyans} command.
%    \begin{macrocode}
\msg_new:nnn { enumext } { undefined-storage-anskey }
  {
    Storage ~ named ~ '#1' ~ is ~ not ~ defined ~ \msg_line_context:.
  }
%    \end{macrocode}
% Messages used by \ics*{miniright} command.
%    \begin{macrocode}
\msg_new:nnn { enumext } { missing-miniright }
  {
    Missing ~ '\c_backslash_str miniright' ~ in ~ \msg_line_context:.\\
    The ~ key ~ 'mini-env' ~ need ~ '\c_backslash_str miniright'.
  }
\msg_new:nnn { enumext } { wrong-miniright-place }
  {
    Wrong ~ place ~ for ~ '\c_backslash_str miniright' ~ \msg_line_context:.~ \\
    Works ~ in ~ 'enumext' ~ and ~ 'keyans' ~ with ~ key ~ 'mini-env'.
  }
\msg_new:nnn { enumext } { wrong-miniright-use }
  {
    Wrong ~ use ~ for ~ '\c_backslash_str miniright' ~ \msg_line_context:.~ \\
    '\c_backslash_str miniright' ~ need ~ a ~ key ~ 'mini-env'.
  }
%    \end{macrocode}
%
% Messages used by \myenv*{enumext*} and \myenv*{keyans*} environments.
%    \begin{macrocode}
\msg_new:nnn { enumext } { nested }
  {
    The ~ starred ~ environment ~ can't ~ be ~ nested ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { item-joined }
  {
    Items ~ joined ~ (#1) ~ > ~ #2  ~ columns ~\msg_line_context:.
  }
\msg_new:nnn { enumext } { item-joined-columns }
  {
    Not ~ space ~ to ~ join ~ items ~ (#1) ~ > ~ #2 ~\msg_line_context:.
  }
%    \end{macrocode}
% \subsection{Finish package}
%
% Finish package implementation.
%
%    \begin{macrocode}
\file_input_stop:
%</package>
%    \end{macrocode}
% \Finale
