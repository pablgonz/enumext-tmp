%%
%% This is file `enumext.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% enumext.dtx  (with options: `package')
%% Copyright (C) 2023 by Pablo González L <pablgonz@educarchile.cl>
%%
%% This work may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License, either version 1.3c of this license or (at
%% your option) any later version. The latest version of this license is in
%%
%%  https://www.latex-project.org/lppl.txt
%%
%% and version 1.3c or later is part of all distributions of LaTeX version
%% 2005/12/01 or later.
%%
%% This work is "maintained" (as per the LPPL maintenance status)
%% by Pablo González L.
%%
%% This work consists of the files enumext.dtx and enumext.sty.
\NeedsTeXFormat{LaTeX2e}[2023-11-01]
\IfPackageLoadedTF { multicol } { }
  {
    \RequirePackage{ multicol }[2023-03-30]
  }
\ProvidesExplPackage
  {enumext}
  {2023-11-05}
  {0.9999}
  {Enumerate exercise sheets}
%% Variable for nesting levels in |enumext| and |keyans| environments.
\int_new:N \l__enumext_level_int
\int_new:N \l__enumext_level_h_int
\int_new:N \l__enumext_keyans_level_int
\int_new:N \l__enumext_keyans_level_h_int
\int_new:N \l__enumext_keyans_pic_level_int
%% Variable for counters
\tl_new:N \l__enumext_counter_i_tl
\tl_new:N \l__enumext_counter_ii_tl
\tl_new:N \l__enumext_counter_iii_tl
\tl_new:N \l__enumext_counter_iv_tl
\tl_new:N \l__enumext_counter_v_tl
\tl_new:N \l__enumext_counter_vi_tl
\tl_new:N \l__enumext_counter_vii_tl
\tl_new:N \l__enumext_counter_viii_tl
%% Internal variables used by |start|, |align| and |list-indent| keys.
%% and |\__enumext_calc_hspace:NNNNNNN|.
\cs_set_protected:Npn \__enumext_tmp:w #1
  {
    \bool_new:c { l__enumext_wrap_label_#1_bool     }
    \bool_new:c { l__enumext_wrap_label_opt_#1_bool }
    \int_new:c  { l__enumext_start_#1_int           }
    \tl_new:c   { l__enumext_label_fill_left_#1_tl  }
    \tl_new:c   { l__enumext_label_fill_right_#1_tl }
    \bool_new:c { l__enumext_custom_margin_#1_bool  }
    \dim_new:c  { l__enumext_leftmargin_tmp_#1_dim  }
    \dim_new:c  { l__enumext_leftmargin_#1_dim      }
    \dim_new:c  { l__enumext_itemindent_#1_dim      }
  }
\__enumext_tmp:w {    i }
\__enumext_tmp:w {   ii }
\__enumext_tmp:w {  iii }
\__enumext_tmp:w {   iv }
\__enumext_tmp:w {    v }
\__enumext_tmp:w {  vii }
\__enumext_tmp:w { viii }
%% Variables used by |resume| and |item-sym*| key implementation.
\bool_new:N \l__enumext_resume_bool
\bool_new:N \l__enumext_resume_vii_bool
\int_new:N  \g__enumext_resume_int
\int_new:N  \g__enumext_resume_vii_int
\tl_new:N   \g__enumext_item_symbol_tl
%% Variables used by |label|, |ref| and |widest| keys.
\dim_new:N \l__enumext_current_widest_dim
\tl_new:N  \g__enumext_counter_styles_tl
\tl_new:N  \g__enumext_widest_label_tl
\box_new:N \l__enumext_label_width_by_box
%% Variables used by |save-ans| key.
\bool_new:N \l__enumext_keyans_active_bool
\tl_new:N   \l__enumext_keyans_name_tl
\tl_new:N   \g__enumext_keyans_name_out_tl
\tl_new:N   \l__enumext_anskey_stored_tl
\tl_new:N   \l__enumext_keyans_stored_tl
\tl_new:N   \l__enumext_keyans_tmpa_tl
%% Variables used by |\setenumext|.
\tl_new:N  \l__enumext_setkey_tmpa_tl
\tl_new:N  \l__enumext_setkey_tmpb_tl
\int_new:N \l__enumext_setkey_tmpa_int
\seq_new:N \l__enumext_setkey_tmpa_seq
\seq_new:N \l__enumext_setkey_tmpb_seq
%% Variables used by |\printkeyans|.
\tl_new:N \l__enumext_keyans_print_i_tl
\tl_new:N \l__enumext_keyans_print_ii_tl
\tl_new:N \l__enumext_keyans_print_iii_tl
\tl_new:N \l__enumext_keyans_print_iv_tl
%% Variables used by |show-ans|, |show-pos|, |mark-ans|, |mark-ref| and |\anskey|.
\bool_new:N \l__enumext_keyans_show_ans_bool
\bool_new:N \l__enumext_keyans_show_pos_bool
\tl_new:N   \l__enumext_keyans_mark_ref_tl
\tl_new:N   \l__enumext_keyans_mark_ans_tl
\tl_new:N   \l__enumext_keyans_mark_pos_tl
\tl_new:N   \l__enumext_anskey_pre_action_i_tl
\tl_new:N   \l__enumext_anskey_post_action_i_tl
\tl_new:N   \l__enumext_anskey_pre_action_ii_tl
\tl_new:N   \l__enumext_anskey_post_action_ii_tl
\tl_new:N   \l__enumext_anskey_pre_action_iii_tl
\tl_new:N   \l__enumext_anskey_post_action_iii_tl
\tl_new:N   \l__enumext_anskey_pre_action_iv_tl
\tl_new:N   \l__enumext_anskey_post_action_iv_tl
%% Variables used by |\anspic| and |keyanspic|.
\seq_new:N  \l__enumext_keyans_pic_body_seq
\dim_new:N  \l__enumext_keyans_pic_width_dim
\int_new:N  \l__enumext_keyans_pic_above_int
\int_new:N  \l__enumext_keyans_pic_below_int
\skip_new:N \l__enumext_keyans_pic_above_skip
%% Variables used by |check-ans| key.
\bool_new:N \l__enumext_keyans_check_bool
\bool_new:N \g__enumext_keyans_check_show_bool
\tl_new:N   \g__enumext_keyans_check_item_tl
\int_new:N  \l__enumext_compare_items_ans_int
\int_new:N  \g__enumext_count_item_i_int
\int_new:N  \g__enumext_count_item_ii_int
\int_new:N  \g__enumext_count_item_iii_int
\int_new:N  \g__enumext_count_item_iv_int
\int_new:N  \g__enumext_count_item_ans_int
\int_new:N  \g__enumext_count_item_all_int
\int_new:N  \g__enumext_count_tmpa_i_int
\int_new:N  \g__enumext_count_tmpa_ii_int
\int_new:N  \g__enumext_count_tmpa_iii_int
\int_new:N  \g__enumext_count_tmpa_iv_int
%% Variables used by |store-ref| key (internal label and ref) and hyperref detection.
\bool_new:N \g__enumext_keyans_hyperref_bool
\bool_new:N \l__enumext_hyper_foot_key_bool
\int_new:N  \g__enumext_footnote_int
\seq_new:N  \g__enumext_footnote_arg_seq
\seq_new:N  \g__enumext_footnote_int_seq
\tl_new:N   \l__enumext_label_copy_i_tl
\tl_new:N   \l__enumext_label_copy_ii_tl
\tl_new:N   \l__enumext_label_copy_iii_tl
\tl_new:N   \l__enumext_label_copy_iv_tl
\tl_new:N   \l__enumext_label_copy_v_tl
\tl_new:N   \l__enumext_label_copy_vi_tl
\tl_new:N   \l__enumext_keyans_write_arg_i_tl
\tl_new:N   \l__enumext_keyans_write_arg_ii_tl
\tl_new:N   \l__enumext_keyans_make_label_ref_tl
%% Variables used by |ref| key.
\tl_const:Nn \c__enumext_counter_style_tl
  { { arabic } { roman } { Roman } { alph } { Alph } }
\tl_new:N \l__enumext_ref_key_arg_tl
\tl_new:N \l__enumext_ref_aux_tl
\cs_set_protected:Npn \__enumext_tmp:w #1
  {
    \tl_new:c  { l__enumext_the_counter_#1_tl }
    \tl_new:c  { l__enumext_counter_style_for_ref_#1_tl }
  }
\__enumext_tmp:w {    i }
\__enumext_tmp:w {   ii }
\__enumext_tmp:w {  iii }
\__enumext_tmp:w {   iv }
\__enumext_tmp:w {    v }
\__enumext_tmp:w {  vii }
\__enumext_tmp:w { viii }
%% Variables used by |columns| and |columns-sep| keys.
\cs_set_protected:Npn \__enumext_tmp:w #1
  {
    \bool_new:c  { l__enumext_columns_sep_#1_bool     }
    \dim_new:c   { l__enumext_columns_sep_#1_dim      }
    \skip_new:c  { l__enumext_multicols_above_#1_skip }
    \skip_new:c  { l__enumext_multicols_below_#1_skip }
  }
\__enumext_tmp:w {    i }
\__enumext_tmp:w {   ii }
\__enumext_tmp:w {  iii }
\__enumext_tmp:w {   iv }
\__enumext_tmp:w {    v }
\__enumext_tmp:w {  vii }
\__enumext_tmp:w { viii }
%% Variables used by |enumext*| and |keyans*| environments.
\cs_set_protected:Npn \__enumext_tmp:w #1
  {
    \bool_new:c { l__enumext_item_starred_#1_bool   }
    \skip_new:c { l__enumext_parsep_#1_skip         }
    \skip_new:c { l__enumext_partopsep_#1_skip      }
    \int_new:c  { l__enumext_rows_items_#1_int      }
    \int_new:c  { g__enumext_total_items_#1_int     }
    \int_new:c  { l__enumext_joined_item_#1_int     }
    \int_new:c  { l__enumext_joined_item_aux_#1_int }
    \int_new:c  { l__enumext_tmpa_#1_int            }
    \box_new:c  { l__enumext_item_text_#1_box       }
    \dim_new:c  { l__enumext_joined_width_#1_dim    }
    \dim_new:c  { l__enumext_item_width_#1_dim      }
    \tl_new:c   { g__enumext_item_symbol_aux_#1_tl  }
  }
\__enumext_tmp:w {  vii }
\__enumext_tmp:w { viii }
%% Variables used by |mini-env| and |\miniright|.
\int_new:N  \g__enumext_minipage_stat_int
\skip_new:N \l__enumext_minipage_left_skip
\skip_new:N \l__enumext_minipage_right_skip
\skip_new:N \l__enumext_minipage_after_skip
\tl_new:N   \l__enumext_minipage_align_tl
\cs_set_protected:Npn \__enumext_tmp:w #1
  {
    \dim_new:c  { l__enumext_minipage_left_#1_dim    }
    \dim_new:c  { l__enumext_minipage_right_#1_dim   }
    \bool_new:c { l__enumext_minipage_active_#1_bool }
  }
\__enumext_tmp:w {    i }
\__enumext_tmp:w {   ii }
\__enumext_tmp:w {  iii }
\__enumext_tmp:w {   iv }
\__enumext_tmp:w {    v }
\__enumext_tmp:w {  vii }
\__enumext_tmp:w { viii }
%\cs_generate_variant:Nn \regex_match:nnTF { nV, nv , nVT }
%%\prg_generate_conditional_variant:Nnn \regex_match:nnT { nVT }
%% A internal "hooks" functions used for copying and execute code.
\cs_new_protected:Npn \__enumext_at_begin_document:n #1
  {
    \hook_gput_code:nnn {begindocument} {enumext} { #1 }
  }
%% A internal "hooks" for hyperref patch counters in starred environments.
\cs_new_protected:Nn \__enumext_hyper_nopatch_starred:
  {
    \cs_new_eq:Nc \__enumext_nopatch_counter: { hyper@nopatch@counter }
    \hook_gput_code:nnn {env/enumext*/before} {enumext}
      {
        \cs_gset:Nn \__enumext_nopatch_counter: {}
      }
    \hook_gput_code:nnn {env/keyans*/before} {enumext}
      {
        \cs_gset:Nn \__enumext_nopatch_counter: {}
      }
    \hook_gput_code:nnn {env/enumext*/after} {enumext}
      {
%        \cs_undefine:N \__enumext_nopatch_counter:
      }
    \hook_gput_code:nnn {env/keyans*/after} {enumext}
      {
%        \cs_undefine:N \__enumext_nopatch_counter:
      }
  }
\cs_new_protected:Npn \__enumext_after_env:n #1
  {
    \hook_gput_code:nnn {env/enumext/after} {enumext} { #1 }
  }
\cs_new_protected:Npn \__enumext_before_keyans:n #1
  {
    \hook_gput_code:nnn {env/keyans/before} {enumext} { #1 }
  }
%% Function to check current level.
\cs_new:Nn \__enumext_level:
  {
    \int_to_roman:n { \l__enumext_level_int }
  }
%% Function to check integer variables used by |start| and |widest| keys.
\prg_new_protected_conditional:Npnn \__enumext_if_is_int:n #1 { T, F, TF }
  {
    \regex_match:nnTF { ^[\+\-]?[\d]+$ } {#1} % $
      { \prg_return_true: }
      { \prg_return_false: }
  }
%% Function to show list lengths used by |show-length| key.
\cs_new:Npn \__enumext_msg_skip_show:nnn #1 #2 #3
  {
    * ~ #2
    \prg_replicate:nn { 14 - \str_count:n {#2} } { ~ }
      = ~ \use:c { #1_use:c } { l__enumext_#2_#3_#1 } \\
  }
%% Copy list tools.
\__enumext_at_begin_document:n
  {
    \cs_new_eq:NN \__enumext_start_list:nn \list
    \cs_new_eq:NN \__enumext_stop_list: \endlist
    \cs_new_eq:NN \__enumext_item_std:w \item
  }
%% Copy minipage tools.
\__enumext_at_begin_document:n
  {
    \cs_new_eq:NN \__enumext_minipage:w \minipage
    \cs_new_eq:NN \__enumext_endminipage: \endminipage
  }
%% Detection off |hyperref| package.
\hook_gput_code:nnn { begindocument } { enumext } { \__enumext_after_hyperref: }
\hook_gset_rule:nnnn { begindocument } { enumext } { after } { hyperref }

\cs_new_protected:Nn \__enumext_after_hyperref:
  {
    \IfPackageLoadedTF { hyperref }
      {
        \bool_gset_true:N \g__enumext_keyans_hyperref_bool
        \__enumext_hyper_nopatch_starred:
        \def\hyper@nopatch@counter{}
        \tl_set:Nn \l__enumext_the_counter_vii_tl  { \theHenumXvii  }
        \legacy_if:nT { Hy@hyperfootnotes }
          {
            \typeout{hyperfootnotes=true}
            \bool_set_true:N \l__enumext_hyper_foot_key_bool
          }
      }
      {  }
   % footnotehyper
   \bool_if:NT \l__enumext_hyper_foot_key_bool
     {
       \IfPackageLoadedTF { footnotehyper }
         {
           \typeout{OK ~ hyperref ~ and ~ footnotehyper}
         }
         {
           \typeout{No ~ footnotehyper ~ load}
           \typeout{Load ~ and  ~ use  ~ \string\makesavenoteenv{enumext*}}
           \bool_set_false:N \l__enumext_hyper_foot_key_bool
         }
     }
    \bool_if:NTF \g__enumext_keyans_hyperref_bool
      {
        \cs_new_eq:NN \__enumext_hypertarget:nn \hypertarget
        \cs_new_eq:NN \__enumext_phantomsection: \phantomsection
      }
      {
        \cs_new_eq:NN \__enumext_hypertarget:nn \use_none:nn
        \cs_new_eq:NN \__enumext_phantomsection: \prg_do_nothing:
      }
  }
%% Write |label| in |.aux| file.
\cs_new_protected:Npn \__enumext_keyans_write_aux:nn #1#2
  {
    \protected@write \@auxout { }
      {
        \token_to_str:N \newlabel {#1}
          {
            {#2}
            \bool_if:NT \g__enumext_keyans_hyperref_bool
              { { \thepage } {#2} {#1} }
            { }
          }
      }
    \__enumext_hypertarget:nn {#1} { }
    \__enumext_phantomsection:
  }
%% Definition of counters.
\cs_new_protected:Npn \__enumext_define_counters:Nn #1#2
  {
    \cs_if_exist:cTF { c@ #2 }
      { \msg_fatal:nnn { enumext } { counters }{ #2 } }
      {
        \tl_set:Nn #1 { #2 }
        \newcounter { #2 }
      }
  }
\__enumext_define_counters:Nn \l__enumext_counter_i_tl    { enumXi    }
\__enumext_define_counters:Nn \l__enumext_counter_ii_tl   { enumXii   }
\__enumext_define_counters:Nn \l__enumext_counter_iii_tl  { enumXiii  }
\__enumext_define_counters:Nn \l__enumext_counter_iv_tl   { enumXiv   }
\__enumext_define_counters:Nn \l__enumext_counter_v_tl    { enumXv    }
\__enumext_define_counters:Nn \l__enumext_counter_vi_tl   { enumXvi   }
\__enumext_define_counters:Nn \l__enumext_counter_vii_tl  { enumXvii  }
\__enumext_define_counters:Nn \l__enumext_counter_viii_tl { enumXviii }
%% Register of counters style.
\cs_new_protected:Npn \__enumext_register_counter_style:Nn #1 #2
  {
    \tl_const:cn { c__enumext_widest_ \cs_to_str:N #1 _tl } {#2}
    \tl_gput_right:Nn \g__enumext_counter_styles_tl {#1}
  }
\__enumext_register_counter_style:Nn \arabic { 0 }
\__enumext_register_counter_style:Nn \Alph   { M }
\__enumext_register_counter_style:Nn \alph   { m }
\__enumext_register_counter_style:Nn \Roman  { VIII }
\__enumext_register_counter_style:Nn \roman  { viii }
%% Set default label width using a box width.
\cs_new_protected:Npn \__enumext_label_width_by_box:Nn #1#2
  {
    \hbox_set:Nn \l__enumext_label_width_by_box {#2}
    \dim_set:Nn #1 { \box_wd:N \l__enumext_label_width_by_box }
  }
\cs_generate_variant:Nn \__enumext_label_width_by_box:Nn { cn, cV, cv }
%% Function to suport |*| in |label| key.
\cs_new_protected:Npn \__enumext_label_style:Nnn #1#2#3
  {
    \tl_clear_new:N #1
    \tl_put_right:Ne #1 { \tl_trim_spaces:n {#3} }
    \tl_gset_eq:NN \g__enumext_widest_label_tl #1
    \tl_map_inline:Nn \g__enumext_counter_styles_tl
      {
        \tl_replace_all:Nne #1 { ##1* } { \exp_not:N ##1 {#2} }
        \tl_greplace_all:Nne \g__enumext_widest_label_tl { ##1* }
          { \tl_use:c { c__enumext_widest_ \cs_to_str:N ##1 _tl } }
      }
    \__enumext_label_width_by_box:Nn \l__enumext_current_widest_dim
      { \tl_use:N \g__enumext_widest_label_tl }
    \tl_set_eq:cN { the #2 } #1
  }
\cs_generate_variant:Nn \__enumext_label_style:Nnn { cvn }
%% Add |font|, |labelsep|, |labelwidth| and |wrap-label| keys.
\cs_set_protected:Npn \__enumext_tmp:w #1 #2 #3
  {
    \keys_define:nn { enumext / #1 }
      {
        font           .tl_set:c   = { l__enumext_label_font_style_#2_tl },
        font           .value_required:n = true,
        labelsep       .dim_set:c  = { l__enumext_labelsep_#2_dim },
        labelsep       .initial:n  = {#3},
        labelsep       .value_required:n = true,
        labelwidth     .dim_set:c  = { l__enumext_labelwidth_#2_dim },
        labelwidth     .value_required:n = true,
        wrap-label     .cs_set_protected:cp = { __enumext_wrapper_label_#2:n } ##1,
        wrap-label     .initial:n  = {##1},
        wrap-label     .value_required:n = true,
        wrap-label*    .code:n =
                         {
                           \bool_set_true:c { l__enumext_wrap_label_opt_#2_bool }
                           \keys_set:nn { enumext / #1 } { wrap-label = {##1} }
                         },
        wrap-label*     .value_required:n = true,
      }
  }
\__enumext_tmp:w { level-1  }{    i }{ 0.3333em }
\__enumext_tmp:w { level-2  }{   ii }{ 0.3333em }
\__enumext_tmp:w { level-3  }{  iii }{ 0.3333em }
\__enumext_tmp:w { level-4  }{   iv }{ 0.3333em }
\__enumext_tmp:w { keyans   }{    v }{ 0.3333em }
\__enumext_tmp:w { enumext* }{  vii }{ 0.3333em }
\__enumext_tmp:w { keyans*  }{ viii }{ 0.3333em }
%% Add |aling| key for enummext and keyans .
\cs_set_protected:Npn \__enumext_tmp:w #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        align .choice:,
        align / left   .code:n =
                         {
                           \tl_clear:c { l__enumext_label_fill_left_#2_tl  }
                           \tl_set:cn  { l__enumext_label_fill_right_#2_tl } { \hfill }
                         },
        align / right  .code:n =
                         {
                           \tl_set:cn  { l__enumext_label_fill_left_#2_tl  } { \hfill }
                           \tl_clear:c { l__enumext_label_fill_right_#2_tl }
                         },
        align / center .code:n =
                         {
                           \tl_set:cn { l__enumext_label_fill_left_#2_tl  } { \hfill }
                           \tl_set:cn { l__enumext_label_fill_right_#2_tl } { \hfill }
                          },
        align .initial:n  = left,
        align .value_required:n  = true,
      }
  }
\__enumext_tmp:w { level-1  }{    i }
\__enumext_tmp:w { level-2  }{   ii }
\__enumext_tmp:w { level-3  }{  iii }
\__enumext_tmp:w { level-4  }{   iv }
\__enumext_tmp:w { keyans   }{    v }
%% Add |aling| key for enummext* and keyans*.
\cs_set_protected:Npn \__enumext_tmp:w #1 #2
  {
    \tl_new:c { l__enumext_align_label_#2_tl }
    \keys_define:nn { enumext / #1 }
      {
        align .choice:,
        align / left   .code:n = \tl_set:cn { l__enumext_align_label_#2_tl } { l },
        align / right  .code:n = \tl_set:cn { l__enumext_align_label_#2_tl } { r },
        align / center .code:n = \tl_set:cn { l__enumext_align_label_#2_tl } { c },
        align .initial:n  = right,
        align .value_required:n  = true,
      }
  }
\__enumext_tmp:w { enumext* }{  vii }
\__enumext_tmp:w { keyans*  }{ viii }
%% Regex for replace * for |ref| key.
\cs_new_protected:Nn \__enumext_regex_label_ref_key:
  {
    \tl_map_inline:Nn \c__enumext_counter_style_tl
      {
        \regex_replace_once:nnN { \c{##1}\* }
          { \c{##1}\cB{\u{l__enumext_ref_aux_tl}\cE} } \l__enumext_ref_key_arg_tl
      }
  }
%% Internal function used by |ref| key in enumext environment.
\cs_new_protected:Npn \__enumext_set_label_ref:n #1
  {
    \tl_set:Nn \l__enumext_the_counter_i_tl { \theenumXi }
    \tl_set:Nn \l__enumext_the_counter_ii_tl { \theenumXii }
    \tl_set:Nn \l__enumext_the_counter_iii_tl { \theenumXiii }
    \tl_set:Nn \l__enumext_the_counter_iv_tl { \theenumXiv }
    \tl_set:Nn \l__enumext_ref_key_arg_tl {#1}
    \tl_set_eq:Nc \l__enumext_ref_aux_tl { l__enumext_counter_ \__enumext_level: _tl }
    \__enumext_regex_label_ref_key:
    \tl_set_eq:Nc \l__enumext_ref_aux_tl { l__enumext_the_counter_ \__enumext_level: _tl }
    \tl_put_right:ce { l__enumext_counter_style_for_ref_ \__enumext_level: _tl }
      {
        \exp_not:N \renewcommand { \exp_not:V \l__enumext_ref_aux_tl }
          { \exp_not:V \l__enumext_ref_key_arg_tl }
      }
  }
%% Activate |ref| key in second arg of list for enumext environment.
\cs_new_protected:Nn \__enumext_use_key_ref:
  {
    \tl_if_empty:cF { l__enumext_counter_style_for_ref_ \__enumext_level: _tl }
      {
        \tl_use:c { l__enumext_counter_style_for_ref_ \__enumext_level: _tl }
      }
  }
%% Internal function used by |ref| key in enumext* and keyans* environment.
\cs_new_protected:Npn \__enumext_set_label_ref_h:n #1
  {
    \tl_set:Nn \l__enumext_ref_key_arg_tl {#1}
    \tl_set:Nn \l__enumext_the_counter_vii_tl  { \theenumXvii  }
    \tl_set:Nn \l__enumext_the_counter_viii_tl { \theenumXviii }
    \int_compare:nNnTF { \l__enumext_level_h_int } = { 1 }
      {
        %\tl_set:Nn \l__enumext_the_counter_vii_tl  { \theenumXvii  }
        \tl_set_eq:NN \l__enumext_ref_aux_tl \l__enumext_counter_vii_tl
        \__enumext_regex_label_ref_key:
        \tl_set_eq:NN \l__enumext_ref_aux_tl \l__enumext_the_counter_vii_tl
        \tl_put_right:Ne \l__enumext_counter_style_for_ref_vii_tl
          {
            %\exp_not:N \renewcommand { \exp_not:N \theHenumXvii  }{ \exp_not:V \l__enumext_ref_key_arg_tl }%{ \theenumXvii }
            \exp_not:N \renewcommand { \exp_not:V \l__enumext_ref_aux_tl }
              { \exp_not:V \l__enumext_ref_key_arg_tl }

          }
      %%  \tl_set:Nn \l__enumext_the_counter_vii_tl  { \theHenumXvii  }
      %%%     \exp_not:N \renewcommand { \theHenumXvii  }{ \exp_not:V \l__enumext_ref_key_arg_tl }%{ \theenumXvii }
      }
      {
        \tl_set_eq:NN \l__enumext_ref_aux_tl \l__enumext_counter_viii_tl
        \__enumext_regex_label_ref_key:
        \tl_set_eq:NN \l__enumext_ref_aux_tl \l__enumext_the_counter_viii_tl
        \tl_put_right:Ne \l__enumext_counter_style_for_ref_vii_tl
          {
            \exp_not:N \renewcommand { \exp_not:V \l__enumext_ref_aux_tl }
              { \exp_not:V \l__enumext_ref_key_arg_tl }
          }
      }
  }
%% Activate |ref| key in second arg of list for starred* environments.
\cs_new_protected:Nn \__enumext_use_key_ref_h:
  {
    \int_compare:nNnTF { \l__enumext_level_h_int } = { 1 }
      {
        \tl_if_empty:NF \l__enumext_counter_style_for_ref_vii_tl
          {
            \tl_use:N \l__enumext_counter_style_for_ref_vii_tl
          }
      }
      {
        \tl_if_empty:NF \l__enumext_counter_style_for_ref_viii_tl
          {
            \tl_use:N \l__enumext_counter_style_for_ref_viii_tl
          }
      }
  }
%% Define and set |label| and |ref| keys for |enumext|.
\cs_set_protected:Npn \__enumext_tmp:w #1 #2 #3
  {
    \keys_define:nn { enumext / #1 }
      {
        label .code:n    = {
                             \__enumext_label_style:cvn { l__enumext_label_#2_tl }
                               { l__enumext_counter_#2_tl } {##1}
                             \dim_set_eq:cN  { l__enumext_labelwidth_#2_dim }
                               \l__enumext_current_widest_dim
                           },
        label .initial:n = #3,
        label .value_required:n = true,
        ref   .code:n    = \__enumext_set_label_ref:n {##1},
        ref   .value_required:n = true,
      }
  }
\__enumext_tmp:w { level-1 } {   i } { \arabic*.}
\__enumext_tmp:w { level-2 } {  ii } { (\alph*) }
\__enumext_tmp:w { level-3 } { iii } { \roman*. }
\__enumext_tmp:w { level-4 } {  iv } { \Alph*.  }
%% Define and set |label| and |ref| keys for starred environments.
\cs_set_protected:Npn \__enumext_tmp:w #1 #2 #3
  {
    \keys_define:nn { enumext / #1 }
      {
        label .code:n    = {
                             \__enumext_label_style:cvn { l__enumext_label_#2_tl }
                               { l__enumext_counter_#2_tl } {##1}
                             \dim_set_eq:cN  { l__enumext_labelwidth_#2_dim }
                               \l__enumext_current_widest_dim
                           },
        label .initial:n = #3,
        label .value_required:n = true,
        ref   .code:n    = \__enumext_set_label_ref_h:n {##1},
        ref   .value_required:n = true,
      }
  }
\__enumext_tmp:w { enumext* } {  vii } { \arabic*.}
\__enumext_tmp:w { keyans*  } { viii } { (\Alph*) }
%% Define and set |label| key for |keyans| and |keyanspic|.
\keys_define:nn { enumext / keyans }
  {
    label .code:n    = {
                         \__enumext_label_style:cvn { l__enumext_label_v_tl }
                           { l__enumext_counter_v_tl } {#1}
                         \dim_set_eq:cN  { l__enumext_labelwidth_v_dim }
                           \l__enumext_current_widest_dim
                         \__enumext_label_style:cvn { l__enumext_label_vi_tl }
                            { l__enumext_counter_vi_tl } {#1}
                         \dim_set_eq:cN  { l__enumext_labelwidth_v_dim }
                            \l__enumext_current_widest_dim
                       },
    label .initial:n = (\Alph*),
    label .value_required:n = true,
  }
%% Internal function for |start| key.
%% #1 \l_enumext_label_X_tl
%% #2 \l_enumext_start_X_int
%% #3 integer or string
%%\cs_generate_variant:Nn \regex_match:nnT { nVT }
\prg_generate_conditional_variant:Nnn \regex_match:nn { nV } { T,F,TF }

\cs_new_protected:Npn \__enumext_start_from:NNn #1#2#3
  {
    \__enumext_if_is_int:nTF { #3 }
       {
         \typeout{TRUE}
         \int_set:Nn #2 {#3}
       }
       {
         \typeout{FALSE}
         \regex_match:nVT { \c{Alph} | \c{alph} } {#1}
           { \int_set:Nn #2 { \int_from_alph:n {#3} } }
         \regex_match:nVT { \c{Roman} | \c{roman} } {#1}
           { \int_set:Nn #2  { \int_from_roman:n {#3} } }
       }
  }
\cs_generate_variant:Nn \__enumext_start_from:NNn { ccn }
%%\cs_generate_variant:Nn \__enumext_start_from:NNn { ccn }
%% Internal function for |widest| key.
%% #1 The counter associated with the environment level
%% #2 \l_enumext_label_X_tl
%% #3 \l_enumext_labelwidth_X_tl
%% #4 integer or string
\cs_new_protected:Npn \__enumext_widest_from:nNNn #1#2#3#4
  {
    \__enumext_if_is_int:nTF {#4}
      {
        \setcounter{enumX#1} { #4 }
      }
      {
        %\typeout{FALSE}
        %%\typeout{#2}
        %%\tl_show:c {#2}
        \regex_match:nVT { \c{Alph} | \c{alph} } #2
          {
         %   \typeout{TRUE}
            \setcounter{enumX#1} { \int_from_alph:n {#4} }
          }
        \regex_match:nVT { \c{Roman} | \c{roman} } #2
          {
           \typeout{TRUE}
            \setcounter{enumX#1} { \int_from_roman:n {#4} } }
      }
     \__enumext_label_width_by_box:cv
       { l__enumext_labelwidth_#1_dim } { l__enumext_label_#1_tl }
  }
\cs_generate_variant:Nn \__enumext_widest_from:nNNn { nccn }

%% Add |start| and |widest| key.
\cs_set_protected:Npn \__enumext_tmp:w #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        start  .code:n    = {
                              \__enumext_start_from:ccn
                                { l__enumext_label_#2_tl }
                                { l__enumext_start_#2_int } {##1}
                             },
        start  .initial:n = 1,
        widest .code:n    = {
                              \__enumext_widest_from:nccn {#2}
                                { l__enumext_label_#2_tl }
                                { l__enumext_labelwidth_#2_dim } {##1}
                            },
        widest .value_required:n = true,
        start  .value_required:n = true,
      }
  }
\__enumext_tmp:w { level-1  } {    i }
\__enumext_tmp:w { level-2  } {   ii }
\__enumext_tmp:w { level-3  } {  iii }
\__enumext_tmp:w { level-4  } {   iv }
\__enumext_tmp:w { keyans   } {    v }
\__enumext_tmp:w { enumext* } {  vii }
\__enumext_tmp:w { keyans*  } { viii }
%% Add |topsep|, |partopsep|, |parsep|, |noitemsep| and |nosep| keys.
\cs_set_protected:Npn \__enumext_tmp:w #1 #2 #3 #4 #5 #6
  {
    \keys_define:nn { enumext / #1 }
      {
        topsep    .skip_set:c = { l__enumext_topsep_#2_skip },
        topsep    .initial:n  = {#3},
        topsep    .value_required:n = true,
        partopsep .skip_set:c = { l__enumext_partopsep_#2_skip },
        partopsep .initial:n  = {#4},
        partopsep .value_required:n = true,
        parsep    .skip_set:c = { l__enumext_parsep_#2_skip },
        parsep    .initial:n  = {#5},
        parsep    .value_required:n = true,
        itemsep   .skip_set:c = { l__enumext_itemsep_#2_skip },
        itemsep   .initial:n  = {#6},
        itemsep   .value_required:n = true,
        noitemsep .meta:n     = { itemsep = 0pt, parsep = 0pt },
        noitemsep .value_forbidden:n = true,
        nosep     .meta:n     = {
                                  itemsep = 0pt, parsep= 0pt,
                                  topsep = 0pt, partopsep = 0pt,
                                },
        nosep     .value_forbidden:n = true,
      }
  }
\__enumext_tmp:w { level-1 } { i } { 8.0pt plus 2.0pt minus 4.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt } { 4.0pt plus 2.0pt minus 1.0pt }
  { 4.0pt plus 2.0pt minus 1.0pt }
\__enumext_tmp:w { level-2 } { ii } { 4.0pt plus 2.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt } { 2.0pt plus 1.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt }
\__enumext_tmp:w { level-3 } { iii } { 2.0pt plus 1.0pt minus 1.0pt }
  { 1.0pt minus 1.0pt }{ 0pt }{ 2.0pt plus 1.0pt minus 1.0pt }
\__enumext_tmp:w { level-4 } { iv } { 2.0pt plus 1.0pt minus 1.0pt }
  { 1.0pt minus 1.0pt }{ 0pt }{ 2.0pt plus 1.0pt minus 1.0pt }
\__enumext_tmp:w { keyans  } { v }{ 4.0pt plus 2.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt }{ 2.0pt plus 1.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt }
%% Add |topsep|, |partopsep|, |parsep|, |noitemsep| and |nosep| keys for starred environment.
\cs_set_protected:Npn \__enumext_tmp:w #1 #2 #3 #4 #5 #6
  {
    \keys_define:nn { enumext / #1 }
      {
        topsep    .skip_set:c = { l__enumext_topsep_#2_skip },
        topsep    .initial:n  = {#3},
        topsep    .value_required:n = true,
        partopsep .meta:n     = { topsep = {##1} },
        partopsep .initial:n  = {#3},
        partopsep .value_required:n = true,
        itemsep   .skip_set:c = { l__enumext_itemsep_#2_skip },
        itemsep   .initial:n  = {#6},
        itemsep   .value_required:n = true,
        parsep    .meta:n     = { itemsep = {##1} },
        parsep    .initial:n  = {#6},
        parsep    .value_required:n = true,
        noitemsep .meta:n     = { itemsep = 0pt, parsep = 0pt },
        noitemsep .value_forbidden:n = true,
        nosep     .meta:n     = {
                                  itemsep = 0pt, parsep= 0pt,
                                  topsep = 0pt, partopsep = 0pt,
                                },
        nosep     .value_forbidden:n = true,
      }
  }
\__enumext_tmp:w { enumext* } { vii } { 8.0pt plus 2.0pt minus 4.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt } { 4.0pt plus 2.0pt minus 1.0pt }
  { 4.0pt plus 2.0pt minus 1.0pt }
\__enumext_tmp:w { keyans* } { viii } { 4.0pt plus 2.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt } { 2.0pt plus 1.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt }
%% Add |rightmargin|, |listparindent|, |list-offset| and |list-indent| keys.
\cs_set_protected:Npn \__enumext_tmp:w #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        rightmargin   .dim_set:c  = { l__enumext_rightmargin_#2_dim },
        rightmargin   .initial:n  = 0pt,
        rightmargin   .value_required:n = true,
        listparindent .dim_set:c  = { l__enumext_listparindent_#2_dim },
        listparindent .initial:n  = 0pt,
        listparindent .value_required:n = true,
        list-offset   .dim_set:c  = { l__enumext_listoffset_#2_dim },
        list-offset   .initial:n  = 0pt,
        list-offset   .value_required:n = true,
        list-indent   .code:n     =
                    \bool_set_true:c { l__enumext_custom_margin_#2_bool }
                    \dim_set:cn { l__enumext_leftmargin_tmp_#2_dim } {##1},
        list-indent   .value_required:n = true,
      }
  }
\__enumext_tmp:w { level-1  } {    i }
\__enumext_tmp:w { level-2  } {   ii }
\__enumext_tmp:w { level-3  } {  iii }
\__enumext_tmp:w { level-4  } {   iv }
\__enumext_tmp:w { keyans   } {    v }
\__enumext_tmp:w { enumext* } {  vii }
\__enumext_tmp:w { keyans*  } { viii }
\cs_set_protected:Npn \__enumext_tmp:w #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        list-indent   .initial:n  = #2,
      }
  }
\__enumext_tmp:w { enumext* } { 0pt }
\__enumext_tmp:w { keyans*  } { 0pt }

%% Add |show-length| key.
\cs_set_protected:Npn \__enumext_tmp:w #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        show-length .bool_set:c = { l__enumext_show_info_length_#2_bool },
        show-length .initial:n  = false,
      }
  }
\__enumext_tmp:w { level-1  } {    i }
\__enumext_tmp:w { level-2  } {   ii }
\__enumext_tmp:w { level-3  } {  iii }
\__enumext_tmp:w { level-4  } {   iv }
\__enumext_tmp:w { keyans   } {    v }
\__enumext_tmp:w { enumext* } {  vii }
\__enumext_tmp:w { keyans*  } { viii }
%% Add |before|, |before*|, |after| and |first| keys.
\cs_set_protected:Npn \__enumext_tmp:w #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        before  .tl_set:c   = { l__enumext_before_no_starred_key_#2_tl },
        before  .value_required:n = true,
        before* .tl_set:c   = { l__enumext_before_starred_key_#2_tl },
        before* .value_required:n = true,
        after   .tl_set:c   = { l__enumext_after_stop_list_#2_tl },
        after   .value_required:n = true,
        first   .tl_set:c   = { l__enumext_after_list_args_#2_tl },
        first   .value_required:n = true,
      }
  }
\__enumext_tmp:w { level-1  } {    i }
\__enumext_tmp:w { level-2  } {   ii }
\__enumext_tmp:w { level-3  } {  iii }
\__enumext_tmp:w { level-4  } {   iv }
\__enumext_tmp:w { keyans   } {    v }
\__enumext_tmp:w { enumext* } {  vii }
\__enumext_tmp:w { keyans*  } { viii }
%% Function for |before|, |before*|, |after| and |first| keys in |enumext|.
\cs_new_protected:Nn \__enumext_before_args_exec:
  {
    \tl_use:c { l__enumext_before_starred_key_ \__enumext_level: _tl }
  }
\cs_new_protected:Nn \__enumext_before_keys_exec:
  {
    \tl_use:c { l__enumext_before_no_starred_key_ \__enumext_level: _tl }
  }
\cs_new_protected:Nn \__enumext_after_stop_list:
  {
    \tl_use:c { l__enumext_after_stop_list_ \__enumext_level: _tl }
  }
\cs_new_protected:Nn \__enumext_after_args_exec:
  {
    \tl_use:c { l__enumext_after_list_args_ \__enumext_level: _tl }
  }
%% Function for |before|, |before*|, |after| and |first| keys in |keyans|.
\cs_new_protected:Nn \__enumext_keyans_before_args_exec:
  {
    \tl_use:N \l__enumext_before_starred_key_v_tl
  }
\cs_new_protected:Nn \__enumext_keyans_before_keys_exec:
  {
    \tl_use:N \l__enumext_before_no_starred_key_v_tl
  }
\cs_new_protected:Nn \__enumext_keyans_after_stop_list:
  {
    \tl_use:N \l__enumext_after_stop_list_v_tl
  }
\cs_new_protected:Nn \__enumext_keyans_after_args_exec:
  {
    \tl_use:N \l__enumext_after_list_args_v_tl
  }
%% Add |mini-env|, |mini-sep|, |columns-sep| and |columns| keys.
\cs_set_protected:Npn \__enumext_tmp:w #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        mini-env    .dim_set:c  = { l__enumext_minipage_right_#2_dim },
        mini-env    .value_required:n = true,
        mini-sep    .dim_set:c  = { l__enumext_minipage_hsep_#2_dim },
        mini-sep    .initial:n  = 0.3333em,
        mini-sep    .value_required:n = true,
        columns-sep .code:n     = \bool_set_true:c { l__enumext_columns_sep_#2_bool }
                                  \dim_set:cn { l__enumext_columns_sep_#2_dim } {##1},
        columns-sep .value_required:n = true,
        columns     .int_set:c  = { l__enumext_columns_#2_int },
        columns     .initial:n  = 1,
        columns     .value_required:n = true,
      }
  }
\__enumext_tmp:w { level-1  } {    i }
\__enumext_tmp:w { level-2  } {   ii }
\__enumext_tmp:w { level-3  } {  iii }
\__enumext_tmp:w { level-4  } {   iv }
\__enumext_tmp:w { keyans   } {    v }
\__enumext_tmp:w { enumext* } {  vii }
\__enumext_tmp:w { keyans*  } { viii }
%% Set |columns=2| keys for starred environments.
\cs_set_protected:Npn \__enumext_tmp:w #1
  {
    \keys_define:nn { enumext / #1 }
      {
        columns     .initial:n  = 2,
      }
  }
\__enumext_tmp:w { enumext* }
\__enumext_tmp:w { keyans*  }
 %
%% Adjustment of vertical spacing for |multicols| in |enumext|.
\cs_new_protected:Nn \__enumext_multi_set_vskip:
  {
    \skip_set:cn { l__enumext_multicols_above_ \__enumext_level: _skip }
      {
         \skip_use:c { l__enumext_topsep_ \__enumext_level: _skip }
      }
    \skip_set:cn { l__enumext_multicols_below_ \__enumext_level: _skip }
      {
         \skip_use:c { l__enumext_topsep_ \__enumext_level: _skip }
      }
   }
%% Add vertical spacing for |multicols| in |enumext|.
\cs_new_protected:Nn \__enumext_multi_addvspace:
  {
    \__enumext_multi_set_vskip:
    \mode_if_vertical:T
      {
        \skip_add:cn { l__enumext_multicols_above_ \__enumext_level: _skip }
          {
            \skip_use:c { l__enumext_partopsep_ \__enumext_level: _skip }
          }
        \skip_add:cn { l__enumext_multicols_below_ \__enumext_level: _skip }
          {
            \skip_use:c { l__enumext_partopsep_ \__enumext_level: _skip }
          }
      }
    \par\nopagebreak
    \addvspace{ \skip_use:c { l__enumext_multicols_above_ \__enumext_level: _skip } }
  }
%% Adjustment of vertical spacing for |multicols| in |keyans|.
\cs_new_protected:Nn \__enumext_keyans_multi_set_vskip:
  {
    \skip_set:Nn \l__enumext_multicols_above_v_skip
      {
        \l__enumext_topsep_v_skip
      }
    \skip_set:Nn \l__enumext_multicols_below_v_skip
      {
         \l__enumext_topsep_v_skip
      }
  }
\cs_new_protected:Nn \__enumext_keyans_multi_addvspace:
  {
    \__enumext_keyans_multi_set_vskip:
    \mode_if_vertical:T
      {
        \skip_add:Nn \l__enumext_multicols_above_v_skip
          {
            \skip_use:N \l__enumext_partopsep_v_skip
          }
        \skip_add:Nn \l__enumext_multicols_below_v_skip
          {
            \skip_use:N \l__enumext_partopsep_v_skip
          }
      }
    \par\nopagebreak
    \addvspace{ \l__enumext_multicols_above_v_skip }
  }
%% Function for define custom (internal) minipage environment.
\cs_new_protected:Nn \__enumext_make_custom_minipage:
  {
    \DeclareDocumentEnvironment{__enumext_mini_env*}{ m }
      {
        \__enumext_minipage:w [ t ] { ##1 }
        \legacy_if_gset_false:n { @minipage }
        \vspace {0pt}
      }
      { \__enumext_endminipage: }
  }
%% Adjustment of vertical spacing for |minipage| in |enumext|.
\cs_new_protected:Nn \__enumext_mini_set_vskip:
  {
    \int_compare:nNnTF
      { \int_use:c { l__enumext_columns_ \__enumext_level: _int } } > { 1 }
      {
        \skip_if_eq:nnTF
          { \skip_use:c { l__enumext_topsep_ \__enumext_level: _skip } } { \c_zero_skip }
          {
            \skip_set:Nn \l__enumext_minipage_left_skip
              {
                -0.150\box_dp:N \strutbox
              }
            \skip_set:Nn \l__enumext_minipage_right_skip
              {
                0.695\box_dp:N \strutbox
              }
            \skip_set:Nn \l__enumext_minipage_after_skip
              {
                \box_dp:N \strutbox
              }
            \__enumext_zero_parsep:
          }
          {
            \skip_set:Nn \l__enumext_minipage_left_skip
              {
                + \skip_use:c { l__enumext_topsep_ \__enumext_level: _skip }
              }
            \skip_set:Nn \l__enumext_minipage_right_skip
              {
                0.695\box_dp:N \strutbox
              }
            \skip_set:Nn \l__enumext_minipage_after_skip
              {
                1.85\box_dp:N \strutbox
                + \skip_use:c { l__enumext_topsep_ \__enumext_level: _skip }
              }
          }
      }
      {
        \skip_if_eq:nnTF
          { \skip_use:c { l__enumext_topsep_ \__enumext_level: _skip } } { \c_zero_skip }
          {
            \skip_set:Nn \l__enumext_minipage_left_skip
              {
                0.5\box_dp:N \strutbox
                - \skip_use:c { l__enumext_partopsep_ \__enumext_level: _skip }
              }
            \skip_set:Nn \l__enumext_minipage_right_skip
              {
                \skip_use:c { l__enumext_partopsep_ \__enumext_level: _skip }
              }
            \skip_set:Nn \l__enumext_minipage_after_skip
              {
                1.6\box_dp:N \strutbox
              }
          }
          {
            \skip_set:Nn \l__enumext_minipage_left_skip
              {
                0.5875\box_dp:N \strutbox
                - \skip_use:c { l__enumext_partopsep_ \__enumext_level: _skip }
              }
            \skip_set:Nn \l__enumext_minipage_right_skip
              {
                + \skip_use:c { l__enumext_topsep_ \__enumext_level: _skip }
                + \skip_use:c { l__enumext_partopsep_ \__enumext_level: _skip }
              }
            \skip_set:Nn \l__enumext_minipage_after_skip
              {
                0.325\box_dp:N \strutbox
                + \skip_use:c { l__enumext_topsep_ \__enumext_level: _skip }
              }
          }
      }
  }
%% Detect |\parsep| from previus level and adjust |\l_@@_minipage_after_skip| for |multicols| in |enumext|.
\cs_new_protected:Nn \__enumext_zero_parsep:
  {
    \int_case:nn { \l__enumext_level_int }
      {
        { 2 }{
               \skip_if_eq:nnF { \l__enumext_parsep_i_skip } { \c_zero_skip }
                 {
                   \skip_add:Nn \l__enumext_minipage_after_skip { 2.15\box_dp:N \strutbox }
                 }
             }
        { 3 }{
               \skip_if_eq:nnF { \l__enumext_parsep_ii_skip } { \c_zero_skip }
                 {
                   \skip_add:Nn \l__enumext_minipage_after_skip { 2.15\box_dp:N \strutbox }
                 }
             }
        { 4 }{
               \skip_if_eq:nnF { \l__enumext_parsep_iii_skip } { \c_zero_skip }
                 {
                   \skip_add:Nn \l__enumext_minipage_after_skip { 2.15\box_dp:N \strutbox }
                 }
             }
      }
  }
%% Aplly \addvspace in horizontal and vertical mode for enumext environment.
\cs_new_protected:Nn \__enumext_mini_addvspace:
  {
    \__enumext_mini_set_vskip:
    \mode_if_vertical:T
      {
        \skip_add:Nn \l__enumext_minipage_left_skip
          {
            \skip_use:c { l__enumext_partopsep_ \__enumext_level: _skip }
          }
        \skip_add:Nn \l__enumext_minipage_after_skip
          {
            \skip_use:c { l__enumext_partopsep_ \__enumext_level: _skip }
          }
      }
    \par\nopagebreak
    \addvspace { \l__enumext_minipage_left_skip }
  }
%% Adjustment of vertical spacing for |minipage| in |keyans|.
\cs_new_protected:Nn \__enumext_keyans_mini_set_vskip:
  {
    \skip_zero_new:N \l__enumext_minipage_after_skip
    \skip_zero_new:N \l__enumext_minipage_left_skip
    \skip_zero_new:N \l__enumext_minipage_right_skip
    \int_compare:nNnTF { \l__enumext_columns_v_int } > { 1 }
      {
        \skip_if_eq:nnTF { \l__enumext_topsep_v_skip } { \c_zero_skip }
          {
            \skip_set:Nn \l__enumext_minipage_left_skip { -0.25\box_dp:N \strutbox }
            \skip_set:Nn \l__enumext_minipage_right_skip { 0.705\box_dp:N \strutbox }
            \skip_set:Nn \l__enumext_minipage_after_skip { \box_dp:N \strutbox }
            \skip_if_eq:nnF { \l__enumext_parsep_i_skip } { \c_zero_skip }
              {
                \skip_add:Nn \l__enumext_minipage_after_skip { 2.15\box_dp:N \strutbox }
              }
          }
          {
            \skip_set:Nn \l__enumext_minipage_left_skip
              {
                \skip_use:N \l__enumext_topsep_v_skip
              }
            \skip_set:Nn \l__enumext_minipage_right_skip
              {
                0.705\box_dp:N \strutbox
              }
            \skip_set:Nn \l__enumext_minipage_after_skip
              {
                1.85\box_dp:N \strutbox + \l__enumext_topsep_v_skip
              }
          }
      }
      {
        \skip_if_eq:nnTF { \l__enumext_topsep_v_skip } { \c_zero_skip }
          {
            \skip_set:Nn \l__enumext_minipage_left_skip
              {
                0.5\box_dp:N \strutbox
                + \l__enumext_partopsep_v_skip
              }
            \skip_set:Nn \l__enumext_minipage_right_skip
              {
                + \l__enumext_partopsep_v_skip
              }
            \skip_set:Nn \l__enumext_minipage_after_skip { 1.6\box_dp:N \strutbox }
          }
          {
            \skip_set:Nn \l__enumext_minipage_left_skip
              {
                0.5875\box_dp:N \strutbox - \l__enumext_partopsep_v_skip
              }
            \skip_set:Nn \l__enumext_minipage_right_skip
              {
                \l__enumext_topsep_v_skip + \l__enumext_partopsep_v_skip
              }
            \skip_set:Nn \l__enumext_minipage_after_skip
              {
                0.325\box_dp:N \strutbox + \l__enumext_topsep_v_skip
              }
          }
      }
  }
%% Aplly \addvspace in horizontal and vertical mode for |keyans| environment.
\cs_new_protected:Nn \__enumext_keyans_mini_addvspace:
  {
    \__enumext_keyans_mini_set_vskip:
    \mode_if_vertical:T
      {
        \skip_add:Nn \l__enumext_minipage_left_skip
          {
            \l__enumext_partopsep_v_skip
          }
        \skip_add:Nn \l__enumext_minipage_after_skip
          {
            \l__enumext_partopsep_v_skip
          }
      }
    \par\nopagebreak
    \addvspace { \l__enumext_minipage_left_skip }
  }
%% Definition of |\miniright| command.
\NewDocumentCommand \miniright { s }
  {
    \int_compare:nNnTF { \l__enumext_keyans_pic_level_int } = { 1 }
      {
        \msg_error:nnn { enumext } { wrong-miniright-place }
      }
    \int_compare:nNnTF { \l__enumext_level_int } = { 0 }
      {
        \msg_error:nnn { enumext } { wrong-miniright-place }
      }
    \int_compare:nNnTF { \l__enumext_keyans_level_int } = { 1 }
      {
        \__enumext_keyans_mini_right_cmd:n {#1}
      }
      { \__enumext_mini_right_cmd:n {#1} }
  }
%% Internal function for |\miniright| command in enumext.
\cs_new_protected:Npn \__enumext_mini_right_cmd:n #1
  {
    \dim_compare:nNnTF
      { \dim_use:c { l__enumext_minipage_right_ \__enumext_level: _dim } } > { \c_zero_dim }
      {
        \__enumext_multicols_stop:
        \end{__enumext_mini_env*}
        \hfill
        \begin{__enumext_mini_env*}
          { \dim_use:c { l__enumext_minipage_right_ \__enumext_level: _dim } }
          \par\addvspace { \l__enumext_minipage_right_skip }
          \bool_if:nF {#1}
            {
              \centering
            }
          \int_gzero:N \g__enumext_minipage_stat_int
      }
      { \msg_error:nnn { enumext } { wrong-miniright-use } }
  }
%% Internal function for |\miniright| command in keyans.
\cs_new_protected:Npn \__enumext_keyans_mini_right_cmd:n #1
  {
    \dim_compare:nNnTF { \l__enumext_minipage_right_v_dim } > { \c_zero_dim }
      {
        \__enumext_keyans_multicols_stop:
        \end{__enumext_mini_env*}
        \hfill
        \begin{__enumext_mini_env*}{ \l__enumext_minipage_right_v_dim }
          \par\addvspace { \l__enumext_minipage_right_skip }
          \bool_if:nF {#1}
            {
              \centering
            }
          \int_gzero:N \g__enumext_minipage_stat_int
      }
      { \msg_error:nnn { enumext } { wrong-miniright-use } }
  }
%% Add |above| and |below| keys.
\cs_set_protected:Npn \__enumext_tmp:w #1 #2
  {
    \bool_new:c { l__enumext_vspace_a_star_#2_bool }
    \skip_new:c { l__enumext_vspace_above_#2_skip  }
    \bool_new:c { l__enumext_vspace_b_star_#2_bool }
    \skip_new:c { l__enumext_vspace_below_#2_skip  }
    \keys_define:nn { enumext / #1 }
      {
        above  .skip_set:c = { l__enumext_vspace_above_#2_skip },
        above  .value_required:n = true,
        above* .code:n     = \bool_set_true:c { l__enumext_vspace_a_star_#2_bool }
                             \skip_set:cn { l__enumext_vspace_above_#2_skip } {##1},
        above* .value_required:n = true,
        below  .skip_set:c = { l__enumext_vspace_below_#2_skip },
        below  .value_required:n = true,
        below* .code:n     = \bool_set_true:c { l__enumext_vspace_b_star_#2_bool }
                             \skip_set:cn { l__enumext_vspace_below_#2_skip } {##1},
        below* .value_required:n = true,
      }
  }
\__enumext_tmp:w { level-1  } {     i }
\__enumext_tmp:w { level-2  } {    ii }
\__enumext_tmp:w { level-3  } {   iii }
\__enumext_tmp:w { level-4  } {    iv }
\__enumext_tmp:w { keyans   } {    v }
\__enumext_tmp:w { enumext* } {   vii }
\__enumext_tmp:w { keyans*  } {  viii }
%% Function for |above|, |above*|, |below| and |below*| keys in |enumext|.
\cs_new_protected:Nn \__enumext_vspace_above:
  {
    \skip_if_eq:nnF
      { \skip_use:c { l__enumext_vspace_above_ \__enumext_level: _skip } } { \c_zero_skip }
      {
        \bool_if:cTF { l__enumext_vspace_a_star_ \__enumext_level: _bool }
          {
            \vspace*{ \skip_use:c { l__enumext_vspace_above_ \__enumext_level: _skip } }
          }
          {
            \vspace { \skip_use:c { l__enumext_vspace_above_ \__enumext_level: _skip } }
          }
      }
  }
\cs_new_protected:Nn \__enumext_vspace_below:
  {
    \skip_if_eq:nnF
      { \skip_use:c { l__enumext_vspace_below_ \__enumext_level: _skip } } { \c_zero_skip }
      {
        \bool_if:cTF { l__enumext_vspace_b_star_ \__enumext_level: _bool }
          {
            \vspace*{ \skip_use:c { l__enumext_vspace_below_ \__enumext_level: _skip } }
          }
          {
            \vspace { \skip_use:c { l__enumext_vspace_below_ \__enumext_level: _skip } }
          }
      }
  }
%% Function for |above|, |above*|, |below| and |below*| keys in |keyans|.
\cs_new_protected:Nn \__enumext_keyans_vspace_above:
  {
    \skip_if_eq:nnF { \l__enumext_vspace_above_v_skip } { \c_zero_skip }
      {
        \bool_if:NTF \l__enumext_vspace_a_star_v_bool
          {
            \vspace*{ \l__enumext_vspace_above_v_skip }
          }
          { \vspace { \l__enumext_vspace_above_v_skip } }
      }
  }
\cs_new_protected:Nn \__enumext_keyans_vspace_below:
  {
    \skip_if_eq:nnF { \l__enumext_vspace_below_v_skip } { \c_zero_skip }
      {
        \bool_if:NTF \l__enumext_vspace_b_star_v_bool
          {
            \vspace*{ \l__enumext_vspace_below_v_skip }
          }
          { \vspace { \l__enumext_vspace_below_v_skip } }
      }
  }
%% Add |save-ans| and |resume| keys only on first level of |enumext|.
\keys_define:nn { enumext / level-1 }
  {
    save-ans .code:n = \__enumext_keyans_storing_set:n {#1},
    save-ans .value_required:n = true,
    resume   .code:n = \__enumext_resume_counter:,
    resume   .value_forbidden:n = true,
  }
%% Add |resume| key only on first level of |enumext*|.
\keys_define:nn { enumext / enumext* }
  {
    resume   .code:n = \__enumext_resume_counter_vii:,
    resume   .value_forbidden:n = true,
  }
%% Function to activate ALL storing (and check) used by |save-ans| key.
\cs_new_protected:Npn \__enumext_keyans_storing_set:n #1
  {
    \tl_set:Ne \l__enumext_keyans_name_tl {#1}
    \bool_set_true:N \l__enumext_keyans_active_bool
    \int_if_exist:cF { g__enumext_resume_#1_int }
      {
        \int_new:c { g__enumext_resume_#1_int }
      }
    \__enumext_keyans_make_int:n {#1}
  }
%% Internal function used by |resume| key.
\cs_new_protected:Nn \__enumext_resume_counter:
  {
    \bool_if:NT \l__enumext_keyans_active_bool
      {
        \int_gset:Nn \g__enumext_resume_int
          {
            \int_use:c { g__enumext_resume_ \l__enumext_keyans_name_tl _int }
          }
      }
    \bool_set_true:N \l__enumext_resume_bool
  }
\cs_new_protected:Nn \__enumext_resume_counter_vii:
  {
    \bool_set_true:N \l__enumext_resume_vii_bool
  }
%% Add |check-ans| and |no-ans| keys.
\cs_set_protected:Npn \__enumext_tmp:w #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        check-ans .bool_set:N = \l__enumext_keyans_check_bool,
        check-ans .initial:n  = false,
        no-ans    .bool_set:c = { l__enumext_use_anskey_#2_bool },
        no-ans    .initial:n  = false,
      }
  }
\__enumext_tmp:w { level-1 }{   i }
\__enumext_tmp:w { level-2 }{  ii }
\__enumext_tmp:w { level-3 }{ iii }
\__enumext_tmp:w { level-4 }{  iv }
%% Creation of integer variables for the internal check-answer mechanism.
\cs_new_protected:Npn \__enumext_keyans_make_int:n #1
  {
    \int_if_exist:cF { g__enumext_count_#1_item_ans_int }
      { \int_new:c { g__enumext_count_#1_item_ans_int } }
    \int_if_exist:cF { g__enumext_count_#1_i_int }
      { \int_new:c { g__enumext_count_#1_i_int } }
    \int_if_exist:cF { g__enumext_count_#1_ii_int }
      { \int_new:c { g__enumext_count_#1_ii_int } }
    \int_if_exist:cF { g__enumext_count_#1_iii_int }
      { \int_new:c { g__enumext_count_#1_iii_int } }
    \int_if_exist:cF { g__enumext_count_#1_iv_int }
      { \int_new:c { g__enumext_count_#1_iv_int } }
    \int_gset_eq:Nc \g__enumext_count_item_all_int { g__enumext_count_#1_i_int        }
    \int_gset_eq:Nc \g__enumext_count_item_ii_int  { g__enumext_count_#1_ii_int       }
    \int_gset_eq:Nc \g__enumext_count_item_iii_int { g__enumext_count_#1_iii_int      }
    \int_gset_eq:Nc \g__enumext_count_item_iv_int  { g__enumext_count_#1_iv_int       }
    \int_gset_eq:Nc \g__enumext_count_item_ans_int { g__enumext_count_#1_item_ans_int }
  }
%% Funtion to count |\item| for internal checking answer mechanism in |enumext|.
\cs_new_protected:Nn \__enumext_keyans_anskey_count_item:
  {
    \bool_if:NT \l__enumext_keyans_check_bool
      {
        \bool_if:cTF { l__enumext_use_anskey_ \__enumext_level: _bool }
          {
            \int_gadd:cn { g__enumext_count_item_ \__enumext_level: _int }
              { \int_use:c { g__enumext_count_tmpa_ \__enumext_level: _int } + 1 }
          }
          { \int_gincr:c { g__enumext_count_item_ \__enumext_level: _int } }
      }
  }
%% Funtion to compare |\item| = answer for internal checking answer mechanism in |enumext|.
\cs_new_protected:Nn \__enumext_keyans_check_active:
  {
    \int_set:Nn \l__enumext_compare_items_ans_int
      {
         \g__enumext_count_item_all_int - \g__enumext_count_item_ii_int
       - \g__enumext_count_item_iii_int - \g__enumext_count_item_iv_int
      }
    \int_compare:nNnTF
      { \l__enumext_compare_items_ans_int } = { \g__enumext_count_item_ans_int }
      {
        \msg_term:nnV { enumext } { items-same-answer }
          \g__enumext_keyans_name_out_tl
      }
      {
        \msg_warning:nnV { enumext } { item-different-answer }
          \g__enumext_keyans_name_out_tl
      }
    \int_gzero:N \g__enumext_count_tmpa_i_int
    \int_gzero:N \g__enumext_count_tmpa_ii_int
    \int_gzero:N \g__enumext_count_tmpa_iii_int
    \int_gzero:N \g__enumext_count_tmpa_iv_int
  }
%% Execute |check-ans| key out of |enumext|.
\__enumext_after_env:n
  {
    \bool_if:NT \g__enumext_keyans_check_show_bool
      {
        \int_compare:nNnT { \l__enumext_level_int } = { 0 }
          {
            \__enumext_keyans_check_active:
          }
      }
    \bool_gset_false:N \g__enumext_keyans_check_show_bool
    \tl_gclear:N \g__enumext_keyans_name_out_tl
  }
%% Add keys associated with storage on first level of |enumext|.
\keys_define:nn { enumext / level-1 }
  {
    wrap-ans   .cs_set_protected:Np = \__enumext_keyans_anskey_wrapper:n #1,
    wrap-ans   .initial:n  = \fbox{#1},
    wrap-ans   .value_required:n = true,
    mark-ans   .code:n     = \tl_set:Nn \l__enumext_keyans_mark_ans_tl {#1},
    mark-ans   .initial:n  = \textasteriskcentered,
    mark-ans   .value_required:n = true,
    mark-pos   .choice:,
    mark-pos  / left   .code:n = \tl_set:Nn \l__enumext_keyans_mark_pos_tl { l },
    mark-pos  / right  .code:n = \tl_set:Nn \l__enumext_keyans_mark_pos_tl { r },
    mark-pos   .initial:n      = right,
    mark-pos   .value_required:n = true,
    show-ans   .code:n     = \bool_set_true:N  \l__enumext_keyans_show_ans_bool
                             \bool_set_false:N \l__enumext_keyans_show_pos_bool,
    show-ans   .value_forbidden:n = true,
    show-pos   .code:n     = \bool_set_true:N \l__enumext_keyans_show_pos_bool
                             \bool_set_false:N  \l__enumext_keyans_show_ans_bool,
    show-pos   .value_forbidden:n = true,
    mark-ref   .code:n     = \tl_set:Nn \l__enumext_keyans_mark_ref_tl {#1},
    mark-ref   .initial:n  = \textasteriskcentered,
    mark-ref   .value_required:n = true,
    store-ref  .bool_set:N = \l__enumext_keyans_store_ref_bool,
    store-ref  .initial:n  = false,
  }
%% Add keys |mark-pos| and |show-ans| for |keyans|.
\keys_define:nn { enumext / keyans }
  {
    mark-pos .choice:,
    mark-pos / left  .code:n    = \tl_set:Nn \l__enumext_keyans_mark_pos_tl { l },
    mark-pos / right .code:n    = \tl_set:Nn \l__enumext_keyans_mark_pos_tl { r },
    mark-pos         .initial:n = right,
    mark-pos .value_required:n  = true,
    show-ans .code:n   = \bool_set_true:N  \l__enumext_keyans_show_ans_bool
                         \bool_set_false:N \l__enumext_keyans_show_pos_bool,
    show-ans .value_forbidden:n = true,
    show-pos .code:n   = \bool_set_true:N  \l__enumext_keyans_show_pos_bool
                         \bool_set_false:N \l__enumext_keyans_show_ans_bool,
    show-pos .value_forbidden:n = true,
  }
%% Function for store content to prop list.
\cs_new_protected:Npn \__enumext_keyans_addto_prop:n #1
  {
    \prop_if_exist:cF { g_keyans_ \l__enumext_keyans_name_tl _prop }
      { \prop_new:c { g_keyans_ \l__enumext_keyans_name_tl _prop } }
    \prop_gput:cen { g_keyans_ \l__enumext_keyans_name_tl _prop }
      {
        \int_eval:n { \prop_count:c { g_keyans_ \l__enumext_keyans_name_tl _prop } +1 }
      } { #1 }
  }
\cs_generate_variant:Nn \__enumext_keyans_addto_prop:n { V }
%% Function for store content to sequence.
\cs_new_protected:Npn \__enumext_keyans_addto_seq:n #1
  {
    \seq_if_exist:cF { g_keyans_ \l__enumext_keyans_name_tl _seq }
      { \seq_new:c { g_keyans_ \l__enumext_keyans_name_tl _seq } }
    \seq_gput_right:cn { g_keyans_ \l__enumext_keyans_name_tl _seq } { #1 }
  }
\cs_generate_variant:Nn \__enumext_keyans_addto_seq:n { V }
%% Function for put content in box on left margin.
\cs_new_protected:Npn \__enumext_keyans_make_box:nnn #1#2#3
  {
    \hspace*{ -\dim_use:c {#3} }
    \makebox[0pt][ r ]
      {
        \makebox[ \dim_use:c {#1} ][ \l__enumext_keyans_mark_pos_tl ]
          {
            \tl_use:N #2
          }
      }
    \skip_horizontal:n { \dim_use:c {#3} }
  }
%% Define the user command |\anskey|.
\NewDocumentCommand \anskey { +m }
  {
    \bool_if:NF \l__enumext_keyans_active_bool
      {
        \msg_error:nnnn { enumext } { anskey-wrong-place }{ anskey }{ enumext }
      }
    \int_compare:nNnT { \l__enumext_keyans_level_int } = { 1 }
      {
        \msg_error:nnnn { enumext } { command-wrong-place }{ anskey }{ keyans }
      }
    \int_compare:nNnT { \l__enumext_keyans_pic_level_int } = { 1 }
      {
        \msg_error:nnnn { enumext } { command-wrong-place }{ anskey }{ keyanspic }
      }
    \bool_if:NT \l__enumext_keyans_check_bool
      {
        \int_gincr:N \g__enumext_count_item_ans_int
      }
    \tl_set:Nn \l__enumext_anskey_pre_action_ii_tl   { \__enumext_anskey_step_lower: }
    \tl_set:Nn \l__enumext_anskey_pre_action_iii_tl  { \__enumext_anskey_step_lower: }
    \tl_set:Nn \l__enumext_anskey_pre_action_iv_tl   { \__enumext_anskey_step_lower: }
    \tl_set:Nn \l__enumext_anskey_post_action_ii_tl  { \__enumext_anskey_step_upper: }
    \tl_set:Nn \l__enumext_anskey_post_action_iii_tl { \__enumext_anskey_step_upper: }
    \tl_set:Nn \l__enumext_anskey_post_action_iv_tl  { \__enumext_anskey_step_upper: }
    \group_begin:
      \__enumext_keyans_anskey_code:n {#1}
    \group_end:
  }
%% Function for memorize level execution of |\anskey| on |enumext|.
\cs_new_protected:Nn \__enumext_anskey_step_lower:
  {
    \__enumext_keyans_addto_seq:n { \item \begin{enumext} }
  }
\cs_new_protected:Nn \__enumext_anskey_step_upper:
  {
    \__enumext_keyans_addto_seq:n { \end{enumext} }
  }
%% Internal function of |\anskey|.
\cs_new_protected:Npn \__enumext_keyans_anskey_code:n #1
  {
    \tl_clear:N \l__enumext_anskey_stored_tl
    \tl_set:Nn \l__enumext_anskey_stored_tl { #1 }
    \__enumext_keyans_addto_prop:V \l__enumext_anskey_stored_tl
    \bool_if:NT \l__enumext_keyans_store_ref_bool
      {
        \__enumext_keyans_make_label_ref:
      }
    \tl_put_left:Nn \l__enumext_anskey_stored_tl { \item }
    \bool_lazy_and:nnT
      { \l__enumext_keyans_store_ref_bool }
      { \g__enumext_keyans_hyperref_bool }
      {
        \tl_put_right:Ne \l__enumext_anskey_stored_tl
          {
            \hfill \exp_not:N \hyperlink { \exp_not:V \l__enumext_keyans_write_arg_i_tl }
                 { \exp_not:V \l__enumext_keyans_mark_ref_tl }
          }
      }
    \__enumext_keyans_addto_seq:V \l__enumext_anskey_stored_tl
    \__enumext_keyans_cmd_show_left:n { #1 }
  }
%% Internal label and ref function for |\anskey|.
\cs_new_protected:Nn \__enumext_keyans_make_label_ref:
  {
    \cs_set_protected:Npn \__enumext_tmp:w ##1
      {
        \tl_set_eq:cc { l__enumext_label_copy_##1_tl } { l__enumext_label_##1_tl }
        \tl_reverse:c { l__enumext_label_copy_##1_tl }
        \tl_remove_once:cn { l__enumext_label_copy_##1_tl } { . }
        \tl_reverse:c { l__enumext_label_copy_##1_tl }
      }
    \__enumext_tmp:w {   i }
    \__enumext_tmp:w {  ii }
    \__enumext_tmp:w { iii }
    \__enumext_tmp:w {  iv }
    \cs_set:Npn \__enumext_tmp:w ##1
      { . \tl_use:c { l__enumext_label_copy_ \int_to_roman:n {##1} _tl } }
    \tl_put_right:Ne \l__enumext_keyans_write_arg_ii_tl
      {
        \tl_use:N \l__enumext_label_copy_i_tl
        \int_step_function:nnN { 2 } { \l__enumext_level_int } \__enumext_tmp:w
      }
    \tl_put_right:Ne \l__enumext_keyans_write_arg_i_tl
      {
        \l__enumext_keyans_name_tl \c_colon_str
        \int_eval:n { \prop_count:c { g_keyans_ \l__enumext_keyans_name_tl _prop } }
      }
    \tl_put_right:Ne \l__enumext_keyans_make_label_ref_tl
      {
        \__enumext_keyans_write_aux:nn
          { \exp_not:V \l__enumext_keyans_write_arg_i_tl }
          { \l__enumext_keyans_write_arg_ii_tl }
      }
    \l__enumext_keyans_make_label_ref_tl
  }
%% Internal |wrap-ans| implementation for |\anskey|.
\cs_new_protected:Npn \__enumext_keyans_show_wrap_ans:n #1
  {
    \par
    \__enumext_keyans_make_box:nnn
      { l__enumext_labelwidth_ \__enumext_level: _dim }
      { \l__enumext_keyans_mark_ans_tl }
      { l__enumext_labelsep_ \__enumext_level: _dim }
    \__enumext_keyans_anskey_wrapper:n { #1 }
  }
%% Internal |show-ans| and |show-pos| implementation for |\anskey|.
\cs_new_protected:Npn \__enumext_keyans_cmd_show_left:n #1
  {
    \bool_if:NT \l__enumext_keyans_show_ans_bool
      {
        \__enumext_keyans_show_wrap_ans:n { #1 }
      }
    \bool_if:NT \l__enumext_keyans_show_pos_bool
      {
        \tl_set:Ne \l__enumext_keyans_mark_ans_tl
          {
            \group_begin:
            \exp_not:N \normalfont
            \exp_not:N \footnotesize [ \int_eval:n
              {
                \prop_count:c { g_keyans_ \l__enumext_keyans_name_tl _prop }
              }
              ]
            \group_end:
          }
        \__enumext_keyans_show_wrap_ans:n { #1 }
      }
  }
%% Function for storing in prop list for |keyans| and |keyanspic|.
\cs_new_protected:Npn \__enumext_keyans_env_addto_prop:n #1
  {
    \tl_clear:N \l__enumext_keyans_stored_tl
    \int_compare:nNnTF { \l__enumext_keyans_pic_level_int } = { 1 }
      {
        \tl_put_right:Ne \l__enumext_keyans_stored_tl { \l__enumext_label_vi_tl }
      }
      {
        \tl_put_right:Ne \l__enumext_keyans_stored_tl { \l__enumext_label_v_tl }
      }
    \tl_if_novalue:nF { #1 }
      {
        \tl_put_right:Ne \l__enumext_keyans_stored_tl { \c_space_tl #1 }
      }
    \__enumext_keyans_addto_prop:V \l__enumext_keyans_stored_tl
  }
%% Internal label and ref function for |keyans| and |keyanspic|.
\cs_new_protected:Nn \__enumext_keyans_env_make_label_ref:
  {
    \cs_set_protected:Npn \__enumext_tmp:w ##1
      {
        \tl_set_eq:cc { l__enumext_label_copy_##1_tl } { l__enumext_label_##1_tl }
        \tl_reverse:c { l__enumext_label_copy_##1_tl }
        \tl_remove_once:cn { l__enumext_label_copy_##1_tl } { . }
        \tl_reverse:c { l__enumext_label_copy_##1_tl }
      }
    \__enumext_tmp:w {  i }
    \__enumext_tmp:w {  v }
    \__enumext_tmp:w { vi }
    \int_compare:nNnTF { \l__enumext_keyans_pic_level_int } = { 1 }
      {
        \tl_put_right:Ne \l__enumext_keyans_write_arg_ii_tl
          { \l__enumext_label_copy_i_tl . \l__enumext_label_copy_vi_tl }
      }
      {
        \tl_put_right:Ne \l__enumext_keyans_write_arg_ii_tl
          { \l__enumext_label_copy_i_tl . \l__enumext_label_copy_v_tl }
      }
    \tl_put_right:Ne \l__enumext_keyans_write_arg_i_tl
      {
        \l__enumext_keyans_name_tl \c_colon_str
        \int_eval:n { \prop_count:c { g_keyans_ \l__enumext_keyans_name_tl _prop } }
      }
    \tl_put_right:Ne \l__enumext_keyans_make_label_ref_tl
      {
        \__enumext_keyans_write_aux:nn
          { \exp_not:V \l__enumext_keyans_write_arg_i_tl }
          { \l__enumext_keyans_write_arg_ii_tl }
      }
    \bool_if:NT \l__enumext_keyans_store_ref_bool
      {
        \l__enumext_keyans_make_label_ref_tl
      }
  }
%% Function for storing in sequence for |keyans| and |keyanspic|.
\cs_new_protected:Npn \__enumext_keyans_env_addto_seq:n #1
  {
    \tl_clear:N \l__enumext_keyans_stored_tl
    \int_compare:nNnTF { \l__enumext_keyans_pic_level_int } = { 1 }
      {
        \tl_put_right:Ne \l__enumext_keyans_stored_tl { \item \l__enumext_label_vi_tl }
      }
      {
        \tl_put_right:Ne \l__enumext_keyans_stored_tl { \item \l__enumext_label_v_tl }
      }
    \tl_if_novalue:nF { #1 }
      {
        \tl_put_right:Ne \l__enumext_keyans_stored_tl { \c_space_tl #1 }
      }
    \bool_lazy_and:nnT
      { \l__enumext_keyans_store_ref_bool }
      { \g__enumext_keyans_hyperref_bool }
      {
        \tl_put_right:Ne \l__enumext_keyans_stored_tl
          {
            \hfill \exp_not:N \hyperlink
              {
                \exp_not:V \l__enumext_keyans_write_arg_i_tl
              }
              { \exp_not:V \l__enumext_keyans_mark_ref_tl }
          }
      }
    \__enumext_keyans_addto_seq:V \l__enumext_keyans_stored_tl
    \tl_gset:NV \g__enumext_keyans_check_item_tl \l__enumext_keyans_stored_tl
    \bool_if:NT \l__enumext_keyans_check_bool
      {
        \int_gincr:N \g__enumext_count_item_ans_int
      }
  }
%% Function for check starred command in |keyans| and |keyanspic|.
\cs_new_protected:Npn \__enumext_keyans_check_starred:nn #1#2
  {
    \tl_if_empty:NTF \g__enumext_keyans_check_item_tl
      {
        \msg_warning:nnnn { enumext } { missing-starred }{ #1 }{ #2 }
      }
      { \tl_gclear:N \g__enumext_keyans_check_item_tl }
  }
%% Function for |show-ans| and |show-pos| for |keyans| and |keyanspic|.
\cs_new_protected:Npn \__enumext_keyans_env_show_left:n #1
  {
    \bool_if:NT \l__enumext_keyans_show_ans_bool
      {
        \tl_put_left:Nn \l__enumext_label_v_tl
          {
            \__enumext_keyans_make_box:nnn { l__enumext_labelwidth_i_dim }
              { \l__enumext_keyans_mark_ans_tl }{ l__enumext_labelsep_i_dim }
          }
        \tl_if_novalue:nF { #1 }
          { \tl_put_right:Nn \l__enumext_label_v_tl { \c_space_tl [ #1 ] } }
      }
    \bool_if:NT \l__enumext_keyans_show_pos_bool
      {
        \tl_set:Ne \l__enumext_keyans_mark_ans_tl
          {
            \group_begin:
            \exp_not:N \normalfont
            \exp_not:N \footnotesize [ \int_eval:n
              {
                \prop_count:c { g_keyans_ \l__enumext_keyans_name_tl _prop }
                + \l__enumext_keyans_level_int
              }
              ]
            \group_end:
          }
        \tl_put_left:Nn \l__enumext_label_v_tl
          {
            \__enumext_keyans_make_box:nnn { l__enumext_labelwidth_i_dim }
              { \l__enumext_keyans_mark_ans_tl }{ l__enumext_labelsep_i_dim }
          }
        \tl_if_novalue:nF { #1 }
          { \tl_put_right:Nn \l__enumext_label_v_tl { \c_space_tl [ #1 ] } }
      }
  }
%% Add |item-sym*| and |item*-sep| keys.
\cs_set_protected:Npn \__enumext_tmp:w #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        item-sym* .tl_set:c  = { l__enumext_item_symbol_#2_tl },
        item-sym* .value_required:n = true,
        item-sym* .initial:n  = {$\star$},
        item-pos* .dim_set:c  = { l__enumext_item_symbol_sep_#2_dim },
        item-pos* .value_required:n = true,
      }
  }
\__enumext_tmp:w { level-1  } {    i }
\__enumext_tmp:w { level-2  } {   ii }
\__enumext_tmp:w { level-3  } {  iii }
\__enumext_tmp:w { level-4  } {   iv }
\__enumext_tmp:w { enumext* } {  vii }
%% Redefining \footnote.
\cs_new_protected:Nn \__enumext_footnotetext:nn
  {
    \footnotetext[#1]{#2}
  }
\cs_new_protected:Nn \__enumext_renew_footnote:
  {
    \seq_gclear:N \g__enumext_footnote_arg_seq
    \seq_gclear:N \g__enumext_footnote_int_seq
    \RenewDocumentCommand \footnote { o +m }
      {
        \IfNoValueTF {##1}
          {
            \stepcounter{footnote}
            \int_gset_eq:Nc \g__enumext_footnote_int { c@footnote }
          }
          {
            \int_gset:Nn \g__enumext_footnote_int { ##1 }
          }
        \footnotemark [ \g__enumext_footnote_int ]
        \seq_gput_right:Nn \g__enumext_footnote_arg_seq { ##2 }
        \seq_gput_right:NV \g__enumext_footnote_int_seq \g__enumext_footnote_int
     }
  }
\cs_new_protected:Nn \__enumext_print_footnote:
  {
    \seq_if_empty:NF \g__enumext_footnote_int_seq
      {
        \seq_map_pairwise_function:NNN
          \g__enumext_footnote_int_seq
          \g__enumext_footnote_arg_seq
          \__enumext_footnotetext:nn
      }
  }
%% Internal function for |\item| whit check-answer mechanism in |enumext|.
\cs_new_protected:Npn \__enumext_default_item:n #1
  {
    \tl_if_novalue:nTF {#1}
      {
        \bool_if:NT \l__enumext_keyans_check_bool
          {
            \int_gincr:c { g__enumext_count_item_all_int }
            \int_gincr:c { g__enumext_count_tmpa_ \__enumext_level: _int }
          }
        \bool_set_true:c { l__enumext_wrap_label_ \__enumext_level: _bool }
        \__enumext_item_std:w
      }
      {
        \bool_set_eq:cc
          { l__enumext_wrap_label_ \__enumext_level: _bool }
          { l__enumext_wrap_label_opt_ \__enumext_level: _bool }
        \__enumext_item_std:w [#1]
      }
  }
%% Internal function for |\item*[symb][sep]| whit check-answer mechanism in |enumext|.
\cs_new_protected:Npn \__enumext_starred_item:nn #1 #2
  {
    \tl_if_novalue:nF {#1}
      {
        \tl_set:cn { l__enumext_item_symbol_ \__enumext_level: _tl } {#1}
      }
    \tl_gset_eq:Nc \g__enumext_item_symbol_tl { l__enumext_item_symbol_ \__enumext_level: _tl }
    \tl_if_novalue:nTF {#2}
      {
        \dim_set_eq:cc
          { l__enumext_item_symbol_sep_ \__enumext_level: _dim }
          { l__enumext_labelsep_ \__enumext_level: _dim }
      }
      {
        \dim_set:cn { l__enumext_item_symbol_sep_ \__enumext_level: _dim } {#2}
      }
    \bool_if:NT \l__enumext_keyans_check_bool
      {
        \int_gincr:c { g__enumext_count_item_all_int }
        \int_gincr:c { g__enumext_count_tmpa_ \__enumext_level: _int }
      }
    \bool_set_true:c { l__enumext_wrap_label_ \__enumext_level: _bool }
    \__enumext_item_std:w
  }
%% Redefinition of |\item| for internal check-answer mechanism and \item* in |enumext|.
\cs_new_protected:Npn \__enumext_redefine_item:
  {
    \RenewDocumentCommand \item { !s o o }
      {
       \IfBooleanTF{##1}
         { \__enumext_starred_item:nn {##2} {##3} }
         { \__enumext_default_item:n {##2} }
      }
  }
\cs_new_protected:Npn \__enumext_keyans_default_item:n #1
  {
    \tl_if_novalue:nTF { #1 }
      {
        \bool_set_true:N \l__enumext_wrap_label_v_bool
        \__enumext_item_std:w
      }
      {
        \bool_set_eq:NN \l__enumext_wrap_label_v_bool \l__enumext_wrap_label_opt_v_bool
        \__enumext_item_std:w [#1]
      }
  }
\cs_new_protected:Npn \__enumext_keyans_starred_item:n #1
  {
    \tl_set_eq:NN \l__enumext_keyans_tmpa_tl \l__enumext_label_v_tl
    \__enumext_keyans_env_show_left:n { #1 }
    \bool_set_true:N \l__enumext_wrap_label_v_bool
    \__enumext_item_std:w
    \tl_set_eq:NN \l__enumext_label_v_tl \l__enumext_keyans_tmpa_tl
    \__enumext_keyans_env_addto_prop:n { #1 }
    \__enumext_keyans_env_make_label_ref:
    \__enumext_keyans_env_addto_seq:n { #1 }
  }
%% Redefine |\item| for |keyans|.
\cs_new_protected:Npn \__enumext_keyans_redefine_item:
  {
    \RenewDocumentCommand \item { !s o }
      {
        \IfBooleanTF{##1}
          {
            \__enumext_keyans_starred_item:n {##2}
          }
          {
            \__enumext_keyans_default_item:n {##2}
          }
      }
  }
%% Function for |\item*[][]| in \makelabel for enumext.
\cs_new_protected:Npn \__enumext_item_starred:
  {
    \tl_if_empty:cF { l__enumext_item_symbol_ \__enumext_level: _tl }
      {
        \hspace* { -\dim_use:c { l__enumext_item_symbol_sep_ \__enumext_level: _dim } }
        \makebox[0pt][r]{ \tl_use:N \g__enumext_item_symbol_tl }
        \hspace* { \dim_use:c { l__enumext_item_symbol_sep_ \__enumext_level: _dim } }
      }
  }
%% Redefinition of |\makelabel| for |\item| and |\item*[][]| in enumext.
\cs_new_protected:Npn \__enumext_make_label:
  {
    \RenewDocumentCommand \makelabel { m }
      {
        \tl_use:c { l__enumext_label_fill_left_ \__enumext_level: _tl }
        \tl_use:c { l__enumext_label_font_style_ \__enumext_level: _tl }
        \bool_if:cTF { l__enumext_wrap_label_ \__enumext_level: _bool }
          {
            \__enumext_item_starred:
            \use:c { __enumext_wrapper_label_ \__enumext_level: :n } { ##1 }
          }
          { ##1 }
        \tl_use:c { l__enumext_label_fill_right_ \__enumext_level: _tl }
        \tl_gclear:N \g__enumext_item_symbol_tl
      }
  }
\cs_new_protected:Npn \__enumext_keyans_make_label:
  {
    \RenewDocumentCommand \makelabel { m }
      {
        \tl_use:N \l__enumext_label_fill_left_v_tl
        \tl_use:N \l__enumext_label_font_style_v_tl
        \bool_if:NTF \l__enumext_wrap_label_v_bool
          {
            \__enumext_wrapper_label_v:n { ##1 }
          }
          { ##1 }
        \tl_use:N \l__enumext_label_fill_right_v_tl
      }
  }
%% Function to calc of horizontal length for all list environment.
%% #1: \l__enumext_labelwidth_X_dim     #2: \l__enumext_labelsep_X_dim
%% #3: \l__enumext_listoffset_X_dim     #4: \l__enumext_leftmargin_tmp_X_dim
%% #5: \l__enumext_leftmargin_X_dim     #6: \l__enumext_itemindent_X_dim
%% #7: \l__enumext_custom_margin_X_bool
\cs_new_protected:Npn \__enumext_calc_hspace:NNNNNNN #1#2#3#4#5#6#7
  {
    \dim_compare:nNnT { #1 } < { \c_zero_dim }
      {
        \msg_warning:nnnV { enumext } { width-non-positive }{ labelwidth }{ #1 }
        \dim_set:Nn #1 { \dim_abs:n { #1 } }
      }
    \dim_compare:nNnT { #2 } < { \c_zero_dim }
      {
        \msg_warning:nnnV { enumext } { width-negative }{ labelsep }{ #2 }
        \dim_set:Nn #2 { \dim_abs:n { #2 } }
      }
    \bool_if:nF #7 { \dim_set:Nn #4 { #1 + #2} }
    \dim_compare:nNnTF { #4 } < { \c_zero_dim }
      {
        \dim_set:Nn #6 { #1 + #2 - #4}
        \dim_set:Nn #5 { #1 + #2 + #3 - #6 }
      }
      {
        \dim_compare:nNnT { #4 } = { #1 + #2 }
          { \dim_set:Nn #6 { \c_zero_dim } }
        \dim_compare:nNnT { #4 } < { #1 + #2 }
          { \dim_set:Nn #6 { #1 + #2 - #4} }
        \dim_compare:nNnT { #4 } > { #1 + #2 }
          {
            \dim_set:Nn #6 { -#1 - #2 + #4}
            \dim_set:Nn #6 { #6*-1}
          }
        \dim_set:Nn #5 { #1 + #2 + #3 - #6 }
      }
  }
\cs_generate_variant:Nn \__enumext_calc_hspace:NNNNNNN { ccccccc }
%% Define "second arg" of list for |enumext| and |keyans|.
\cs_set_protected:Npn \__enumext_tmp:w #1
  {
    \cs_new_protected:cpn { __enumext_list_arg_two_#1: }
      {
        \__enumext_calc_hspace:ccccccc
          { l__enumext_labelwidth_#1_dim } { l__enumext_labelsep_#1_dim }
          { l__enumext_listoffset_#1_dim } { l__enumext_leftmargin_tmp_#1_dim }
          { l__enumext_leftmargin_#1_dim } { l__enumext_itemindent_#1_dim }
          { l__enumext_custom_margin_#1_bool }
        \clist_map_inline:nn
          { labelsep, labelwidth, itemindent, leftmargin, rightmargin, listparindent }
          { \dim_set_eq:cc {####1} { l__enumext_####1_#1_dim } }
        \clist_map_inline:nn { topsep, parsep, partopsep, itemsep }
          { \skip_set_eq:cc {####1} { l__enumext_####1_#1_skip } }
        \bool_if:cT { l__enumext_show_info_length_#1_bool }
          { \msg_term:nnn { enumext } { list-lengths } {#1} }
        \usecounter { enumX#1 }
        \bool_lazy_and:nnTF
          { \str_if_eq_p:nn {#1} { i } }
          { \bool_if_p:N \l__enumext_resume_bool }
          { \setcounter { enumXi  } { \int_eval:n { \g__enumext_resume_int } } }
          {
            \setcounter { enumX#1 }
              { \int_eval:n { \int_use:c { l__enumext_start_#1_int } - 1 } }
          }
        \str_if_eq:nnTF {#1} { v }
          {
            \__enumext_keyans_redefine_item:
            \__enumext_keyans_make_label:
          }
          {
            \__enumext_redefine_item:
            \__enumext_make_label:
          }
      }
  }
\__enumext_tmp:w {   i }
\__enumext_tmp:w {  ii }
\__enumext_tmp:w { iii }
\__enumext_tmp:w {  iv }
\__enumext_tmp:w {   v }
%% Define "second arg" of list for |enumext*| and |keyans*|.
\cs_set_protected:Npn \__enumext_tmp:w #1
  {
    \cs_new_protected:cpn { __enumext_list_arg_two_#1: }
      {
        \__enumext_calc_hspace:ccccccc
          { l__enumext_labelwidth_#1_dim } { l__enumext_labelsep_#1_dim }
          { l__enumext_listoffset_#1_dim } { l__enumext_leftmargin_tmp_#1_dim }
          { l__enumext_leftmargin_#1_dim } { l__enumext_itemindent_#1_dim }
          { l__enumext_custom_margin_#1_bool }
        \clist_map_inline:nn
          { labelsep, labelwidth, itemindent, leftmargin, rightmargin, listparindent }
          { \dim_set_eq:cc {####1} { l__enumext_####1_#1_dim } }
        \clist_map_inline:nn { topsep, parsep, partopsep, itemsep }
          { \skip_set_eq:cc {####1} { l__enumext_####1_#1_skip } }
        \skip_set_eq:Nc \parsep  { l__enumext_itemsep_#1_skip }
        \skip_zero:N \partopsep
        \dim_zero:N \listparindent
        \bool_if:cT { l__enumext_show_info_length_#1_bool }
          { \msg_term:nnn { enumext } { list-lengths } {#1} }
        \usecounter { enumX#1 }
        %\bool_lazy_and:nnTF
          %{ \str_if_eq_p:nn {#1} { vii } }
          %{ \bool_if_p:N \l__enumext_resume_vii_bool }
          %{ \setcounter { enumXvii  } {  \int_eval:n { \g__enumext_resume_vii_int } } }
          %{
            %\setcounter { enumX#1 }
              %{ \int_eval:n { \int_use:c { l__enumext_start_#1_int } - 1 } }
          %}
        \bool_if:NTF \l__enumext_resume_vii_bool
          {
            \setcounter { enumXvii  } { \int_eval:n { \g__enumext_resume_vii_int } }
          }
          {
            \setcounter { enumXvii } { \int_eval:n { \int_use:N \l__enumext_start_vii_int - 1 } }
          }
        \__enumext_use_key_ref_h:
      }
  }
\__enumext_tmp:w {  vii }
\__enumext_tmp:w { viii }
%% Definition of |enumext| and |@@_mini_env*| environments.
\NewDocumentEnvironment{enumext}{ O{} }
  {
    \__enumext_make_custom_minipage:
    \__enumext_safe_exec:
    \__enumext_parse_keys:n {#1}
    \__enumext_before_list:
    \__enumext_record_upper_level:
    \__enumext_start_list:nn
      { \tl_use:c { l__enumext_label_ \__enumext_level: _tl } }
      {
        \use:c { __enumext_list_arg_two_ \__enumext_level: : }
        \__enumext_before_keys_exec:
        \__enumext_use_key_ref:
      }
    \__enumext_after_args_exec:
  }
  {
    \__enumext_stop_list:
    \__enumext_record_lower_level:
    \__enumext_after_list:
  }
%% Definition of |@@_mini_env*| (custom minipage).
\cs_new_protected:Nn \__enumext_safe_exec:
  {
    \skip_zero:N \parskip
    \int_incr:N \l__enumext_level_int
    \int_compare:nNnT { \l__enumext_level_int } > { 4 }
      { \msg_fatal:nn { enumext } { list-too-deep } }
  }
\cs_new_protected:Npn \__enumext_parse_keys:n #1
  {
    \exp_args:Nx \keys_set:nn
       { enumext / level-\int_use:N \l__enumext_level_int } {#1}
  }
\cs_new_protected:Nn \__enumext_record_upper_level:
  {
    \bool_if:NT \l__enumext_keyans_active_bool
      {
        \tl_use:c { l__enumext_anskey_pre_action_ \__enumext_level: _tl }
      }
  }
\cs_new_protected:Nn \__enumext_record_lower_level:
  {
    \bool_if:NT \l__enumext_keyans_active_bool
      {
        \tl_use:c { l__enumext_anskey_post_action_ \__enumext_level: _tl }
      }
  }
\cs_new_protected:Nn \__enumext_before_list:
  {
    \__enumext_vspace_above:
    \__enumext_before_args_exec:
    \__enumext_keyans_anskey_count_item:
%% Set |mini-env| width value.
    \dim_compare:nNnT
      { \dim_use:c { l__enumext_minipage_right_ \__enumext_level: _dim } } > { \c_zero_dim }
      {
        \dim_set:cn { l__enumext_minipage_left_ \__enumext_level: _dim }
          {
            \linewidth
            - \dim_use:c { l__enumext_minipage_right_ \__enumext_level: _dim }
            - \dim_use:c { l__enumext_minipage_hsep_ \__enumext_level: _dim }
          }
%% Use internal minipage with |\nointerlineskip| and addvspace here
        \bool_set_true:c { l__enumext_minipage_active_ \__enumext_level: _bool }
        \int_gincr:N \g__enumext_minipage_stat_int
        \__enumext_mini_addvspace:
        \nointerlineskip\noindent
        \begin{__enumext_mini_env*}
          { \dim_use:c { l__enumext_minipage_left_ \__enumext_level: _dim } }
      }
    \__enumext_multicols_start:
  }
\cs_new_protected:Nn \__enumext_multicols_start:
  {
    \int_compare:nNnT
      { \int_use:c { l__enumext_columns_ \__enumext_level: _int } } > { 1 }
      {
        \bool_if:cF { l__enumext_columns_sep_ \__enumext_level: _bool }
          {
            \dim_set:cn { l__enumext_columns_sep_ \__enumext_level: _dim }
              {
                 \dim_use:c { l__enumext_labelwidth_ \__enumext_level: _dim }
               + \dim_use:c { l__enumext_labelsep_ \__enumext_level: _dim }
               - \dim_use:c { l__enumext_listoffset_ \__enumext_level: _dim }
              }
          }
        \dim_set_eq:Nc \columnsep { l__enumext_columns_sep_ \__enumext_level: _dim  }
        \skip_zero:N \multicolsep
        \int_compare:nNnT { \l__enumext_level_int } > { 1 }
          {
            \dim_zero:N \columnseprule
          }
        \bool_if:cF { l__enumext_minipage_active_ \__enumext_level: _bool }
          {
            \__enumext_multi_addvspace:
          }
        \raggedcolumns
        \begin{multicols}{ \int_use:c { l__enumext_columns_ \__enumext_level: _int } }
      }
  }
\cs_new_protected:Nn \__enumext_multicols_stop:
  {
    \int_compare:nNnT
      { \int_use:c { l__enumext_columns_ \__enumext_level: _int } } > { 1 }
      {
        \end{multicols}
        \bool_if:cF { l__enumext_minipage_active_ \__enumext_level: _bool }
          {
            \par\addvspace{ \skip_use:c { l__enumext_multicols_below_ \__enumext_level: _skip } }
          }
      }
    \bool_if:NT \l__enumext_keyans_check_bool
      {
        \bool_gset_true:N \g__enumext_keyans_check_show_bool
        \tl_gset:NV \g__enumext_keyans_name_out_tl \l__enumext_keyans_name_tl
      }
  }
\cs_new_protected:Nn \__enumext_after_list:
  {
    \bool_if:cTF { l__enumext_minipage_active_ \__enumext_level: _bool }
      {
        \int_compare:nNnT { \g__enumext_minipage_stat_int } = { 1 }
          {
            \msg_warning:nn { enumext } { missing-miniright }
            \miniright
          }
        \int_gzero:N \g__enumext_minipage_stat_int
        \end{__enumext_mini_env*}
        \par\addvspace { \l__enumext_minipage_after_skip }
      }
      { \__enumext_multicols_stop: }
    \__enumext_after_stop_list:
    \__enumext_vspace_below:
    \int_gset_eq:NN \g__enumext_resume_int \value{enumXi}
    \int_if_exist:cT { g__enumext_resume_ \l__enumext_keyans_name_tl _int }
      {
        \int_gset_eq:cN
          { g__enumext_resume_ \l__enumext_keyans_name_tl _int }
          { \value{enumXi} }
      }
  }
%% Definition of |keyans| environment.
\NewDocumentEnvironment{keyans}{ O{} }
  {
    \__enumext_keyans_safe_exec:
    \__enumext_keyans_parse_keys:n {#1}
    \__enumext_keyans_before_list:
    \__enumext_start_list:nn
      { \tl_use:N \l__enumext_label_v_tl }
      {
        \__enumext_list_arg_two_v:
        \__enumext_keyans_before_keys_exec:
      }
    \__enumext_keyans_after_args_exec:
  }
  {
    \__enumext_keyans_check_starred:nn { item }{ keyans }
    \__enumext_stop_list:
    \__enumext_keyans_after_list:
  }
%% Clean tl-var used by |\anskey| in |enumext|.
\__enumext_before_keyans:n
  {
    \tl_clear:N \l__enumext_anskey_pre_action_ii_tl
    \tl_clear:N \l__enumext_anskey_post_action_ii_tl
  }
%% Function for check nested level in |keyans|.
\cs_new_protected:Nn \__enumext_keyans_safe_exec:
  {
    \bool_if:NF \l__enumext_keyans_active_bool
      {
        \msg_error:nnnn { enumext } { wrong-place }{ keyans }{ save-ans }
      }
    \int_incr:N \l__enumext_keyans_level_int
    \int_compare:nNnT { \l__enumext_keyans_level_int } > { 1 }
      {
        \msg_error:nn { enumext } { keyans-nested }
      }
    \int_compare:nNnT { \l__enumext_level_int } > { 1 }
      {
        \msg_error:nn { enumext } { keyans-wrong-level }
      }
  }
%% Function for parse |key=val| in |keyans|. Replace \exp_args:Nx \keys_set:nn => \keys_set:nx
\cs_new_protected:Npn \__enumext_keyans_parse_keys:n #1
  {
    \keys_set:nx { enumext / keyans } {#1}
  }
%% Actions before start |keyans|.
\cs_new_protected:Nn \__enumext_keyans_before_list:
  {
    \__enumext_keyans_vspace_above:
    \__enumext_keyans_before_args_exec:
    \dim_compare:nNnT { \l__enumext_minipage_right_v_dim } > { \c_zero_dim }
      {
        \dim_set:Nn \l__enumext_minipage_left_v_dim
          {
            \linewidth - \l__enumext_minipage_right_v_dim - \l__enumext_minipage_hsep_v_dim
          }
        \bool_set_true:N \l__enumext_minipage_active_v_bool
        \int_gincr:N \g__enumext_minipage_stat_int
        \__enumext_keyans_mini_addvspace:
        \nointerlineskip\noindent
        \begin{__enumext_mini_env*}{ \l__enumext_minipage_left_v_dim }
      }
    \__enumext_keyans_multicols_start:
  }
%% Actvate multicols in |keyans|.
\cs_new_protected:Nn \__enumext_keyans_multicols_start:
  {
    \int_compare:nNnT { \l__enumext_columns_v_int } > { 1 }
      {
        \bool_if:NF \l__enumext_columns_sep_v_bool
          {
            \dim_set:Nn \l__enumext_columns_sep_v_dim
              {
                 \l__enumext_labelwidth_v_dim
               + \l__enumext_labelsep_v_dim
               - \l__enumext_listoffset_v_dim
              }
          }
        \dim_set_eq:NN \columnsep \l__enumext_columns_sep_v_dim
        \skip_zero:N \multicolsep
        \dim_zero:N \columnseprule
        \bool_if:NF \l__enumext_minipage_active_v_bool
          {
            \__enumext_keyans_multi_addvspace:
          }
        \raggedcolumns
        \begin{multicols}{ \l__enumext_columns_v_int }
      }
  }
\cs_new_protected:Nn \__enumext_keyans_multicols_stop:
  {
    \int_compare:nNnT { \l__enumext_columns_v_int } > { 1 }
      {
        \end{multicols}
        \bool_if:NF \l__enumext_minipage_active_v_bool
          {
            \par\addvspace{ \l__enumext_multicols_below_v_skip }
          }
      }
  }
%% Actions after |keyans|.
\cs_new_protected:Nn \__enumext_keyans_after_list:
  {
    \bool_if:NTF \l__enumext_minipage_active_v_bool
      {
        \int_compare:nNnT { \g__enumext_minipage_stat_int } = { 1 }
          {
            \msg_warning:nn { enumext } { missing-miniright }
            \miniright
          }
        \int_gzero:N \g__enumext_minipage_stat_int
        \end{__enumext_mini_env*}
        \par\addvspace{ \l__enumext_minipage_after_skip }
      }
      { \__enumext_keyans_multicols_stop: }
    \__enumext_keyans_after_stop_list:
    \__enumext_keyans_vspace_below:
  }
%% Define |\anspic| for |keyanspic|.
\NewDocumentCommand \anspic { s o +m }
  {
    \bool_if:NF \l__enumext_keyans_active_bool
      {
        \msg_error:nnnn { enumext } { wrong-place }{ keyanspic }{ save-ans }
      }
    \int_compare:nNnT { \l__enumext_level_int } > { 1 }
      {
        \msg_error:nn { enumext } { keyanspic-wrong-level }
      }
    \int_compare:nNnT { \l__enumext_keyans_level_int } = { 1 }
      {
        \msg_error:nnnn { enumext } { command-wrong-place }{ anspic }{ keyans }
      }
    \seq_put_right:Nn \l__enumext_keyans_pic_body_seq
      {
        \__enumext_keyans_anspic_code:nnn { #1 } { #2 } { #3 }
      }
  }
%% Internal code for |\anspic|.
\cs_new_protected:Nn \__enumext_keyans_anspic_code:nnn
  {
    \stepcounter { enumXvi }
    #3 \\
    \bool_if:nT { #1 }
      {
        \__enumext_keyans_env_addto_prop:n { #2 }
        \__enumext_keyans_env_make_label_ref:
        \__enumext_keyans_env_addto_seq:n { #2 }
        \bool_lazy_or:nnT
          { \l__enumext_keyans_show_ans_bool }
          { \l__enumext_keyans_show_pos_bool }
          {
            \tl_set_eq:NN \l__enumext_label_v_tl \l__enumext_label_vi_tl
            \__enumext_keyans_env_show_left:n { #2 }
            \tl_set_eq:NN \l__enumext_label_vi_tl \l__enumext_label_v_tl
          }
      }
    \tl_use:N \l__enumext_label_font_style_v_tl
    \__enumext_wrapper_label_v:n { \l__enumext_label_vi_tl }
  }
%% Define |keyanspic| environment.
\NewDocumentEnvironment{keyanspic}{ o }
  {
    \__enumext_keyans_pic_safe_exec:
    \__enumext_start_list:nn
      { }
      {
        \__enumext_keyans_pic_arg_two:
      }
    \vspace { \l__enumext_keyans_pic_above_skip }
  }
  {
    \IfNoValueTF { #1 }
      {
        \__enumext_keyans_pic_do:e { \seq_count:N \l__enumext_keyans_pic_body_seq }
      }
      { \__enumext_keyans_pic_do:n { #1 } }
    \__enumext_stop_list:
    \__enumext_keyans_check_starred:nn { anspic } { keyanspic }
    \setcounter { enumXvi } { 0 }
    \vspace { \l__enumext_topsep_v_skip }
  }
%% Internal code for |keyanspic| environment.
\cs_new_protected:Nn \__enumext_keyans_pic_safe_exec:
  {
    \int_incr:N \l__enumext_keyans_pic_level_int
    \int_compare:nNnT { \l__enumext_keyans_pic_level_int } > { 1 }
      {
        \msg_error:nn { enumext } { keyanspic-nested }
      }
  }
\cs_new_protected:Npn \__enumext_keyans_pic_skip_abs:N #1
  {
    \dim_compare:nNnT { #1 } < { 0pt }
      { \skip_set:Nn #1 { -#1 } }
  }
\cs_new_protected:Nn \__enumext_keyans_pic_arg_two:
  {
    \bool_set_false:N \l__enumext_custom_margin_v_bool
    \__enumext_list_arg_two_v:
    \skip_add:Nn \parsep { \itemsep }
    \dim_add:Nn  \leftmargin { -\labelwidth - \labelsep }
    \dim_zero:N  \labelwidth
    \dim_zero:N  \listparindent
    \dim_zero:N  \labelsep
    \skip_zero:N \partopsep
    \skip_zero:N \itemsep
    \__enumext_keyans_pic_skip_abs:N \parsep
    \skip_set:Nn \l__enumext_keyans_pic_above_skip
      {
        \box_dp:N \strutbox
        + \l__enumext_topsep_v_skip
        - \parsep
      }
    \__enumext_item_std:w \scan_stop:
  }
\cs_new_protected:Nn \__enumext_keyans_pic_do:n
  {
    \clist_map_function:nN { #1 } \__enumext_keyans_pic_row:n
  }
\cs_generate_variant:Nn \__enumext_keyans_pic_do:n { e }
\cs_new_protected:Nn \__enumext_keyans_pic_row:n
  {
    \dim_set:Nn \l__enumext_keyans_pic_width_dim { \linewidth/#1 }
    \int_set:Nn \l__enumext_keyans_pic_above_int { \l__enumext_keyans_pic_below_int }
    \int_set:Nn \l__enumext_keyans_pic_below_int { \l__enumext_keyans_pic_above_int + #1 }
    \int_step_inline:nnn
      { \l__enumext_keyans_pic_above_int + 1 }
      { \l__enumext_keyans_pic_below_int }
      {
        \begin{minipage}[b]{ \l__enumext_keyans_pic_width_dim }
          \centering
          \seq_item:Nn \l__enumext_keyans_pic_body_seq { ##1 }
        \end{minipage}
      }
    \par
  }
%% Define |enumext*|
\NewDocumentEnvironment{enumext*}{ o }
  {
    \int_incr:N \l__enumext_level_h_int
    \int_compare:nNnT { \l__enumext_level_h_int } > { 1 }
      {
        \msg_error:nn { enumext } { nested }
      }
    \tl_if_novalue:nF {#1} { \keys_set:nn { enumext / enumext* } {#1} }
    \__enumext_start_list:nn { }
      {
        \__enumext_list_arg_two_vii:
      }
      \__enumext_default_columns_set_vii:
      \item[] \scan_stop:
      \cs_set_eq:NN \__enumext_stop_item_tmp_vii: \noindent
      \cs_set_eq:NN \item \__enumext_start_item_tmp_vii:
  }
  {
    \__enumext_stop_item_tmp_vii:
    \__enumext_remove_extra_parsep_vii:
    \__enumext_stop_list:
    \int_gset_eq:NN \g__enumext_resume_vii_int \value{enumXvii}
  }
%% Define default columns width
\cs_new_protected:Nn \__enumext_default_columns_set_vii:
  {
    \bool_if:NF \l__enumext_columns_sep_vii_bool
      {
        \dim_set:Nn \l__enumext_columns_sep_vii_dim
          {
            ( \l__enumext_labelwidth_vii_dim + \l__enumext_labelsep_vii_dim ) / 2
          }
      }
    \int_set:Nn \l__enumext_tmpa_vii_int { \l__enumext_columns_vii_int - \c_one_int }
    \dim_set:Nn \l__enumext_item_width_vii_dim
      {
        ( \linewidth - \l__enumext_columns_sep_vii_dim * \l__enumext_tmpa_vii_int )
        / \l__enumext_columns_vii_int - \l__enumext_labelwidth_vii_dim
        - \l__enumext_labelsep_vii_dim
      }
    \dim_zero_new:N \itemwidth
  }
%% % Start boxed item's for |enumext*|
\cs_new_protected_nopar:Nn \__enumext_start_item_tmp_vii:
  {
    \__enumext_stop_item_tmp_vii:
    \int_incr:N \l__enumext_rows_items_vii_int
    \int_gincr:N \g__enumext_total_items_vii_int
    \peek_remove_spaces:n
      {
        \__enumext_item_peek_args_vii:
      }
  }
%% Peek argument for \item!()*[][] for |enumext*|
\cs_new_protected:Nn \__enumext_item_peek_args_vii:
  {
    \peek_meaning_remove:NTF !
      {
        \bool_set_true:N \l__enumext_minipage_vii_bool
        \peek_meaning:NTF ( % (number)
          { \__enumext_joined_item_vii:w }
          { \__enumext_joined_item_vii:w (1)  }
      }
      {
        \bool_set_false:N \l__enumext_minipage_vii_bool
        \peek_meaning:NTF ( % (number)
          { \__enumext_joined_item_vii:w }
          { \__enumext_joined_item_vii:w (1)  }
      }
  }
%% Joined item's for |enumext*|
\cs_new_protected:Npn \__enumext_joined_item_vii:w (#1)
  {
    \__enumext_joined_item_set_vii:n {#1}
    \peek_meaning_remove:NTF *
      { \__enumext_starred_item_vii:w  }
      { \__enumext_standard_item_vii:w }
  }
%% Set width for joined item's for |enumext*|
\cs_new_protected:Npn \__enumext_joined_item_set_vii:n #1
  {
    \int_set:Nn \l__enumext_joined_item_vii_int {#1}
    \int_compare:nNnT { \l__enumext_joined_item_vii_int } > { \l__enumext_columns_vii_int }
      {
        \msg_error:nnee { enumext } { item-joined }
          { \int_use:N \l__enumext_joined_item_vii_int }
          { \int_use:N \l__enumext_columns_vii_int }
      }
    \int_compare:nNnT { \l__enumext_joined_item_vii_int } > { \l__enumext_columns_vii_int - \l__enumext_rows_items_vii_int + \c_one_int }
      {
        \msg_error:nnee { enumext } { item-joined-columns }
          { \int_use:N \l__enumext_joined_item_vii_int }
          { \int_eval:n { \l__enumext_columns_vii_int - \l__enumext_rows_items_vii_int + \c_one_int } }
      }
    % Only need if #1 > 1 (default are set before)
    \int_compare:nNnTF { \l__enumext_joined_item_vii_int } > { \c_one_int }
      {
        % Adjust count (need -1 first)
        \int_set:Nn \l__enumext_joined_item_aux_vii_int {#1}%
        \int_decr:N  \l__enumext_joined_item_aux_vii_int
        \int_add:Nn \l__enumext_rows_items_vii_int { \l__enumext_joined_item_aux_vii_int }
        \int_gadd:Nn \g__enumext_total_items_vii_int { \l__enumext_joined_item_aux_vii_int }
        \dim_set:Nn \l__enumext_joined_width_vii_dim
          {
            \l__enumext_item_width_vii_dim * \l__enumext_joined_item_vii_int
            + ( \l__enumext_labelwidth_vii_dim + \l__enumext_labelsep_vii_dim  + \l__enumext_columns_sep_vii_dim )*\l__enumext_joined_item_aux_vii_int
          }
        \dim_set_eq:NN \itemwidth \l__enumext_joined_width_vii_dim
      }
      {
        \dim_set_eq:NN \l__enumext_joined_width_vii_dim \l__enumext_item_width_vii_dim
        \dim_set_eq:NN \itemwidth \l__enumext_item_width_vii_dim
      }
  }
%% Set \item[opt] for |enumext*|
\cs_new_protected:Npn \__enumext_standard_item_vii:w
  {
    \bool_set_false:N \l__enumext_item_starred_vii_bool
      \peek_meaning:NTF [
        {
          \bool_set_eq:NN \l__enumext_wrap_label_vii_bool \l__enumext_wrap_label_opt_vii_bool
          \__enumext_start_item_vii:w
        }
        {
          \bool_set_true:N \l__enumext_wrap_label_vii_bool
          \legacy_if_set_true:n {@noitemarg}
          %\@hyper@itemfalse
          %\if@nmbrlist\@hyper@itemtrue\fi
          \__enumext_start_item_vii:w [ \l__enumext_label_vii_tl ]
        }
  }
%% Set \item*[sym][sep] for |enumext*|
\cs_new_protected:Npn \__enumext_starred_item_vii:w
  {
    \bool_set_true:N \l__enumext_item_starred_vii_bool
    \bool_set_true:N \l__enumext_wrap_label_vii_bool
    \peek_meaning:NTF [
      { \__enumext_starred_item_vii_aux:w }
      { \__enumext_starred_item_vii_aux_ii:w }
  }
\cs_new_protected:Npn \__enumext_starred_item_vii_aux:w [#1]
  {
    \tl_gset:Nn \g__enumext_item_symbol_aux_vii_tl {#1}
    \__enumext_starred_item_vii_aux_ii:w
  }
\cs_new_protected:Npn \__enumext_starred_item_vii_aux_ii:w
  {
    \peek_meaning:NTF [
      { \__enumext_starred_item_vii_aux_iii:w }
      {
        \dim_set_eq:NN \l__enumext_item_symbol_sep_vii_dim \l__enumext_labelwidth_vii_dim
        \legacy_if_set_true:n {@noitemarg}
        \__enumext_start_item_vii:w [ \l__enumext_label_vii_tl ]
      }
  }
\cs_new_protected:Npn \__enumext_starred_item_vii_aux_iii:w [#1]
  {
    \dim_set:Nn \l__enumext_item_symbol_sep_vii_dim {#1}
    \legacy_if_set_true:n {@noitemarg}
    \__enumext_start_item_vii:w [ \l__enumext_label_vii_tl ]
  }
%% Real \item definition for |enumext*|
\cs_new_protected_nopar:Npn \__enumext_start_item_vii:w [#1]
  {
    \cs_set_eq:NN \__enumext_stop_item_tmp_vii: \__enumext_stop_item_vii:
    \legacy_if:nT {@noitemarg}
      {
        \legacy_if_set_false:n {@noitemarg}
        %%\@hyper@itemfalse
        %\if@nmbrlist\@hyper@itemtrue\fi
        \legacy_if:nT {@nmbrlist}
          {
            \legacy_if_set_true:n { @hyper@item }
            %\@hyper@itemtrue
            \refstepcounter{enumXvii}
          }
      }
    \group_begin:
      \lrbox{ \l__enumext_item_text_vii_box }
        % footnote
        \bool_if:NF \l__enumext_hyper_foot_key_bool
          {
            \__enumext_renew_footnote:
          }
        \bool_if:NT \l__enumext_item_starred_vii_bool
          {
            \tl_if_blank:VT \g__enumext_item_symbol_aux_vii_tl
              {
                \tl_gset_eq:NN \g__enumext_item_symbol_aux_vii_tl \l__enumext_item_symbol_vii_tl
              }
            \hspace*{ -\l__enumext_item_symbol_sep_vii_dim }
            \makebox[ \l__enumext_item_symbol_sep_vii_dim ][l]{ \g__enumext_item_symbol_aux_vii_tl }
            \tl_gclear:N \g__enumext_item_symbol_aux_vii_tl
          }
        \group_begin:
          \tl_use:N \l__enumext_label_font_style_vii_tl
          \bool_if:NTF \l__enumext_wrap_label_vii_bool
            {
              \makebox[ \l__enumext_labelwidth_vii_dim ][ \l__enumext_align_label_vii_tl ]{ \__enumext_wrapper_label_vii:n {#1} }
            }
            {
              \makebox[ \l__enumext_labelwidth_vii_dim ][ \l__enumext_align_label_vii_tl ]{ #1 }
            }
        \group_end:
        \skip_horizontal:N \l__enumext_labelsep_vii_dim \ignorespaces
        \tl_use:N \l__enumext_after_list_args_vii_tl
        \bool_if:NT \l__enumext_minipage_vii_bool
          {
            \minipage[ t ]{ \l__enumext_joined_width_vii_dim  }
          }
   }
\cs_new_protected_nopar:Nn \__enumext_stop_item_vii:
  {
        \bool_if:NT \l__enumext_minipage_vii_bool
          {
            \endminipage
          }
      \endlrbox
    \group_end:
    \dim_compare:nNnT
      { \box_wd:N \l__enumext_item_text_vii_box }
      >
      { \l__enumext_joined_width_vii_dim + \l__enumext_labelwidth_vii_dim + \l__enumext_labelsep_vii_dim }
      {
        \int_compare:nNnTF { \l__enumext_joined_item_vii_int } > { \c_one_int }
          {
            \msg_warning:nneee { enumext } {item-too-wide}
               { \dim_to_decimal:n { \box_wd:N \l__enumext_item_text_vii_box } }
               { \dim_to_decimal:n { \itemwidth } }
               { \int_use:N \l__enumext_joined_item_vii_int }
          }
          {
            \msg_warning:nnee { enumext } {item-more-space}
               { \dim_to_decimal:n { \box_wd:N \l__enumext_item_text_vii_box } }
               { \dim_to_decimal:n { \itemwidth } }
          }
      }
    \box_set_wd:Nn \l__enumext_item_text_vii_box
      {
        \l__enumext_joined_width_vii_dim + \l__enumext_labelwidth_vii_dim + \l__enumext_labelsep_vii_dim
      }
    \box_use:N \l__enumext_item_text_vii_box
    % footnote
    \bool_if:NF \l__enumext_hyper_foot_key_bool
      {
        \__enumext_print_footnote:
      }
    \int_compare:nNnTF { \l__enumext_rows_items_vii_int } = { \l__enumext_columns_vii_int }
      {
        \par\noindent
        \int_zero:N \l__enumext_rows_items_vii_int
      }
      { \hspace{ \l__enumext_columns_sep_vii_dim } }
  }
%% Remove extra parsep in |enumext*|
\cs_new_protected:Nn \__enumext_remove_extra_parsep_vii:
  {
    \int_compare:nNnT
      { \int_mod:nn {  \g__enumext_total_items_vii_int } { \l__enumext_columns_vii_int } } = { \c_zero_int }
      {
        \par
        \vspace*{-\parsep}
        \int_gzero:N \g__enumext_total_items_vii_int
      }
  }
%% Define |\getkeyans|, replace \exp_args:Nf by \exp_args:Ne.
\NewDocumentCommand \getkeyans { m }
  {
    \exp_args:Nx \__enumext_getkeyans_aux:n
      { \exp_args:Ne \tl_to_str:n { \text_expand:n {#1} } }
  }
\cs_new_protected:Npn \__enumext_getkeyans_aux:n #1
  {
    \str_if_in:nnTF {#1} { : }
      {
        \use:e
          {
            \cs_set:Npn \exp_not:N \__enumext_tmp:w ##1 \c_colon_str ##2 \scan_stop:
              { {##1} {##2} }
          }
        \exp_after:wN \__enumext_getkeyans:nn \__enumext_tmp:w #1 \scan_stop:
      }
      { \msg_error:nnn { enumext } { missing-colon } {#1} }
  }
\cs_new_protected:Npn \__enumext_getkeyans:nn #1 #2
  {
    \prop_if_exist:cF { g_keyans_#1_prop }
      { \msg_error:nnn { enumext } { undefined-storage-anskey } {#1} }
    \group_begin:
      \prop_item:cn { g_keyans_#1_prop }{#2}
    \group_end:
  }
%% Add keys for |\printkeyans|.
\keys_define:nn  { keyanskey / print }
  {
    level-1 .code:n     = \tl_put_right:Nn \l__enumext_keyans_print_i_tl
                            {
                              \setenumext[level,1] {#1} \setenumext[print,1] {#1}
                            },
    level-1 .initial:n  = {label=\arabic*., nosep, columns=2, first=\small,font=\small},
    level-2 .code:n     = \tl_put_right:Nn \l__enumext_keyans_print_ii_tl
                            {
                              \setenumext[level,2] {#1} \setenumext[print,2] {#1}
                            },
    level-2 .initial:n  = {nosep, label=(\alph*), first=\small, font=\small},
    level-3 .code:n     = \tl_put_right:Nn \l__enumext_keyans_print_iii_tl
                            {
                              \setenumext[level,3] {#1} \setenumext[print,3] {#1}
                            },
    level-3 .initial:n  = {nosep, label=\roman*., first=\small, font=\small},
    level-4 .code:n     = \tl_put_right:Nn \l__enumext_keyans_print_iv_tl
                            {
                              \setenumext[level,4] {#1} \setenumext[print,4] {#1}
                            },
    level-4 .initial:n  = {nosep, label=\Alph*., first=\small, font=\small},
  }
%% Define |\printkeyans|.
\NewDocumentCommand \printkeyans { O{} m }
  {
    \group_begin:
      \tl_use:N \l__enumext_keyans_print_i_tl
      \tl_use:N \l__enumext_keyans_print_ii_tl
      \tl_use:N \l__enumext_keyans_print_iii_tl
      \tl_use:N \l__enumext_keyans_print_iv_tl
      \__enumext_keyans_print_anskey:nn {#2}{#1}
    \group_end:
  }
\cs_new_protected:Npn \__enumext_keyans_print_anskey:nn #1#2
  {
    \seq_if_exist:cF { g_keyans_#1_seq }
      {
        \msg_error:nnn { enumext } { undefined-storage-anskey } {#1}
      }
    \seq_if_empty:cF { g_keyans_#1_seq }
      {
        \begin{enumext}[#2]
          \seq_map_inline:cn { g_keyans_#1_seq } { ##1 }
        \end{enumext}
      }
  }
%% Add keys for |\setenumext|.
\keys_define:nn { enumext / meta-families }
  {
    level-1 .code:n = { \keys_set:nn { enumext / level-1 } {#1} } ,
    level-2 .code:n = { \keys_set:nn { enumext / level-2 } {#1} } ,
    level-3 .code:n = { \keys_set:nn { enumext / level-3 } {#1} } ,
    level-4 .code:n = { \keys_set:nn { enumext / level-4 } {#1} } ,
    keyans  .code:n = { \keys_set:nn { enumext / keyans  } {#1} } ,
    print-1 .code:n = { \keys_set:nn { keyanskey / print } { level-1 = {#1} } } ,
    print-2 .code:n = { \keys_set:nn { keyanskey / print } { level-2 = {#1} } } ,
    print-3 .code:n = { \keys_set:nn { keyanskey / print } { level-3 = {#1} } } ,
    print-4 .code:n = { \keys_set:nn { keyanskey / print } { level-4 = {#1} } } ,
    unknown .code:n = { \msg_error:nn { enumext } { unknown-key-family } } ,
  }
\seq_const_from_clist:Nn \c__enumext_all_families_seq
  {
    level-1 , level-2 , level-3 ,
    level-4 , keyans  , print-1 ,
    print-2 , print-3 , print-4 ,
  }
%% Define |\setenumext|.
\NewDocumentCommand \setenumext { o +m }
  {
    \IfValueTF {#1}
      {
        \seq_clear:N \l__enumext_setkey_tmpa_seq
        \seq_set_from_clist:Nn \l__enumext_setkey_tmpb_seq {#1}
        \int_set:Nn \l__enumext_setkey_tmpa_int
          { \seq_count:N \l__enumext_setkey_tmpb_seq }
        \int_compare:nNnTF { \l__enumext_setkey_tmpa_int } > { 1 }
          {
            \seq_pop_left:NN \l__enumext_setkey_tmpb_seq \l__enumext_setkey_tmpa_tl
            \seq_map_function:NN \l__enumext_setkey_tmpb_seq \__enumext_set_parse:n
            \seq_set_map_x:NNn \l__enumext_setkey_tmpa_seq \l__enumext_setkey_tmpa_seq
              { \tl_use:N \l__enumext_setkey_tmpa_tl - ##1 }
          }
          { \seq_put_right:Ne \l__enumext_setkey_tmpa_seq { \tl_trim_spaces:n {#1} } }
        \seq_if_empty:NTF \l__enumext_setkey_tmpa_seq
          { \seq_map_inline:Nn \c__enumext_all_families_seq }
          { \seq_map_inline:Nn \l__enumext_setkey_tmpa_seq }
      }
      { \seq_map_inline:Nn \c__enumext_all_families_seq }
        { \keys_set:nn { enumext / meta-families } { ##1 = {#2} } }
  }
\cs_new_protected:Npn \__enumext_set_parse:n #1
  {
    \tl_set:Ne \l__enumext_setkey_tmpb_tl { \tl_trim_spaces:n {#1} }
    \int_step_inline:nnn { 0 } { 4 } % <- max level
      { \tl_remove_all:Nn \l__enumext_setkey_tmpb_tl {##1} }
    \tl_if_empty:NTF \l__enumext_setkey_tmpb_tl
      {
        \seq_put_right:Ne \l__enumext_setkey_tmpa_seq
          { \tl_trim_spaces:n {#1} }
      }
      { \__enumext_set_error:nn {#1} { } }
  }
\cs_new_protected:Npn \__enumext_set_error:nn #1#2
  { \msg_error:nnn { enumext } { invalid-key } {#1} {#2} }
%% Messages.
\msg_new:nnn { enumext } { counters }
  {
    The ~ counter ~ '#1' ~ is ~ already ~ defined ~ by ~ some ~ \\
    package ~ or ~ macro, ~ it ~ cannot ~ be ~ continued.
  }
\msg_new:nnn { enumext } { invalid-key }
  {
    The ~ key ~ '#1' ~ is ~ not ~ know ~ the ~ level ~ #2.
  }
\msg_new:nnn { enumext } { unknown-key-family }
  {
    Unknown~key~family~`\l_keys_key_str'~for~enumext.
  }
\msg_new:nnn { enumext } { width-negative }
  {
    Ignoring ~ negative ~ value ~ '#1=#2' ~ \msg_line_context:.\\
    The ~ key ~ '#1'~ accepts ~ values  ~ >= ~ 0pt.
  }
\msg_new:nnn { enumext } { width-zero }
  {
    Invalid ~ '#1=#2' ~ \msg_line_context:.\\
    The ~ key ~ '#1'~ accepts ~ values  ~ > ~ 0pt.
  }
\msg_new:nnn { enumext } { list-lengths }
  {
    **** ~ Lengths ~ used ~ by ~ 'enumext' ~ environment ~ \msg_line_context:~\c_space_tl ****\\
    \__enumext_msg_skip_show:nnn { dim  } { labelsep      } {#1}
    \__enumext_msg_skip_show:nnn { dim  } { labelwidth    } {#1}
    \__enumext_msg_skip_show:nnn { dim  } { itemindent    } {#1}
    \__enumext_msg_skip_show:nnn { dim  } { leftmargin    } {#1}
    \__enumext_msg_skip_show:nnn { dim  } { rightmargin   } {#1}
    \__enumext_msg_skip_show:nnn { dim  } { listparindent } {#1}
    \__enumext_msg_skip_show:nnn { skip } { topsep    } {#1}
    \__enumext_msg_skip_show:nnn { skip } { parsep    } {#1}
    \__enumext_msg_skip_show:nnn { skip } { partopsep } {#1}
    \__enumext_msg_skip_show:nnn { skip } { itemsep   } {#1}
    ****************************************************
  }
\msg_new:nnn { enumext } { items-same-answer }
  {
    **********~Checking~answers~on~'#1'~OK~**********\\
    **~ All ~ items ~ stored ~ in ~ sequence ~ '#1' ~ have ~ an ~ answer. \\
    ****************************************
    \prg_replicate:nn { 7 + \str_count:n {#1} } { * }
  }
\msg_new:nnn { enumext } { item-different-answer }
  {
    Number ~ of ~ items ~ different ~  of ~ number ~ of ~
    answer ~ in ~ sequence ~ '#1'~ closed ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { missing-starred }
  {
    Missing ~ '\c_backslash_str #1*' ~ in ~ '#2' ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { list-too-deep }
  {
    Too ~ deep ~ nesting  ~ for ~ 'enumext' ~ \msg_line_context:.~ \\
    The ~ maximum  ~ level  ~ of  ~ nesting  ~ is ~ 4.
  }
\msg_new:nnn { enumext } { anskey-wrong-place }
  {
    Wrong ~ place ~ for ~ command ~ '\c_backslash_str #1' ~ \msg_line_context:.~ \\
    '\c_backslash_str #1' ~ works ~ in ~ the ~ environment ~ '#2'.
  }
\msg_new:nnn { enumext } { anspic-wrong-place }
  {
    Wrong ~ place ~ for ~ command ~ '\c_backslash_str #1' ~ \msg_line_context:.~ \\
    '\c_backslash_str #1' ~ works ~ in ~ the ~ environment ~ '#2'.
  }
\msg_new:nnn { enumext } { command-wrong-place }
  {
    Wrong ~ place ~ for ~ command ~ '\c_backslash_str #1' ~ \msg_line_context:.~ \\
    '\c_backslash_str #1' ~ works ~ outside ~ the ~ environment ~ '#2'.
  }
\msg_new:nnn { enumext } { keyans-nested }
  {
    The ~ environment ~ 'keyans' ~ can't ~ be  ~ nested  ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { keyans-wrong-level }
  {
    Wrong ~ level ~ position ~ for ~ 'keyans' ~ \msg_line_context:.~ \\
    The ~ environment ~ 'keyans' ~ can ~ only ~ be ~ in ~ the ~ first ~ level.
  }
\msg_new:nnn { enumext } { wrong-place }
  {
    Wrong ~ place ~ for ~ '#1' ~ environment ~\msg_line_context:.~ \\
    '#1' ~ is ~ only ~ found ~ with ~ '#2' ~  in  ~  'enumext.
  }
\msg_new:nnn { enumext } { keyanspic-nested }
  {
    The ~ environment ~ 'keyanspic' ~ can't ~ be  ~ nested~ \msg_line_context:.~.
  }
\msg_new:nnn { enumext } { keyanspic-wrong-level }
  {
    Wrong ~ level ~ position ~ for ~ 'keyanspic' ~ \msg_line_context:.~ \\
    The ~ environment ~ 'keyans' ~ can ~ only ~ be ~ in ~ the ~ first ~ level.
  }
\msg_new:nnn { enumext } { undefined-storage-anskey }
  {
    Storage ~ named ~ '#1' ~ is ~ not ~ defined ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { missing-miniright }
  {
    Missing ~ '\c_backslash_str miniright' ~ in ~ \msg_line_context:.\\
    The ~ key ~ 'mini-env' ~ need ~ '\c_backslash_str miniright'.
  }
\msg_new:nnn { enumext } { wrong-miniright-place }
  {
    Wrong ~ place ~ for ~ '\c_backslash_str miniright' ~ \msg_line_context:.~ \\
    Works ~ in ~ 'enumext' ~ and ~ 'keyans' ~ with ~ key ~ 'mini-env'.
  }
\msg_new:nnn { enumext } { wrong-miniright-use }
  {
    Wrong ~ use ~ for ~ '\c_backslash_str miniright' ~ \msg_line_context:.~ \\
    '\c_backslash_str miniright' ~ need ~ a ~ key ~ 'mini-env'.
  }
\msg_new:nnn { enumext } { nested }
  {
    The ~ starred ~ environment ~ can't ~ be ~ nested ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { item-joined }
  {
    Items ~ joined ~ (#1) ~ > ~ #2  ~ columns ~\msg_line_context:.
  }
\msg_new:nnn { enumext } { item-more-space }
  {
    Need ~ more ~ space ~ #1pt ~ >  #2pt ~\msg_line_context:. ~  \\
    Use ~ '\c_backslash_str item(number)' ~ or ~ '\c_backslash_str parbox[t]{\c_backslash_str itemwidth}{text}'.
  }
\msg_new:nnn { enumext } {item-too-wide}
  {
    Item ~ too ~ wide ~ #1pt ~ > ~  #2pt ~\msg_line_context:. ~  \\
    Increment ~ number ~ in ~ '\c_backslash_str item(#3)' ~ or ~ use ~ '\c_backslash_str item!(#3)'.
  }
\msg_new:nnn { enumext } { item-joined-columns }
  {
    Not ~ space ~ to ~ join ~ items ~ (#1) ~ > ~ #2 ~\msg_line_context:.
  }
\endinput
%%
%% End of file `enumext.sty'.
