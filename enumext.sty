%%
%% This is file `enumext.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% enumext.dtx  (with options: `package')
%% Copyright (C) 2024 by Pablo González L <pablgonz@educarchile.cl>
%% 
%% This work may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License, either version 1.3c of this license or (at
%% your option) any later version. The latest version of this license is in
%% 
%%  https://www.latex-project.org/lppl.txt
%% 
%% and version 1.3c or later is part of all distributions of LaTeX version
%% 2005/12/01 or later.
%% 
%% This work is "maintained" (as per the LPPL maintenance status)
%% by Pablo González L.
%% 
%% This work consists of the files enumext.dtx and enumext.sty.
%% 
\NeedsTeXFormat{LaTeX2e}[2024-06-01]
\ProvidesExplPackage
  {enumext}
  {2024-09-07}
  {1.0}
  {Enumerate exercise sheets}
\hook_gput_code:nnn {begindocument} {enumext}
  {
    \IfPackageLoadedTF { multicol }
      {
        \msg_info:nnn { enumext } { package-load } { multicol }
      }
      {
        \msg_info:nnn { enumext } { package-not-load } { multicol }
        \RequirePackage{multicol}[2024-05-23]
      }
    \IfPackageLoadedTF { scontents }
      {
        \msg_info:nnn { enumext } { package-load } { scontents }
      }
      {
        \msg_info:nnn { enumext } { package-not-load } { scontents }
        \RequirePackage{scontents}
      }
  }
%% Variable for levels and nesting off all environments and \anskey.
\int_new:N  \l__enumext_level_int
\int_new:N  \l__enumext_level_h_int
\int_new:N  \l__enumext_anskey_level_int
\int_new:N  \l__enumext_keyans_level_int
\int_new:N  \l__enumext_keyans_level_h_int
\int_new:N  \l__enumext_keyans_pic_level_int
%% Internal vars for levels and nesting off all environments.
\bool_new:N \l__enumext_starred_bool
\bool_new:N \g__enumext_starred_bool
\bool_new:N \l__enumext_starred_first_bool
\bool_new:N \l__enumext_standar_bool
\bool_new:N \g__enumext_standar_bool
\bool_new:N \l__enumext_standar_first_bool
\bool_new:N \l__enumext_anskey_env_bool
\bool_new:N \l__enumext_keyans_env_bool
\tl_new:N   \g__enumext_start_line_tl
\tl_new:N   \g__enumext_envir_name_tl
\tl_new:N   \l__enumext_envir_name_tl
%% Variable for counters
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \tl_new:c { l__enumext_counter_#1_tl }
  }
\clist_map_inline:nn { i, ii, iii, iv, v, vi, vii, viii } { \__enumext_tmp:n {#1} }
%% Variables used by |ref| key.
\tl_const:Nn \c__enumext_counter_style_tl
  { { arabic } { roman } { Roman } { alph } { Alph } }
\tl_new:N \l__enumext_ref_key_arg_tl
\tl_new:N \l__enumext_ref_the_count_tl
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \tl_new:c  { l__enumext_renew_the_count_#1_tl }
    \tl_new:c  { l__enumext_the_counter_#1_tl }
    \tl_set:ce { l__enumext_the_counter_#1_tl } { \exp_not:c { theenumX#1 } }
  }
\clist_map_inline:nn { i, ii, iii, iv, v, vi, vii, viii } { \__enumext_tmp:n {#1} }
%% Variables used by |series|, |resume| and |resume*| keys implementation.
\int_new:N  \g__enumext_resume_int
\int_new:N  \g__enumext_resume_vii_int
\tl_new:N   \l__enumext_resume_name_tl
\bool_new:N \l__enumext_resume_active_bool
\tl_new:N   \g__enumext_standar_series_tl
\tl_new:N   \g__enumext_starred_series_tl
%% Variables used by |label|, |ref| and |widest| keys.
\dim_new:N \l__enumext_current_widest_dim
\tl_new:N  \g__enumext_counter_styles_tl
\tl_new:N  \g__enumext_widest_label_tl
\box_new:N \l__enumext_label_width_by_box
%% Add \l__enumext_leftmargin_tmp_X_bool, \l__enumext_leftmargin_tmp_X_dim,
%% \l__enumext_leftmargin_X_dim, \l__enumext_itemindent_X_dim used by the
%% function \enumext_calc_hspace:NNNNNNNNNNNN and |list-indent| key.
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \bool_new:c { l__enumext_leftmargin_tmp_#1_bool }
    \dim_new:c  { l__enumext_leftmargin_tmp_#1_dim }
    \dim_new:c  { l__enumext_leftmargin_#1_dim     }
    \dim_new:c  { l__enumext_itemindent_#1_dim     }
  }
\clist_map_inline:nn { i, ii, iii, iv, v, vi, vii, viii } { \__enumext_tmp:n {#1} }
%% Variables used by |columns| key in |enumext| and |keyans|.
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \skip_new:c  { l__enumext_multicols_above_#1_skip }
    \skip_new:c  { l__enumext_multicols_below_#1_skip }
    \skip_new:c  { g__enumext_multicols_right_#1_skip }
  }
\clist_map_inline:nn { i, ii, iii, iv, v } { \__enumext_tmp:n {#1} }
%% Variables used by |miniright|, |mini-env|, |mini-sep| and |\miniright|.
\int_new:N  \g__enumext_minipage_stat_int
\skip_new:N \l__enumext_minipage_left_skip
\skip_new:N \l__enumext_minipage_right_skip
\skip_new:N \l__enumext_minipage_after_skip
\skip_new:N \g__enumext_minipage_right_skip
\skip_new:N \g__enumext_minipage_after_skip
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \dim_new:c  { l__enumext_minipage_left_#1_dim    }
    \bool_new:c { l__enumext_minipage_active_#1_bool }
  }
\clist_map_inline:nn { i, ii, iii, iv, v, vii, viii } { \__enumext_tmp:n {#1} }
%% Internal variables used by |wrap-label|, |start*|, |start|, |align|, |above| and |below| keys.
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \bool_new:c { l__enumext_wrap_label_#1_bool     }
    \bool_new:c { l__enumext_wrap_label_opt_#1_bool }
    \int_new:c  { l__enumext_start_#1_int           }
    \tl_new:c   { l__enumext_fake_item_indent_#1_tl }
    \tl_new:c   { l__enumext_label_fill_left_#1_tl  }
    \tl_new:c   { l__enumext_label_fill_right_#1_tl }
    \bool_new:c { l__enumext_vspace_a_star_#1_bool  }
    \bool_new:c { l__enumext_vspace_b_star_#1_bool  }
  }
\clist_map_inline:nn { i, ii, iii, iv, v, vii, viii } { \__enumext_tmp:n {#1} }
%% Variables used by |save-ans| key.
\bool_new:N \l__enumext_store_active_bool
\tl_new:N   \l__enumext_store_name_tl
\tl_new:N   \g__enumext_store_name_tl
\tl_new:N   \l__enumext_store_anskey_arg_tl
\tl_new:N   \l__enumext_store_anskey_env_tl
\tl_new:N   \l__enumext_store_anskey_opt_tl
\tl_new:N   \l__enumext_store_current_label_tl
\tl_new:N   \l__enumext_store_current_opt_arg_tl
\tl_new:N   \l__enumext_store_current_label_tmp_tl
%% Variables used by |\setenumext|.
\tl_new:N  \l__enumext_setkey_tmpa_tl
\tl_new:N  \l__enumext_setkey_tmpb_tl
\int_new:N \l__enumext_setkey_tmpa_int
\seq_new:N \l__enumext_setkey_tmpa_seq
\seq_new:N \l__enumext_setkey_tmpb_seq
\tl_new:N  \l__enumext_meta_path_tl
\seq_new:N \l__enumext_foreach_print_seq
\tl_new:N  \l__enumext_foreach_name_prop_tl
\tl_new:N  \g__enumext_foreach_default_keys_tl
%% Variables used by|\printkeyans|, |mark-pos|, |item-sym*|, |save-key| and  store level in |enumext| and |enumext*|.
\tl_new:N  \l__enumext_print_keyans_starred_tl
\str_new:N \l__enumext_mark_position_str
\tl_new:N  \g__enumext_item_symbol_aux_tl
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \tl_new:c   { l__enumext_print_keyans_#1_tl        }
    \tl_new:c   { l__enumext_store_save_key_#1_tl      }
    \bool_new:c { l__enumext_store_save_key_#1_bool    }
    \bool_new:c { l__enumext_store_upper_level_#1_bool }
  }
\clist_map_inline:nn { i, ii, iii, iv, vii } { \__enumext_tmp:n {#1} }
%% Variables used by |\anspic| and |keyanspic|.
\seq_new:N  \l__enumext_keyans_pic_body_seq
\dim_new:N  \l__enumext_keyans_pic_width_dim
\int_new:N  \l__enumext_keyans_pic_above_int
\int_new:N  \l__enumext_keyans_pic_below_int
\skip_new:N \l__enumext_keyans_pic_above_skip
%% Variables used by check-answer mechanism, |check-ans| and |no-store| keys.
\bool_new:N \l__enumext_check_answers_bool
\bool_new:N \g__enumext_check_ans_key_bool
\tl_new:N   \l__enumext_check_start_line_env_tl
\int_new:N  \g__enumext_check_starred_cmd_int
\int_new:N  \g__enumext_item_anskey_int
\int_new:N  \g__enumext_item_number_int
\bool_new:N \l__enumext_item_number_bool
\int_new:N  \g__enumext_item_answer_diff_int
%% Variables used for hyperref detection.
\bool_new:N \l__enumext_hyperref_bool
\bool_new:N \l__enumext_footnotes_key_bool
%% Variables used by |save-ref| key (internal label and ref).
\tl_new:N \l__enumext_newlabel_arg_one_tl
\tl_new:N \l__enumext_newlabel_arg_two_tl
\tl_new:N \l__enumext_write_aux_file_tl
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \tl_new:c { l__enumext_label_copy_#1_tl }
  }
\clist_map_inline:nn { i, ii, iii, iv, v, vi, vii, viii } { \__enumext_tmp:n {#1} }
%% Variables used by |footnote|.
\int_new:N \g__enumext_footnote_int
\seq_new:N \g__enumext_footnote_arg_seq
\seq_new:N \g__enumext_footnote_int_seq
%% Variables used by |enumext*| and |keyans*| environments.
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \bool_new:c { l__enumext_item_starred_#1_bool    }
    \int_new:c  { l__enumext_item_column_pos_#1_int  }
    \int_new:c  { g__enumext_item_count_all_#1_int   }
    \int_new:c  { l__enumext_joined_item_#1_int      }
    \int_new:c  { l__enumext_joined_item_aux_#1_int  }
    \int_new:c  { l__enumext_tmpa_#1_int             }
    \dim_new:c  { l__enumext_tmpa_#1_dim             }
    \box_new:c  { l__enumext_item_text_#1_box        }
    \dim_new:c  { l__enumext_joined_width_#1_dim     }
    \dim_new:c  { l__enumext_item_width_#1_dim       }
    \tl_new:c   { g__enumext_item_symbol_aux_#1_tl   }
    \str_new:c  { l__enumext_align_label_#1_str      }
    \bool_new:c { g__enumext_minipage_active_#1_bool }
    \box_new:c  { l__enumext_miniright_code_#1_box   }
    \bool_new:c { g__enumext_minipage_center_#1_bool }
    \dim_new:c  { g__enumext_minipage_right_#1_dim   }
    \skip_new:c { g__enumext_minipage_right_#1_skip  }
  }
\clist_map_inline:nn { vii, viii } { \__enumext_tmp:n {#1} }
\clist_const:Nn \c__enumext_all_envs_clist
  {
    {level-1}{i}, {level-2}{ii}, {level-3}{iii}, {level-4}{iv},
    {keyans}{v}, {enumext*}{vii}, {keyans*}{viii}
  }
\cs_generate_variant:Nn \keys_precompile:nnN { neN }
\cs_generate_variant:Nn \seq_use:Nn { NV }
%% A internal "hooks" functions used for copying and execute code.
\cs_new_protected:Npn \__enumext_at_begin_document:n #1
  {
    \hook_gput_code:nnn {begindocument} {enumext} { #1 }
  }
\cs_new_protected:Npn \__enumext_after_env:nn #1 #2
  {
    \hook_gput_code:nnn {env/#1/after} {enumext} {#2}
  }
\cs_new_protected:Npn \__enumext_before_env:nn #1 #2
  {
    \hook_gput_code:nnn {env/#1/before} {enumext} {#2}
  }
%% Function to check current level.
\cs_new:Nn \__enumext_level:
  {
    \int_to_roman:n { \l__enumext_level_int }
  }
%% Function to check integer variables used by |start| and |widest| keys.
\prg_new_protected_conditional:Npnn \__enumext_if_is_int:n #1 { T, F, TF }
  {
    \regex_match:nnTF { ^[\+\-]?[\d]+$ } {#1} % $
      { \prg_return_true: }
      { \prg_return_false: }
  }
%% Regex for replace '*' for |ref| key.
\cs_new_protected:Nn \__enumext_regex_counter_style:
  {
    \tl_map_inline:Nn \c__enumext_counter_style_tl
      {
        \regex_replace_once:nnN { \c{##1}\* }
          { \c{##1}\cB{\u{l__enumext_ref_the_count_tl}\cE} } \l__enumext_ref_key_arg_tl
      }
  }
%% Function to show list lengths used by |show-length| key.
\cs_new:Npn \__enumext_show_length:nnn #1 #2 #3
  {
    * ~ #2
    \prg_replicate:nn { 14 - \str_count:n {#2} } { ~ }
      = ~ \use:c { #1_use:c } { l__enumext_#2_#3_#1 } \\
  }
%% Remove last skip or kern.
\cs_new_protected:Npn \__enumext_unskip_unkern:
  {
    \int_case:nnT { \lastnodetype }
      {
        { 11 }
             {
               \typeout{SKIIIIIIIIIIIIIIIIP}
               \typeout{\the\lastskip}
               \unskip
             }
        { 12 }
             {
               \typeout{KERRRRRRRRRRRRRRRRRN}
               \typeout{\the\lastkern}
               \unkern
             }
      }
  }
%% Function to check/set current environment for |enumext| and |enumext*|.
\cs_new_protected:Nn \__enumext_is_not_nested:
  {
    \str_case:en { \@currenvir }
      {
        {enumext}
          {
            \tl_set:Nn \l__enumext_envir_name_tl { enumext }
            \bool_lazy_and:nnT
              { \bool_not_p:n { \g__enumext_standar_bool } }
              { \int_compare_p:nNn { \l__enumext_level_h_int } = { 0 } }
              {
                \bool_gset_true:N \g__enumext_standar_bool
              }
          }
        {enumext*}
          {
            \tl_set:Nn \l__enumext_envir_name_tl { enumext* }
            \bool_lazy_and:nnT
              { \bool_not_p:n { \g__enumext_starred_bool } }
              { \int_compare_p:nNn { \l__enumext_level_int } = { 0 } }
              {
                \bool_gset_true:N \g__enumext_starred_bool
              }
          }
      }
  }
%% Function to check/set first level vars for |enumext| and |enumext*|.
\cs_new_protected:Nn \__enumext_is_on_first_level:
  {
    \bool_lazy_all:nT
      {
        { \bool_if_p:N \g__enumext_standar_bool }
        { \int_compare_p:nNn { \l__enumext_level_int } = { 1 } }
        { \int_compare_p:nNn { \l__enumext_level_h_int } = { 0 } }
      }
      {
        \bool_set_true:N \l__enumext_standar_first_bool
        \bool_set_true:N \l__enumext_anskey_env_bool
        \tl_gset:Nn \g__enumext_envir_name_tl { enumext }
        \tl_gset:Ne \g__enumext_start_line_tl
          {
            on ~ line ~ \exp_not:V \inputlineno
          }
      }
    \bool_lazy_all:nT
      {
        { \bool_if_p:N \g__enumext_starred_bool }
        { \int_compare_p:nNn { \l__enumext_level_h_int } = { 1 } }
        { \int_compare_p:nNn { \l__enumext_level_int } = { 0 } }
      }
      {
        \bool_set_true:N \l__enumext_starred_first_bool
        \bool_set_true:N \l__enumext_anskey_env_bool
        \tl_gset:Nn \g__enumext_envir_name_tl { enumext* }
        \tl_gset:Ne \g__enumext_start_line_tl
          {
            on ~ line ~ \exp_not:V \inputlineno
          }
      }
  }
%% Function to save the current name and start line for |keyans|, |keyans*| and |keyanspic|.
\cs_new_protected:Nn \__enumext_keyans_name_and_start:
  {
    \str_case:en { \@currenvir }
      {
        {keyans}
          {
            \tl_set:Nn \l__enumext_envir_name_tl { keyans }
            \tl_set:Ne \l__enumext_check_start_line_env_tl
              {
                in ~ 'keyans' ~ start ~ on ~ line ~ \exp_not:V \inputlineno
              }
          }
        {keyans*}
          {
            \tl_set:Nn \l__enumext_envir_name_tl { keyans* }
            \tl_set:Ne \l__enumext_check_start_line_env_tl
              {
                in ~ 'keyans*' ~ start ~ on ~ line ~ \exp_not:V \inputlineno
              }
          }
        {keyanspic}
          {
            \tl_set:Nn \l__enumext_envir_name_tl { keyanspic }
            \tl_set:Ne \l__enumext_check_start_line_env_tl
              {
                in ~ 'keyanspic' ~ start ~ on ~ line ~ \exp_not:V \inputlineno
              }
          }
      }
  }
%% Reset all global vars after use in hook function.
\cs_new_protected:Nn \__enumext_reset_global_vars:
  {
    \__enumext_reset_global_int:
    \__enumext_reset_global_bool:
    \__enumext_reset_global_tl:
  }
\cs_new_protected:Nn \__enumext_reset_global_int:
  {
    \int_gzero:N \g__enumext_item_number_int
    \int_gzero:N \g__enumext_item_anskey_int
    \int_gzero:N \g__enumext_item_answer_diff_int
  }
\cs_new_protected:Nn \__enumext_reset_global_bool:
  {
    \bool_gset_false:N \g__enumext_check_ans_key_bool
    \bool_gset_false:N \g__enumext_standar_bool
    \bool_gset_false:N \g__enumext_starred_bool
  }
\cs_new_protected:Nn \__enumext_reset_global_tl:
  {
    \tl_gclear:N \g__enumext_store_name_tl
    \tl_gclear:N \g__enumext_start_line_tl
    \tl_gclear:N \g__enumext_envir_name_tl
  }
%% Write all global vars after use in hook function.
\cs_new_protected:Nn \__enumext_log_global_vars:
  {
    \msg_log:nneeee { enumext } { prop-seq-int-hook }
      { \g__enumext_store_name_tl }
      { \prop_count:c { g__enumext_ \g__enumext_store_name_tl _prop } }
      { \seq_count:c { g__enumext_ \g__enumext_store_name_tl _seq } }
      { \int_use:c { g__enumext_resume_ \g__enumext_store_name_tl _int } }
  }
%% Write all global vars for check-answer after use in hook function.
\cs_new_protected:Nn \__enumext_log_answer_vars:
  {
    \msg_log:nneee { enumext } { item-answer-hook }
      { \int_use:N \g__enumext_item_number_int }
      { \int_use:N \g__enumext_item_anskey_int }
      { \int_eval:n { \g__enumext_item_number_int - \g__enumext_item_anskey_int} }
  }
%% Copy list tools.
\__enumext_at_begin_document:n
  {
    \cs_new_eq:NN   \__enumext_start_list:nn \list
    \cs_new_eq:NN   \__enumext_stop_list: \endlist
    \NewCommandCopy \__enumext_item_std:w \item
  }
%% Copy minipage tools.
\__enumext_at_begin_document:n
  {
    \cs_new_eq:NN \__enumext_minipage:w \minipage
    \cs_new_eq:NN \__enumext_endminipage: \endminipage
  }
%% Function for define a internal minipage environment.
\cs_new_protected:Nn \__enumext_internal_mini_page:
  {
    \int_compare:nNnT { \l__enumext_level_int } = { 0 }
      {
        \DeclareDocumentEnvironment{__enumext_mini_page}{ m }
          {
            \__enumext_minipage:w [ t ] { ##1 }
              \legacy_if_gset_false:n { @minipage }
              \skip_vertical:N \c_zero_skip
          }
          {
              \skip_vertical:N \c_zero_skip
            \__enumext_endminipage:
          }
      }
  }
%% Detection off |hyperref| package with |hyperfootnotes=true|.
\hook_gput_code:nnn { begindocument } { enumext } { \__enumext_after_hyperref: }
\hook_gset_rule:nnnn { begindocument } { enumext } { after } { hyperref }
\cs_new_protected:Nn \__enumext_after_hyperref:
  {
    \IfPackageLoadedTF { hyperref }
      {
        \msg_info:nnn { enumext } { package-load } { hyperref }
        \bool_set_true:N \l__enumext_hyperref_bool
        \IfHyperBoolean{hyperfootnotes}
          {
            \typeout{hyperfootnotes=true}
            \bool_set_true:N \l__enumext_footnotes_key_bool
          }
          { \typeout{hyperfootnotes=false} }
      }
      {  }
%% Detection off |footnotehyper| package.
   \bool_if:NT \l__enumext_footnotes_key_bool
     {
       \IfPackageLoadedTF { footnotehyper }
         {
           \msg_info:nnn { enumext } { package-load } { footnotehyper }
         }
         {
           \typeout{No ~ footnotehyper ~ load}
           \typeout{Load ~ and  ~ use  ~ \string\makesavenoteenv{enumext*}}
           \bool_set_false:N \l__enumext_footnotes_key_bool
         }
     }
    \bool_if:NTF \l__enumext_hyperref_bool
      {
        \cs_new_eq:NN \__enumext_hypertarget:nn \hypertarget
        \cs_new_eq:NN \__enumext_phantomsection: \phantomsection
      }
      {
        \cs_new_eq:NN \__enumext_hypertarget:nn \use_none:nn
        \cs_new_eq:NN \__enumext_phantomsection: \prg_do_nothing:
      }
  }
%% Write internal |label| in |.aux| file for |save-ref| key.
\cs_new_protected:Npn \__enumext_newlabel:nn #1 #2
  {
    \protected@write \@auxout { }
      {
        \token_to_str:N \newlabel {#1}
          {
            {#2}
            \bool_if:NT \l__enumext_hyperref_bool
              { { \thepage } {#2} {#1} }
            { }
          }
      }
    \__enumext_hypertarget:nn {#1} { }
    \__enumext_phantomsection:
  }
%% Public dimension |\itemwidth|
\dim_zero_new:N \itemwidth
%% Definition of counters.
\cs_new_protected:Npn \__enumext_define_counters:Nn #1 #2
  {
    \cs_if_exist:cTF { c@ #2 }
      { \msg_fatal:nnn { enumext } { counters }{ #2 } }
      {
        \tl_set:Nn #1 { #2 }
        \newcounter { #2 }
      }
  }
\__enumext_define_counters:Nn \l__enumext_counter_i_tl    { enumXi    }
\__enumext_define_counters:Nn \l__enumext_counter_ii_tl   { enumXii   }
\__enumext_define_counters:Nn \l__enumext_counter_iii_tl  { enumXiii  }
\__enumext_define_counters:Nn \l__enumext_counter_iv_tl   { enumXiv   }
\__enumext_define_counters:Nn \l__enumext_counter_v_tl    { enumXv    }
\__enumext_define_counters:Nn \l__enumext_counter_vi_tl   { enumXvi   }
\__enumext_define_counters:Nn \l__enumext_counter_vii_tl  { enumXvii  }
\__enumext_define_counters:Nn \l__enumext_counter_viii_tl { enumXviii }
%% Register of counters style.
\cs_new_protected:Npn \__enumext_register_counter_style:Nn #1 #2
  {
    \tl_const:cn { c__enumext_widest_ \cs_to_str:N #1 _tl } {#2}
    \tl_gput_right:Nn \g__enumext_counter_styles_tl {#1}
  }
\__enumext_register_counter_style:Nn \arabic { 0 }
\__enumext_register_counter_style:Nn \Alph   { M }
\__enumext_register_counter_style:Nn \alph   { m }
\__enumext_register_counter_style:Nn \Roman  { VIII }
\__enumext_register_counter_style:Nn \roman  { viii }
%% Set default label width using a box width.
\cs_new_protected:Npn \__enumext_label_width_by_box:Nn #1 #2
  {
    \hbox_set:Nn \l__enumext_label_width_by_box {#2}
    \dim_set:Nn #1 { \box_wd:N \l__enumext_label_width_by_box }
  }
\cs_generate_variant:Nn \__enumext_label_width_by_box:Nn { cv }
%% Function to support |*| in |label| key.
\cs_new_protected:Npn \__enumext_label_style:Nnn #1 #2 #3
  {
    \tl_clear_new:N #1
    \tl_put_right:Ne #1 { \tl_trim_spaces:n {#3} }
    \tl_gset_eq:NN \g__enumext_widest_label_tl #1
    \tl_map_inline:Nn \g__enumext_counter_styles_tl
      {
        \tl_replace_all:Nne #1 { ##1* } { \exp_not:N ##1 {#2} }
        \tl_greplace_all:Nne \g__enumext_widest_label_tl { ##1* }
          { \tl_use:c { c__enumext_widest_ \cs_to_str:N ##1 _tl } }
      }
    \__enumext_label_width_by_box:Nn \l__enumext_current_widest_dim
      { \tl_use:N \g__enumext_widest_label_tl }
    \tl_set_eq:cN { the #2 } #1
  }
\cs_generate_variant:Nn \__enumext_label_style:Nnn { cvn }
%% Add |font|, |labelsep|, |labelwidth| and |wrap-label| keys.
\cs_set_protected:Npn \__enumext_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        font        .tl_set:c   = { l__enumext_label_font_style_#2_tl },
        font        .value_required:n = true,
        labelsep    .dim_set:c  = { l__enumext_labelsep_#2_dim },
        labelsep    .initial:n  = {0.3333em},
        labelsep    .value_required:n = true,
        labelwidth  .dim_set:c  = { l__enumext_labelwidth_#2_dim },
        labelwidth  .value_required:n = true,
        wrap-label  .cs_set_protected:cp = { __enumext_wrapper_label_#2:n } ##1,
        wrap-label  .initial:n  = {##1},
        wrap-label  .value_required:n = true,
        wrap-label* .code:n = {
                                \bool_set_true:c { l__enumext_wrap_label_opt_#2_bool }
                                \keys_set:nn { enumext / #1 } { wrap-label = {##1} }
                              },
        wrap-label* .value_required:n = true,
      }
  }
\clist_map_inline:Nn \c__enumext_all_envs_clist { \__enumext_tmp:nn #1 }
%% Add |align| key for |enumext| and |keyans|.
\cs_set_protected:Npn \__enumext_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        align .choice:,
        align / left    .code:n =
                          {
                            \tl_clear:c { l__enumext_label_fill_left_#2_tl  }
                            \tl_set:cn  { l__enumext_label_fill_right_#2_tl } { \hfill }
                          },
        align / right   .code:n =
                          {
                            \tl_set:cn  { l__enumext_label_fill_left_#2_tl  } { \hfill }
                            \tl_clear:c { l__enumext_label_fill_right_#2_tl }
                          },
        align / center  .code:n =
                          {
                            \tl_set:cn { l__enumext_label_fill_left_#2_tl  } { \hfill }
                            \tl_set:cn { l__enumext_label_fill_right_#2_tl } { \hfill }
                          },
        align / unknown .code:n =
                          \msg_error:nneee { enumext } { unknown-choice }
                            { align } { left, ~ right, ~  center } { \exp_not:n {##1} },
        align .initial:n  = left,
        align .value_required:n  = true,
      }
  }
\clist_map_inline:nn
  {
    {level-1}{i}, {level-2}{ii}, {level-3}{iii}, {level-4}{iv}, {keyans}{v}
  }
  { \__enumext_tmp:nn #1 }
%% Add |align| key for enummext* and keyans*.
\cs_set_protected:Npn \__enumext_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        align .choice:,
        align / left    .code:n = \str_set:cn { l__enumext_align_label_#2_str } { l },
        align / right   .code:n = \str_set:cn { l__enumext_align_label_#2_str } { r },
        align / center  .code:n = \str_set:cn { l__enumext_align_label_#2_str } { c },
        align / unknown .code:n =
                          \msg_error:nneee { enumext } { unknown-choice }
                            { align } { left, ~ right, ~  center } { \exp_not:n {##1} },
        align .initial:n = left,
        align .value_required:n = true,
      }
  }
\clist_map_inline:nn { {enumext*}{vii}, {keyans*}{viii} } { \__enumext_tmp:nn #1 }
%% Define and set |label| and |ref| keys for |enumext|.
\cs_set_protected:Npn \__enumext_tmp:nnn #1 #2 #3
  {
    \keys_define:nn { enumext / #1 }
      {
        label .code:n    = {
                             \__enumext_label_style:cvn { l__enumext_label_#2_tl }
                               { l__enumext_counter_#2_tl } {##1}
                             \dim_set_eq:cN  { l__enumext_labelwidth_#2_dim }
                               \l__enumext_current_widest_dim
                           },
        label .initial:n = #3,
        label .value_required:n = true,
        ref   .code:n    = \__enumext_standar_ref:n {##1},
        ref   .value_required:n = true,
      }
  }
\__enumext_tmp:nnn { level-1 } {   i } { \arabic*.}
\__enumext_tmp:nnn { level-2 } {  ii } { (\alph*) }
\__enumext_tmp:nnn { level-3 } { iii } { \roman*. }
\__enumext_tmp:nnn { level-4 } {  iv } { \Alph*.  }
%% Internal function used by |ref| key in enumext environment.
\cs_new_protected:Npn \__enumext_standar_ref:n #1
  {
    \tl_set:Nn \l__enumext_ref_key_arg_tl {#1}
    \tl_if_empty:NTF \l__enumext_ref_key_arg_tl
      {
        \msg_error:nnn { enumext } { key-ref-empty } { enumext }
      }
      {
        \tl_set_eq:Nc
          \l__enumext_ref_the_count_tl { l__enumext_counter_ \__enumext_level: _tl }
        \__enumext_regex_counter_style:
        \tl_set_eq:Nc
          \l__enumext_ref_the_count_tl { l__enumext_the_counter_ \__enumext_level: _tl }
        \tl_put_right:ce { l__enumext_renew_the_count_ \__enumext_level: _tl }
          {
            \exp_not:N \renewcommand { \exp_not:V \l__enumext_ref_the_count_tl }
              { \exp_not:V \l__enumext_ref_key_arg_tl }
          }
      }
  }
%% Activate |ref| key in second arg of list for |enumext| environment.
\cs_new_protected:Nn \__enumext_standar_ref:
  {
    \tl_if_empty:cF { l__enumext_renew_the_count_ \__enumext_level: _tl }
      {
        \tl_use:c { l__enumext_renew_the_count_ \__enumext_level: _tl }
      }
  }
%% Define and set |label| and |ref| keys for starred environments.
\cs_set_protected:Npn \__enumext_tmp:nnn #1 #2 #3
  {
    \keys_define:nn { enumext / #1 }
      {
        label .code:n    = {
                             \__enumext_label_style:cvn { l__enumext_label_#2_tl }
                               { l__enumext_counter_#2_tl } {##1}
                             \dim_set_eq:cN  { l__enumext_labelwidth_#2_dim }
                               \l__enumext_current_widest_dim
                           },
        label .initial:n = #3,
        label .value_required:n = true,
        ref   .code:n    = \__enumext_starred_ref:n {##1},
        ref   .value_required:n = true,
      }
  }
\__enumext_tmp:nnn { enumext* } {  vii } { \arabic*.}
\__enumext_tmp:nnn { keyans*  } { viii } { \Alph*) }
%% Internal function used by |ref| key in |enumext*| and |keyans*| environments.
\cs_new_protected:Npn \__enumext_starred_ref:n #1
  {
    \tl_set:Nn \l__enumext_ref_key_arg_tl {#1}
    \int_compare:nNnT { \l__enumext_level_h_int } = { 1 }
      {
        \tl_if_empty:NTF \l__enumext_ref_key_arg_tl
          {
            \msg_error:nnn { enumext } { key-ref-empty } { enumext* }
          }
          {
            \tl_set_eq:NN \l__enumext_ref_the_count_tl \l__enumext_counter_vii_tl
            \__enumext_regex_counter_style:
            \tl_set_eq:NN \l__enumext_ref_the_count_tl \l__enumext_the_counter_vii_tl
            \tl_put_right:Ne \l__enumext_renew_the_count_vii_tl
              {
                \exp_not:N \renewcommand { \exp_not:V \l__enumext_ref_the_count_tl }
                  { \exp_not:V \l__enumext_ref_key_arg_tl }
              }
          }
      }
    \int_compare:nNnT { \l__enumext_keyans_level_h_int } = { 1 }
      {
        \tl_if_empty:NTF \l__enumext_ref_key_arg_tl
          {
            \msg_error:nnn { enumext } { key-ref-empty } { keyans* }
          }
          {
            \tl_set_eq:NN \l__enumext_ref_the_count_tl \l__enumext_counter_viii_tl
            \__enumext_regex_counter_style:
            \tl_set_eq:NN \l__enumext_ref_the_count_tl \l__enumext_the_counter_viii_tl
            \tl_put_right:Ne \l__enumext_renew_the_count_viii_tl
              {
                \exp_not:N \renewcommand  { \exp_not:V \l__enumext_ref_the_count_tl }
                  { \exp_not:V \l__enumext_ref_key_arg_tl }
              }
          }
      }
  }
%% Activate |ref| key in second arg of list for |enumext*| and  |keyans*| environments.
\cs_new_protected:Nn \__enumext_starred_ref:
  {
    \int_compare:nNnT { \l__enumext_level_h_int } = { 1 }
      {
        \tl_if_empty:NF \l__enumext_renew_the_count_vii_tl
          {
            \tl_use:N \l__enumext_renew_the_count_vii_tl
          }
      }
    \int_compare:nNnT { \l__enumext_keyans_level_h_int } = { 1 }
      {
        \tl_if_empty:NF \l__enumext_renew_the_count_viii_tl
          {
            \tl_use:N \l__enumext_renew_the_count_viii_tl
          }
      }
  }
%% Define and set |label| and |ref| keys for |keyans| and |keyanspic|.
\keys_define:nn { enumext / keyans }
  {
    label .code:n    = {
                         \__enumext_label_style:cvn { l__enumext_label_v_tl }
                           { l__enumext_counter_v_tl } {#1}
                         \dim_set_eq:cN  { l__enumext_labelwidth_v_dim }
                           \l__enumext_current_widest_dim
                         \__enumext_label_style:cvn { l__enumext_label_vi_tl }
                            { l__enumext_counter_vi_tl } {#1}
                         \dim_set_eq:cN  { l__enumext_labelwidth_v_dim }
                            \l__enumext_current_widest_dim
                       },
    label .initial:n = \Alph*),
    label .value_required:n = true,
    ref   .code:n    = \__enumext_keyans_ref:n {#1},
    ref   .value_required:n = true,
  }
%% Internal function used by |ref| key in |keyans| environment.
\cs_new_protected:Npn \__enumext_keyans_ref:n #1
  {
    \tl_set:Nn \l__enumext_ref_key_arg_tl {#1}
    \tl_if_empty:NTF \l__enumext_ref_key_arg_tl
      {
        \msg_error:nnn { enumext } { key-ref-empty } { keyans }
      }
      {
        \tl_set_eq:NN \l__enumext_ref_the_count_tl \l__enumext_counter_v_tl
        \__enumext_regex_counter_style:
        \tl_set_eq:NN \l__enumext_ref_the_count_tl \l__enumext_the_counter_v_tl
        \tl_put_right:Ne \l__enumext_renew_the_count_v_tl
          {
            \exp_not:N \renewcommand { \exp_not:V \l__enumext_ref_the_count_tl }
              { \exp_not:V \l__enumext_ref_key_arg_tl }
          }
      }
  }
%% Activate |ref| key in second arg of list for |keyans| environments.
\cs_new_protected:Nn \__enumext_keyans_ref:
  {
    \tl_if_empty:NF \l__enumext_renew_the_count_v_tl
      {
        \tl_use:N \l__enumext_renew_the_count_v_tl
      }
  }
%% Internal function for |start| key.
%% #1 \l_enumext_label_X_tl
%% #2 \l_enumext_start_X_int
%% #3 integer or string
\cs_new_protected:Npn \__enumext_start_from:NNn #1 #2 #3
  {
    \__enumext_if_is_int:nTF { #3 }
       {
         \int_set:Nn #2 {#3}
       }
       {
         \regex_match:nVT { \c{Alph} | \c{alph} } {#1}
           { \int_set:Nn #2 { \int_from_alph:n {#3} } }
         \regex_match:nVT { \c{Roman} | \c{roman} } {#1}
           { \int_set:Nn #2  { \int_from_roman:n {#3} } }
       }
  }
\cs_generate_variant:Nn \__enumext_start_from:NNn { ccn, cce }
%% Internal function for |widest| key.
%% #1 The counter associated with the environment level
%% #2 \l_enumext_label_X_tl
%% #3 \l_enumext_labelwidth_X_tl
%% #4 integer or string
\cs_new_protected:Npn \__enumext_widest_from:nNNn #1 #2 #3 #4
  {
    \__enumext_if_is_int:nTF {#4}
      {
        \setcounter{enumX#1} { #4 }
      }
      {
        \regex_match:nVT { \c{Alph} | \c{alph} } {#2}
          { \setcounter{enumX#1} { \int_from_alph:n {#4} } }
        \regex_match:nVT { \c{Roman} | \c{roman} } {#2}
          { \setcounter{enumX#1} { \int_from_roman:n {#4} } }
      }
     \__enumext_label_width_by_box:cv
       { l__enumext_labelwidth_#1_dim } { l__enumext_label_#1_tl }
  }
\cs_generate_variant:Nn \__enumext_widest_from:nNNn { nccn }
%% Add |start*|, |start| and |widest| key.
\cs_set_protected:Npn \__enumext_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        start* .code:n    = {
                              \__enumext_start_from:ccn
                                { l__enumext_label_#2_tl }
                                { l__enumext_start_#2_int } {##1}
                            },
        start* .value_required:n = true,
        start  .code:n    = {
                              \__enumext_start_from:cce
                                { l__enumext_label_#2_tl }
                                { l__enumext_start_#2_int } { \int_eval:n {##1} }
                            },
        start  .initial:n = 1,
        start  .value_required:n = true,
        widest .code:n    = {
                              \__enumext_widest_from:nccn {#2}
                                { l__enumext_label_#2_tl }
                                { l__enumext_labelwidth_#2_dim } {##1}
                            },
        widest .value_required:n = true,
      }
  }
\clist_map_inline:Nn \c__enumext_all_envs_clist { \__enumext_tmp:nn #1 }
%% Add |topsep|, |partopsep|, |parsep|, |noitemsep| and |nosep| keys.
\cs_set_protected:Npn \__enumext_tmp:nnnnnn #1 #2 #3 #4 #5 #6
  {
    \keys_define:nn { enumext / #1 }
      {
        topsep    .skip_set:c = { l__enumext_topsep_#2_skip },
        topsep    .initial:n  = {#3},
        topsep    .value_required:n = true,
        partopsep .skip_set:c = { l__enumext_partopsep_#2_skip },
        partopsep .initial:n  = {#4},
        partopsep .value_required:n = true,
        parsep    .skip_set:c = { l__enumext_parsep_#2_skip },
        parsep    .initial:n  = {#5},
        parsep    .value_required:n = true,
        itemsep   .skip_set:c = { l__enumext_itemsep_#2_skip },
        itemsep   .initial:n  = {#6},
        itemsep   .value_required:n = true,
        noitemsep .meta:n     = { itemsep = 0pt, parsep = 0pt },
        noitemsep .value_forbidden:n = true,
        nosep     .meta:n     = {
                                  itemsep = 0pt, parsep= 0pt,
                                  topsep = 0pt, partopsep = 0pt,
                                },
        nosep     .value_forbidden:n = true,
      }
  }
\__enumext_tmp:nnnnnn { level-1 } { i } { 8.0pt plus 2.0pt minus 4.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt } { 4.0pt plus 2.0pt minus 1.0pt }
  { 4.0pt plus 2.0pt minus 1.0pt }
\__enumext_tmp:nnnnnn { level-2 } { ii } { 4.0pt plus 2.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt } { 2.0pt plus 1.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt }
\__enumext_tmp:nnnnnn { level-3 } { iii } { 2.0pt plus 1.0pt minus 1.0pt }
  { 1.0pt minus 1.0pt }{ 0pt }{ 2.0pt plus 1.0pt minus 1.0pt }
\__enumext_tmp:nnnnnn { level-4 } { iv } { 2.0pt plus 1.0pt minus 1.0pt }
  { 1.0pt minus 1.0pt }{ 0pt }{ 2.0pt plus 1.0pt minus 1.0pt }
\__enumext_tmp:nnnnnn { keyans  } { v }{ 4.0pt plus 2.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt }{ 2.0pt plus 1.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt }
\__enumext_tmp:nnnnnn { enumext* } { vii } { 8.0pt plus 2.0pt minus 4.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt } { 4.0pt plus 2.0pt minus 1.0pt }
  { 4.0pt plus 2.0pt minus 1.0pt }
\__enumext_tmp:nnnnnn { keyans* } { viii } { 4.0pt plus 2.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt } { 2.0pt plus 1.0pt minus 1.0pt }
  { 2.0pt plus 1.0pt minus 1.0pt }
%% Add |base-fix| key only on first level off |enumext| and |enumext*|.
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \keys_define:nn { enumext / #1 }
      {
        base-fix .bool_set:N = \l__enumext_base_line_fix_bool,
        base-fix .initial:n  = false,
        base-fix .value_forbidden:n = true,
      }
  }
\clist_map_inline:nn { level-1, enumext* } { \__enumext_tmp:n {#1} }
%% Internal function for |base-fix| key.
\cs_new_protected:Nn \__enumext_nested_base_line_fix:
  {
    \bool_lazy_and:nnT
      { \bool_if_p:N \l__enumext_standar_first_bool }
      { \bool_if_p:N \l__enumext_base_line_fix_bool }
      {
        \mode_leave_vertical:
        \vspace { -\baselineskip }
        \keys_set:nn { enumext / level-1 }
          {
            topsep = 0pt, above = 0pt, above* = 0pt,
          }
      }
    \bool_lazy_and:nnT
      { \bool_if_p:N \l__enumext_starred_first_bool }
      { \bool_if_p:N \l__enumext_base_line_fix_bool }
      {
        \mode_leave_vertical:
        \vspace { -\baselineskip }
        \keys_set:nn { enumext / enumext* }
          {
            topsep = 0pt, above = 0pt, above* = 0pt,
          }
      }
    \bool_set_false:N \l__enumext_base_line_fix_bool
  }
%% Add |itemindent|, |rightmargin|, |listparindent|, |list-offset| and |list-indent| keys.
\cs_set_protected:Npn \__enumext_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        itemindent    .dim_set:c = { l__enumext_fake_item_indent_#2_dim },
        itemindent    .value_required:n = true,
        rightmargin   .dim_set:c = { l__enumext_rightmargin_#2_dim },
        rightmargin   .value_required:n = true,
        listparindent .dim_set:c = { l__enumext_listparindent_#2_dim },
        listparindent .value_required:n = true,
        list-offset   .dim_set:c = { l__enumext_listoffset_#2_dim },
        list-offset   .value_required:n = true,
        list-indent   .code:n    =
                        \bool_set_true:c { l__enumext_leftmargin_tmp_#2_bool }
                        \dim_set:cn { l__enumext_leftmargin_tmp_#2_dim } {##1},
        list-indent   .value_required:n = true,
      }
  }
\clist_map_inline:nn
  {
    {level-1}{i}, {level-2}{ii}, {level-3}{iii}, {level-4}{iv}, {keyans}{v}
  }
  { \__enumext_tmp:nn #1 }
%% Set |list-offset| and |list-indent| keys for |enumext*| and |keyans*| environments.
\cs_set_protected:Npn \__enumext_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        itemindent    .dim_set:c = { l__enumext_fake_item_indent_#2_dim },
        itemindent    .value_required:n = true,
        rightmargin   .dim_set:c = { l__enumext_rightmargin_#2_dim },
        rightmargin   .value_required:n = true,
        listparindent .dim_set:c = { l__enumext_listparindent_#2_dim },
        listparindent .value_required:n = true,
        list-offset   .dim_set:c = { l__enumext_listoffset_#2_dim },
        list-offset   .value_required:n = true,
        list-indent   .meta:n    = { list-offset = ##1 },
        list-indent   .value_required:n = true,
      }
  }
\clist_map_inline:nn
  {
    {enumext*}{vii}, {keyans*}{viii}
  }
  { \__enumext_tmp:nn #1 }
%% Internal functions for |itemindent| key. |\mode_leave_vertical:| nor
\cs_set_protected:Nn \__enumext_fake_item:
  {
    \dim_compare:nNnT
      { \dim_use:c { l__enumext_fake_item_indent_ \__enumext_level: _dim } }
      >
      { \c_zero_dim }
      {
        \tl_set:ce { l__enumext_fake_item_indent_ \__enumext_level: _tl }
          {
            \exp_not:N \mode_leave_vertical:
            \exp_not:n { \skip_horizontal:n }
              { \dim_use:c { l__enumext_fake_item_indent_ \__enumext_level: _dim } }
            \ignorespaces
          }
      }
   }
\cs_set_protected:Nn \__enumext_keyans_fake_item:
  {
    \dim_compare:nNnT
      { \l__enumext_fake_item_indent_v_dim } > { \c_zero_dim }
      {
        \tl_set:Ne \l__enumext_fake_item_indent_v_tl
          {
            \exp_not:N \mode_leave_vertical:
            \exp_not:N \skip_horizontal:N \l__enumext_fake_item_indent_v_dim
          }
      }
   }
\cs_set_protected:Nn \__enumext_fake_item_vii:
  {
    \dim_compare:nNnT
      { \l__enumext_fake_item_indent_vii_dim } > { \c_zero_dim }
      {
        \tl_set:Ne \l__enumext_fake_item_indent_vii_tl
          {
            \exp_not:N \mode_leave_vertical:
            \exp_not:N \skip_horizontal:N \l__enumext_fake_item_indent_vii_dim
          }
      }
   }
\cs_set_protected:Nn \__enumext_fake_item_viii:
  {
    \dim_compare:nNnT
      { \l__enumext_fake_item_indent_viii_dim } > { \c_zero_dim }
      {
        \tl_set:Ne \l__enumext_fake_item_indent_viii_tl
          {
            \exp_not:N \mode_leave_vertical:
            \exp_not:N \skip_horizontal:N \l__enumext_fake_item_indent_viii_dim
          }
      }
   }
%% Add |show-length| key for all environments..
\cs_set_protected:Npn \__enumext_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        show-length .bool_set:c = { l__enumext_show_length_#2_bool },
        show-length .initial:n  = false,
      }
  }
\clist_map_inline:Nn \c__enumext_all_envs_clist { \__enumext_tmp:nn #1 }
%% Add |before|, |before*|, |after| and |first| keys.
\cs_set_protected:Npn \__enumext_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        before  .tl_set:c   = { l__enumext_before_no_starred_key_#2_tl },
        before  .value_required:n = true,
        before* .tl_set:c   = { l__enumext_before_starred_key_#2_tl },
        before* .value_required:n = true,
        after   .tl_set:c   = { l__enumext_after_stop_list_#2_tl },
        after   .value_required:n = true,
        first   .tl_set:c   = { l__enumext_after_list_args_#2_tl },
        first   .value_required:n = true,
      }
  }
\clist_map_inline:Nn \c__enumext_all_envs_clist { \__enumext_tmp:nn #1 }
%% Function for |before|, |before*|, |after| and |first| keys in |enumext|.
\cs_new_protected:Nn \__enumext_before_args_exec:
  {
    \tl_use:c { l__enumext_before_starred_key_ \__enumext_level: _tl }
  }
\cs_new_protected:Nn \__enumext_before_keys_exec:
  {
    \tl_use:c { l__enumext_before_no_starred_key_ \__enumext_level: _tl }
  }
\cs_new_protected:Nn \__enumext_after_stop_list:
  {
    \tl_use:c { l__enumext_after_stop_list_ \__enumext_level: _tl }
  }
\cs_new_protected:Nn \__enumext_after_args_exec:
  {
    \tl_use:c { l__enumext_after_list_args_ \__enumext_level: _tl }
  }
%% Function for |before|, |before*|, |after| and |first| keys in |keyans|.
\cs_new_protected:Nn \__enumext_before_args_exec_v:
  {
    \tl_use:N \l__enumext_before_starred_key_v_tl
  }
\cs_new_protected:Nn \__enumext_before_keys_exec_v:
  {
    \tl_use:N \l__enumext_before_no_starred_key_v_tl
  }
\cs_new_protected:Nn \__enumext_after_stop_list_v:
  {
    \tl_use:N \l__enumext_after_stop_list_v_tl
  }
\cs_new_protected:Nn \__enumext_after_args_exec_v:
  {
    \tl_use:N \l__enumext_after_list_args_v_tl
  }
%% Function for |before|, |before*|, |after| and |first| keys in |enumext*| and |keyans*|.
\cs_new_protected:Nn \__enumext_before_args_exec_vii:
  {
    \tl_use:N \l__enumext_before_starred_key_vii_tl
  }
\cs_new_protected:Nn \__enumext_before_args_exec_viii:
  {
    \tl_use:N \l__enumext_before_starred_key_viii_tl
  }
\cs_new_protected:Nn \__enumext_before_keys_exec_vii:
  {
    \tl_use:N \l__enumext_before_no_starred_key_vii_tl
  }
\cs_new_protected:Nn \__enumext_before_keys_exec_viii:
  {
    \tl_use:N \l__enumext_before_no_starred_key_viii_tl
  }
\cs_new_protected:Nn \__enumext_after_stop_list_vii:
  {
    \tl_use:N \l__enumext_after_stop_list_vii_tl
  }
\cs_new_protected:Nn \__enumext_after_stop_list_viii:
  {
    \tl_use:N \l__enumext_after_stop_list_viii_tl
  }
\cs_new_protected:Nn \__enumext_after_args_exec_vii:
  {
    \tl_use:N \l__enumext_after_list_args_vii_tl
  }
\cs_new_protected:Nn \__enumext_after_args_exec_viii:
  {
    \tl_use:N \l__enumext_after_list_args_viii_tl
  }
%% Add |mini-env|, |mini-sep|, |columns-sep| and |columns| keys.
\cs_set_protected:Npn \__enumext_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        mini-env    .dim_set:c  = { l__enumext_minipage_right_#2_dim },
        mini-env    .value_required:n = true,
        mini-sep    .dim_set:c  = { l__enumext_minipage_hsep_#2_dim },
        mini-sep    .initial:n  = 0.3333em,
        mini-sep    .value_required:n = true,
        columns-sep .dim_set:c  = { l__enumext_columns_sep_#2_dim },
        columns-sep .value_required:n = true,
        columns     .int_set:c  = { l__enumext_columns_#2_int },
        columns     .initial:n  = 1,
        columns     .value_required:n = true,
      }
  }
\clist_map_inline:Nn \c__enumext_all_envs_clist { \__enumext_tmp:nn #1 }
%% Add |mini-right| and |mini-right*| keys for starred environments.
\cs_set_protected:Npn \__enumext_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        mini-right  .tl_gset:c = { g__enumext_miniright_code_#2_tl },
        mini-right  .value_required:n = true,
        mini-right* .code:n    = {
                                  \bool_gset_true:c { g__enumext_minipage_center_#2_bool }
                                  \keys_set:nn { enumext / #1 } { mini-right = {##1} }
                                },
        mini-right* .value_required:n = true,
      }
  }
\clist_map_inline:nn { {enumext*}{vii}, {keyans*}{viii} } { \__enumext_tmp:nn #1 }
%% Adjustment of vertical spacing for |multicols| in |enumext|.
\cs_new_protected:Nn \__enumext_multi_set_vskip:
  {
    \skip_set:cn { l__enumext_multicols_above_ \__enumext_level: _skip }
      {
        \skip_use:c { l__enumext_topsep_ \__enumext_level: _skip }
      }
    \skip_set:cn { l__enumext_multicols_below_ \__enumext_level: _skip }
      {
        \skip_use:c { l__enumext_topsep_ \__enumext_level: _skip }
      }
    \__enumext_add_pre_parsep:
  }
%% Detect |\parsep| from previous level and adjust |\l_@@_multicols_above_X_skip| for |multicols| in |enumext|.
\cs_new_protected:Nn \__enumext_add_pre_parsep:
  {
    \int_case:nn { \l__enumext_level_int }
      {
        { 2 }{
               \skip_if_eq:nnF { \l__enumext_parsep_i_skip } { \c_zero_skip }
                 {
                   \skip_add:Nn \l__enumext_multicols_above_ii_skip { \l__enumext_parsep_i_skip }
                 }
             }
        { 3 }{
               \skip_if_eq:nnF { \l__enumext_parsep_ii_skip } { \c_zero_skip }
                 {
                   \skip_add:Nn \l__enumext_multicols_above_iii_skip { \l__enumext_parsep_ii_skip }
                 }
             }
        { 4 }{
               \skip_if_eq:nnF { \l__enumext_parsep_iii_skip } { \c_zero_skip }
                 {
                   \skip_add:Nn \l__enumext_multicols_above_iv_skip { \l__enumext_parsep_iii_skip }
                 }
             }
      }
  }
%% Add vertical spacing for |multicols| in |enumext|.
\cs_new_protected:Nn \__enumext_multi_addvspace:
  {
    \__enumext_multi_set_vskip:
    \mode_if_vertical:T
      {
        \skip_add:cn { l__enumext_multicols_above_ \__enumext_level: _skip }
          {
            \skip_use:c { l__enumext_partopsep_ \__enumext_level: _skip }
          }
        \skip_add:cn { l__enumext_multicols_below_ \__enumext_level: _skip }
          {
            \skip_use:c { l__enumext_partopsep_ \__enumext_level: _skip }
          }
      }
    %%\__enumext_unskip_unkern:
    \par\nopagebreak
    \addvspace{ \skip_use:c { l__enumext_multicols_above_ \__enumext_level: _skip } }
  }
%% Adjustment of vertical spacing for |multicols| in |keyans|.
\cs_new_protected:Nn \__enumext_keyans_multi_set_vskip:
  {
    \skip_set:Nn \l__enumext_multicols_above_v_skip
      {
        \l__enumext_topsep_v_skip
      }
    \skip_set:Nn \l__enumext_multicols_below_v_skip
      {
        \l__enumext_topsep_v_skip
      }
  }
\cs_new_protected:Nn \__enumext_keyans_multi_addvspace:
  {
    \__enumext_keyans_multi_set_vskip:
    \mode_if_vertical:T
      {
        \skip_add:Nn \l__enumext_multicols_above_v_skip
          {
            \skip_use:N \l__enumext_partopsep_v_skip
          }
        \skip_add:Nn \l__enumext_multicols_below_v_skip
          {
            \skip_use:N \l__enumext_partopsep_v_skip
          }
      }
    \__enumext_unskip_unkern:
    \par\nopagebreak
    \addvspace{ \l__enumext_multicols_above_v_skip }
  }
%% Adjustment of vertical spacing for |minipage| in |enumext|.
\cs_new_protected:Nn \__enumext_minipage_set_skip:
  {
    \skip_set:Nn \l__enumext_minipage_right_skip
      {
        \skip_use:c { l__enumext_topsep_ \__enumext_level: _skip }
      }
    \mode_if_vertical:T
      {
        \skip_add:Nn \l__enumext_minipage_right_skip
          {
            \skip_use:c { l__enumext_partopsep_ \__enumext_level: _skip }
          }
      }
    \skip_set_eq:NN \l__enumext_minipage_after_skip \l__enumext_minipage_right_skip
    \skip_set_eq:cN
      { l__enumext_multicols_above_ \__enumext_level: _skip } \l__enumext_minipage_right_skip
    \skip_set_eq:cN
      { l__enumext_multicols_below_ \__enumext_level: _skip } \l__enumext_minipage_right_skip
    \__enumext_pre_itemsep_skip:
    \int_compare:nNnT
      { \int_use:c { l__enumext_columns_ \__enumext_level: _int } } > { 1 }
      {
        \skip_zero:N \topskip
        \skip_set_eq:Nc \multicolsep { l__enumext_multicols_above_ \__enumext_level: _skip }
      }
  }
\cs_new_protected:Nn \__enumext_minipage_add_space:
  {
    \__enumext_minipage_set_skip:
    \__enumext_unskip_unkern:
    \mode_if_vertical:TF
      {
        \nopagebreak\nointerlineskip
      }
      {
        \par\nopagebreak\nointerlineskip
        \skip_zero:c { l__enumext_partopsep_ \__enumext_level: _skip }
      }
    \int_compare:nNnTF
      { \int_use:c { l__enumext_columns_ \__enumext_level: _int } } > { 1 }
      {
        \addvspace{ 0.445\box_ht:N \strutbox }
      }
      {
        \addvspace{ 0.250\box_ht:N \strutbox }
      }
  }
\cs_new_protected:Nn \__enumext_pre_itemsep_skip:
  {
    \int_case:nn { \l__enumext_level_int }
      {
        { 2 }{
               \skip_if_eq:nnTF
                 { \l__enumext_itemsep_i_skip } { \l__enumext_minipage_after_skip }
                 {
                   \skip_set:Nn \l__enumext_minipage_after_skip { 0.150\box_ht:N \strutbox }
                   \skip_set:Nn \l__enumext_multicols_below_ii_skip { 0.350\box_ht:N \strutbox }
                 }
                 {
                   \dim_compare:nNnT
                     { \l__enumext_itemsep_i_skip } < { \l__enumext_minipage_after_skip }
                     {
                       \skip_sub:Nn
                         \l__enumext_minipage_after_skip { \l__enumext_itemsep_i_skip }
                       \skip_sub:Nn
                         \l__enumext_multicols_below_ii_skip { \l__enumext_itemsep_i_skip }
                       \skip_add:Nn
                         \l__enumext_minipage_after_skip { 0.150\box_ht:N \strutbox }
                       \skip_add:Nn
                         \l__enumext_multicols_below_ii_skip { 0.350\box_ht:N \strutbox }
                     }
                   \dim_compare:nNnT
                     { \l__enumext_itemsep_i_skip } > { \l__enumext_minipage_after_skip }
                     {
                       \skip_set:Nn \l_tmpa_skip
                         {
                           \l__enumext_itemsep_i_skip - \l__enumext_minipage_after_skip
                         }
                       \skip_sub:Nn
                         \l__enumext_minipage_after_skip { \l__enumext_itemsep_i_skip }
                       \skip_sub:Nn
                         \l__enumext_multicols_below_ii_skip { \l__enumext_itemsep_i_skip }
                       \skip_add:Nn
                         \l__enumext_minipage_after_skip
                         { 0.150\box_ht:N \strutbox + \l_tmpa_skip }
                       \skip_add:Nn
                         \l__enumext_multicols_below_ii_skip
                         { 0.350\box_ht:N \strutbox + \l_tmpa_skip }
                     }
                 }
             }
        { 3 }{
               \skip_if_eq:nnTF
                 { \l__enumext_itemsep_ii_skip } { \c_zero_skip }
                 {
                   \skip_set:Nn \l__enumext_minipage_after_skip { 0.150\box_ht:N \strutbox }
                   \skip_set:Nn \l__enumext_multicols_below_iii_skip { 0.350\box_ht:N \strutbox }
                 }
                 {
                   \dim_compare:nNnT
                     { \l__enumext_itemsep_ii_skip } < { \l__enumext_minipage_after_skip }
                     {
                       \skip_sub:Nn
                         \l__enumext_minipage_after_skip { \l__enumext_itemsep_ii_skip }
                       \skip_sub:Nn
                         \l__enumext_multicols_below_iii_skip { \l__enumext_itemsep_ii_skip }
                       \skip_add:Nn
                         \l__enumext_minipage_after_skip { 0.150\box_ht:N \strutbox }
                       \skip_add:Nn
                         \l__enumext_multicols_below_iii_skip { 0.350\box_ht:N \strutbox }
                     }
                   \dim_compare:nNnT
                     { \l__enumext_itemsep_ii_skip } > { \l__enumext_minipage_after_skip }
                     {
                       \skip_set:Nn \l_tmpa_skip
                         {
                           \l__enumext_itemsep_ii_skip - \l__enumext_minipage_after_skip
                         }
                       \skip_sub:Nn
                         \l__enumext_minipage_after_skip { \l__enumext_itemsep_ii_skip }
                       \skip_sub:Nn
                         \l__enumext_multicols_below_iii_skip { \l__enumext_itemsep_ii_skip }
                       \skip_add:Nn
                         \l__enumext_minipage_after_skip
                         { 0.150\box_ht:N \strutbox + \l_tmpa_skip }
                       \skip_add:Nn
                         \l__enumext_multicols_below_iii_skip
                         { 0.350\box_ht:N \strutbox + \l_tmpa_skip }
                     }
                 }
             }
        { 4 }{
               \skip_if_eq:nnTF { \l__enumext_itemsep_iii_skip } { \c_zero_skip }
                 {
                   \skip_set:Nn \l__enumext_minipage_after_skip { 0.150\box_ht:N \strutbox }
                   \skip_set:Nn \l__enumext_multicols_below_iv_skip { 0.350\box_ht:N \strutbox }
                 }
                 {
                   \dim_compare:nNnT
                     { \l__enumext_itemsep_iii_skip } < { \l__enumext_minipage_after_skip }
                     {
                       \skip_sub:Nn
                         \l__enumext_minipage_after_skip { \l__enumext_itemsep_iii_skip }
                       \skip_sub:Nn
                         \l__enumext_multicols_below_iv_skip { \l__enumext_itemsep_iii_skip }
                       \skip_add:Nn
                         \l__enumext_minipage_after_skip { 0.150\box_ht:N \strutbox }
                       \skip_add:Nn
                         \l__enumext_multicols_below_iv_skip { 0.350\box_ht:N \strutbox }
                     }
                   \dim_compare:nNnT
                     { \l__enumext_itemsep_iii_skip } > { \l__enumext_minipage_after_skip }
                     {
                       \skip_set:Nn \l_tmpa_skip
                         {
                           \l__enumext_itemsep_iii_skip - \l__enumext_minipage_after_skip
                         }
                       \skip_sub:Nn
                         \l__enumext_minipage_after_skip { \l__enumext_itemsep_iii_skip }
                       \skip_sub:Nn
                         \l__enumext_multicols_below_iv_skip { \l__enumext_itemsep_iii_skip }
                       \skip_add:Nn
                         \l__enumext_minipage_after_skip
                         { 0.150\box_ht:N \strutbox + \l_tmpa_skip }
                       \skip_add:Nn
                         \l__enumext_multicols_below_iv_skip
                         { 0.350\box_ht:N \strutbox + \l_tmpa_skip }
                     }
                 }
             }
      }
  }
%% Adjustment of vertical spacing for |minipage| in |keyans|.
\cs_new_protected:Nn \__enumext_keyans_minipage_set_skip:
  {
    \skip_zero:N \l__enumext_minipage_after_skip
    \skip_zero:N \l__enumext_minipage_left_skip
    \skip_zero:N \l__enumext_minipage_right_skip
    \skip_set:Nn \l__enumext_minipage_right_skip
      {
        \l__enumext_topsep_v_skip
      }
    \mode_if_vertical:T
      {
        \skip_add:Nn \l__enumext_minipage_right_skip
          {
            \l__enumext_partopsep_v_skip
          }
      }
    \skip_set_eq:NN \l__enumext_minipage_after_skip \l__enumext_minipage_right_skip
    \skip_set_eq:NN \l__enumext_multicols_above_v_skip \l__enumext_minipage_right_skip
    \skip_set_eq:NN \l__enumext_multicols_below_v_skip \l__enumext_minipage_right_skip
    \__enumext_keyans_pre_itemsep_skip:
    \int_compare:nNnT { \l__enumext_columns_v_int } > { 1 }
      {
        \skip_zero:N \topskip
        \skip_set_eq:NN \multicolsep \l__enumext_minipage_right_skip
      }
  }
\cs_new_protected:Nn \__enumext_keyans_minipage_add_space:
  {
    \__enumext_keyans_minipage_set_skip:
    \__enumext_unskip_unkern:
    \mode_if_vertical:TF
      {
        \nopagebreak\nointerlineskip
      }
      {
        \par\nopagebreak\nointerlineskip
        \skip_zero:N \l__enumext_partopsep_v_skip
      }
    \int_compare:nNnTF { \l__enumext_columns_v_int } > { 1 }
      {
        \addvspace{ 0.445\box_ht:N \strutbox }
      }
      {
        \addvspace{ 0.250\box_ht:N \strutbox }
      }
  }
\cs_new_protected:Nn \__enumext_keyans_pre_itemsep_skip:
  {
    \skip_if_eq:nnTF
      { \l__enumext_itemsep_i_skip } { \l__enumext_minipage_after_skip }
      {
        \skip_set:Nn \l__enumext_minipage_after_skip { 0.150\box_ht:N \strutbox }
        \skip_set:Nn \l__enumext_multicols_below_v_skip { 0.350\box_ht:N \strutbox }
      }
      {
        \dim_compare:nNnT
          { \l__enumext_itemsep_i_skip } < { \l__enumext_minipage_after_skip }
          {
            \skip_sub:Nn \l__enumext_minipage_after_skip { \l__enumext_itemsep_i_skip }
            \skip_sub:Nn \l__enumext_multicols_below_v_skip { \l__enumext_itemsep_i_skip }
            \skip_add:Nn \l__enumext_minipage_after_skip { 0.150\box_ht:N \strutbox }
            \skip_add:Nn \l__enumext_multicols_below_v_skip { 0.350\box_ht:N \strutbox }
          }
        \dim_compare:nNnT
          { \l__enumext_itemsep_i_skip } > { \l__enumext_minipage_after_skip }
          {
            \skip_set:Nn \l_tmpa_skip
              {
                \l__enumext_itemsep_i_skip - \l__enumext_minipage_after_skip
              }
            \skip_sub:Nn \l__enumext_minipage_after_skip { \l__enumext_itemsep_i_skip }
            \skip_sub:Nn \l__enumext_multicols_below_v_skip { \l__enumext_itemsep_i_skip }
            \skip_add:Nn \l__enumext_minipage_after_skip
              { 0.150\box_ht:N \strutbox + \l_tmpa_skip }
            \skip_add:Nn \l__enumext_multicols_below_v_skip
              { 0.350\box_ht:N \strutbox + \l_tmpa_skip }
          }
     }
  }
%% Adjustment of vertical spacing for |minipage| in |enumext*| and |keyans*|.
\cs_new_protected:Nn \__enumext_mini_set_vskip_vii:
  {
    \skip_zero_new:N \l__enumext_minipage_left_skip
    \skip_gzero_new:N \g__enumext_minipage_right_skip
    \skip_gzero_new:N \g__enumext_minipage_after_skip
    \skip_if_eq:nnTF { \l__enumext_topsep_vii_skip } { \c_zero_skip }
      {
        \skip_set:Nn \l__enumext_minipage_left_skip { 0.5\box_dp:N \strutbox }
        \skip_gset:Nn \g__enumext_minipage_right_skip { 0.325\box_dp:N \strutbox }
      }
      {
        \skip_set:Nn \l__enumext_minipage_left_skip { 0.5875\box_dp:N \strutbox }
        \skip_gset:Nn \g__enumext_minipage_right_skip
          {
            \l__enumext_topsep_vii_skip
          }
        \skip_gset:Nn \g__enumext_minipage_after_skip
          {
            0.325\box_dp:N \strutbox + \l__enumext_topsep_vii_skip
          }
      }
  }
\cs_new_protected:Nn \__enumext_mini_set_vskip_viii:
  {
    \skip_zero_new:N \l__enumext_minipage_after_skip
    \skip_zero_new:N \l__enumext_minipage_left_skip
    \skip_zero_new:N \l__enumext_minipage_right_skip
    \skip_if_eq:nnTF { \l__enumext_topsep_viii_skip } { \c_zero_skip }
      {
        \skip_set:Nn \l__enumext_minipage_left_skip
          {
            0.5\box_dp:N \strutbox
          }
        \skip_set:Nn \l__enumext_minipage_right_skip
          {
            \l__enumext_partopsep_viii_skip
          }
        \skip_set:Nn \l__enumext_minipage_after_skip
          {
            1.6\box_dp:N \strutbox
          }
      }
      {
        \skip_set:Nn \l__enumext_minipage_left_skip
          {
            0.5875\box_dp:N \strutbox
          }
        \skip_set:Nn \l__enumext_minipage_right_skip
          {
            \l__enumext_topsep_viii_skip
          }
        \skip_set:Nn \l__enumext_minipage_after_skip
          {
            0.325\box_dp:N \strutbox + \l__enumext_topsep_viii_skip
          }
       }
  }
%% Apply \addvspace above minipage for |enumext*| and |keyans*| environments.
\cs_new_protected:Nn \__enumext_mini_addvspace_vii:
  {
    \__enumext_mini_set_vskip_vii:
    \par\nopagebreak
    \addvspace { \l__enumext_minipage_left_skip }
  }
\cs_new_protected:Nn \__enumext_mini_addvspace_viii:
  {
    \__enumext_mini_set_vskip_viii:
    \par\nopagebreak
    \addvspace { \l__enumext_minipage_left_skip }
  }
%% Definition of |\miniright| command.
\NewDocumentCommand \miniright { s }
  {
    \int_compare:nNnT { \l__enumext_keyans_pic_level_int } = { 1 }
      {
        \msg_error:nnn { enumext } { wrong-miniright-place }
      }
    % outside
    \bool_lazy_and:nnT
      { \int_compare_p:nNn { \l__enumext_level_int } = { 0 } }
      { \int_compare_p:nNn { \l__enumext_level_h_int } = { 0 } }
      {
        \msg_error:nnn { enumext } { wrong-miniright-place }
      }
    % starred env
    \bool_if:NT \l__enumext_starred_bool
      {
        \msg_error:nnn { enumext } { wrong-miniright-starred }
      }
    \int_compare:nNnTF { \l__enumext_keyans_level_int } = { 1 }
      {
        \__enumext_keyans_mini_right_cmd:n {#1}
      }
      { \__enumext_mini_right_cmd:n {#1} }
  }
%% Internal function for |\miniright| command in enumext.
\cs_new_protected:Npn \__enumext_mini_right_cmd:n #1
  {
    \dim_compare:nNnTF
      { \dim_use:c { l__enumext_minipage_right_ \__enumext_level: _dim } } > { \c_zero_dim }
      {
        \__enumext_multicols_stop:
        \int_compare:nNnT
          { \int_use:c { l__enumext_columns_ \__enumext_level: _int } } = { 1 }
          {
            \par\addvspace{ \l__enumext_minipage_after_skip }
          }
        \end__enumext_mini_page
        \hfill
        \__enumext_mini_page{ \dim_use:c { l__enumext_minipage_right_ \__enumext_level: _dim } }
          \par\nointerlineskip
          \addvspace { \l__enumext_minipage_right_skip }
          \bool_if:nF {#1}
            {
              \centering
            }
          \int_gzero:N \g__enumext_minipage_stat_int
      }
      { \msg_error:nnn { enumext } { wrong-miniright-use } }
    % paranoia
    \RenewDocumentCommand \miniright { s }
      {
        \msg_error:nn { enumext } { many-miniright-used }
      }
  }
%% Internal function for |\miniright| command in keyans.
\cs_new_protected:Npn \__enumext_keyans_mini_right_cmd:n #1
  {
    \dim_compare:nNnTF { \l__enumext_minipage_right_v_dim } > { \c_zero_dim }
      {
        \__enumext_keyans_multicols_stop:
        \int_compare:nNnT { \l__enumext_columns_v_int } = { 1 }
          {
            \par\addvspace{ \l__enumext_minipage_after_skip }
          }
        \end__enumext_mini_page
        \hfill
        \__enumext_mini_page{ \l__enumext_minipage_right_v_dim }
          \par\nointerlineskip
          \addvspace { \l__enumext_minipage_right_skip }
          \bool_if:nF {#1}
            {
              \centering
            }
          \int_gzero:N \g__enumext_minipage_stat_int
      }
      { \msg_error:nnn { enumext } { wrong-miniright-use } }
    % paranoia
    \RenewDocumentCommand \miniright { s }
      {
        \msg_error:nn { enumext } { many-miniright-used }
      }
  }
%% Add |above| and |below| keys.
\cs_set_protected:Npn \__enumext_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        above  .skip_set:c = { l__enumext_vspace_above_#2_skip },
        above  .value_required:n = true,
        above* .code:n     = \bool_set_true:c { l__enumext_vspace_a_star_#2_bool }
                             \keys_set:nn { enumext / #1 } { above = {##1} },
        above* .value_required:n = true,
        below  .skip_set:c = { l__enumext_vspace_below_#2_skip },
        below  .value_required:n = true,
        below* .code:n     = \bool_set_true:c { l__enumext_vspace_b_star_#2_bool }
                             \keys_set:nn { enumext / #1 } { below = {##1} },
        below* .value_required:n = true,
      }
  }
\clist_map_inline:Nn \c__enumext_all_envs_clist { \__enumext_tmp:nn #1 }
%% Function for |above|, |above*|, |below| and |below*| keys in |enumext|.
\cs_new_protected:Nn \__enumext_vspace_above:
  {
    \skip_if_eq:nnF
      { \skip_use:c { l__enumext_vspace_above_ \__enumext_level: _skip } } { \c_zero_skip }
      {
        \bool_if:cTF { l__enumext_vspace_a_star_ \__enumext_level: _bool }
          {
            \vspace*{ \skip_use:c { l__enumext_vspace_above_ \__enumext_level: _skip } }
          }
          {
            \vspace { \skip_use:c { l__enumext_vspace_above_ \__enumext_level: _skip } }
          }
      }
  }
\cs_new_protected:Nn \__enumext_vspace_below:
  {
    \skip_if_eq:nnF
      { \skip_use:c { l__enumext_vspace_below_ \__enumext_level: _skip } } { \c_zero_skip }
      {
        \bool_if:cTF { l__enumext_vspace_b_star_ \__enumext_level: _bool }
          {
            \vspace*{ \skip_use:c { l__enumext_vspace_below_ \__enumext_level: _skip } }
          }
          {
            \vspace { \skip_use:c { l__enumext_vspace_below_ \__enumext_level: _skip } }
          }
      }
  }
%% Function for |above|, |above*|, |below| and |below*| keys in |keyans|.
\cs_new_protected:Nn \__enumext_vspace_above_v:
  {
    \skip_if_eq:nnF { \l__enumext_vspace_above_v_skip } { \c_zero_skip }
      {
        \bool_if:NTF \l__enumext_vspace_a_star_v_bool
          {
            \vspace*{ \l__enumext_vspace_above_v_skip }
          }
          { \vspace { \l__enumext_vspace_above_v_skip } }
      }
  }
\cs_new_protected:Nn \__enumext_vspace_below_v:
  {
    \skip_if_eq:nnF { \l__enumext_vspace_below_v_skip } { \c_zero_skip }
      {
        \bool_if:NTF \l__enumext_vspace_b_star_v_bool
          {
            \vspace*{ \l__enumext_vspace_below_v_skip }
          }
          { \vspace { \l__enumext_vspace_below_v_skip } }
      }
  }
%% Function for |above|, |above*|, |below| and |below*| keys in |enumext*| and |keyans*|.
\cs_new_protected:Nn \__enumext_vspace_above_vii:
  {
    \skip_if_eq:nnF { \l__enumext_vspace_above_vii_skip } { \c_zero_skip }
      {
        \bool_if:NTF \l__enumext_vspace_a_star_vii_bool
          {
            \vspace*{ \l__enumext_vspace_above_vii_skip }
          }
          { \vspace { \l__enumext_vspace_above_vii_skip } }
      }
  }
\cs_new_protected:Nn \__enumext_vspace_above_viii:
  {
    \skip_if_eq:nnF { \l__enumext_vspace_above_viii_skip } { \c_zero_skip }
      {
        \bool_if:NTF \l__enumext_vspace_a_star_viii_bool
          {
            \vspace*{ \l__enumext_vspace_above_viii_skip }
          }
          { \vspace { \l__enumext_vspace_above_viii_skip } }
      }
  }
\cs_new_protected:Nn \__enumext_vspace_below_vii:
  {
    \skip_if_eq:nnF { \l__enumext_vspace_below_vii_skip } { \c_zero_skip }
      {
        \bool_if:NTF \l__enumext_vspace_b_star_vii_bool
          {
            \vspace*{ \l__enumext_vspace_below_vii_skip }
          }
          { \vspace { \l__enumext_vspace_below_vii_skip } }
      }
  }
\cs_new_protected:Nn \__enumext_vspace_below_viii:
  {
    \skip_if_eq:nnF { \l__enumext_vspace_below_viii_skip } { \c_zero_skip }
      {
        \bool_if:NTF \l__enumext_vspace_b_star_viii_bool
          {
            \vspace*{ \l__enumext_vspace_below_viii_skip }
          }
          { \vspace { \l__enumext_vspace_below_viii_skip } }
      }
  }
%% Add |series|, |resume| and |resume*| keys only on first level off |enumext| and |enumext*|.
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \keys_define:nn { enumext / #1 }
      {
        series  .str_set:N = \l__enumext_series_str,
        series  .value_required:n = true,
        resume  .code:n = \__enumext_resume_series:n {##1},
        resume* .code:n = \__enumext_resume_starred:,
        resume* .value_forbidden:n = true,
      }
  }
\clist_map_inline:nn { level-1, enumext* } { \__enumext_tmp:n {#1} }
%% Internal function for filter keys.
\cs_new:Npn \__enumext_filter_series:n #1
  {
    \use:e
      {
        \keyval_parse:NNn
          \__enumext_filter_series_key:n
          \__enumext_filter_series_pair:nn {#1}
      }
  }
\cs_new:Npn \__enumext_filter_series_key:n #1
  {
    \str_case:nnF {#1}
      {
        { resume } {} { resume* } {} { base-fix } {}
      }
      { , { \exp_not:n {#1} } }
  }
\cs_new:Npn \__enumext_filter_series_pair:nn #1#2
  {
    \str_case:nnF {#1}
      {
        { series } {} { resume } {} { start } {}
        { start* } {}  { save-ans } {} { save-key } {}
      }
      { , { \exp_not:n {#1} } = { \exp_not:n {#2} } }
  }
%% Internal function for parse filter keys used by |series|, |resume| and |resume*| keys.
\cs_new_protected:Npn \__enumext_parse_series:n #1
  {
    \str_if_empty:NTF \l__enumext_series_str
      {
        \bool_if:NF \l__enumext_resume_active_bool
          {
            \__enumext_resume_last:n {#1}
          }
      }
      {
        \tl_gclear_new:c { g__enumext_series_ \l__enumext_series_str _tl }
        \tl_gset:ce { g__enumext_series_ \l__enumext_series_str _tl }
          { \__enumext_filter_series:n {#1} }
        \int_if_exist:cF { g__enumext_series_ \l__enumext_series_str _int }
          {
            \int_new:c { g__enumext_series_ \l__enumext_series_str _int }
          }
      }
  }
%% Save keys for last environment without |series|, |resume| and |resume*| keys active.
\cs_new_protected:Npn \__enumext_resume_last:n #1
  {
    \bool_if:NT \l__enumext_standar_first_bool
      {
        \tl_gclear:N \g__enumext_standar_series_tl
        \tl_gset:Ne \g__enumext_standar_series_tl { \__enumext_filter_series:n {#1} }
      }
    \bool_if:NT \l__enumext_starred_first_bool
      {
        \tl_gclear:N \g__enumext_starred_series_tl
        \tl_gset:Ne \g__enumext_starred_series_tl { \__enumext_filter_series:n {#1} }
      }
  }
%% Internal function to save counter value and set int vars for |series|, |resume| and |resume*| keys.
\cs_new_protected:Nn \__enumext_resume_save_counter:
  {
    \bool_if:NT \g__enumext_standar_bool
      {
        \tl_if_empty:NF \l__enumext_series_str
          {
            \int_gset_eq:cN
              { g__enumext_series_ \l__enumext_series_str _int } \value{enumXi}
          }
        \tl_if_empty:NTF \l__enumext_resume_name_tl
          {
            \str_if_empty:NT \l__enumext_series_str
              {
                \int_gset_eq:NN \g__enumext_resume_int \value{enumXi}
              }
          }
          {
            \int_if_exist:cT { g__enumext_series_ \l__enumext_resume_name_tl _int }
              {
                \int_gset_eq:cN
                  { g__enumext_series_ \l__enumext_resume_name_tl _int } \value{enumXi}
              }
          }
        \int_if_exist:cT { g__enumext_resume_ \l__enumext_store_name_tl _int }
          {
            \int_gset_eq:cN
              { g__enumext_resume_ \l__enumext_store_name_tl _int } \value{enumXi}
          }
      }
    \bool_if:NT \g__enumext_starred_bool
      {
        \tl_if_empty:NF \l__enumext_series_str
          {
            \int_gset_eq:cN
              { g__enumext_series_ \l__enumext_series_str _int } \value{enumXvii}
          }
        \tl_if_empty:NTF \l__enumext_resume_name_tl
          {
            \str_if_empty:NT \l__enumext_series_str
              {
                \int_gset_eq:NN \g__enumext_resume_vii_int \value{enumXvii}
              }
          }
          {
            \int_if_exist:cT { g__enumext_series_ \l__enumext_resume_name_tl _int }
              {
                \int_gset_eq:cN
                  { g__enumext_series_ \l__enumext_resume_name_tl _int } \value{enumXvii}
              }
          }
        \int_if_exist:cT { g__enumext_resume_ \l__enumext_store_name_tl _int }
          {
            \int_gset_eq:cN
              { g__enumext_resume_ \l__enumext_store_name_tl _int } \value{enumXvii}
          }
      }
  }
%% Internal function for |resume| key.
\cs_new_protected:Npn \__enumext_resume_series:n #1
  {
    \tl_if_empty:nTF {#1}
      {
        \__enumext_resume_counter:n { }
      }
      {
        \tl_if_exist:cTF { g__enumext_series_ \tl_to_str:n {#1} _tl }
          {
            \__enumext_resume_counter:n {#1}
            \bool_if:NT \g__enumext_standar_bool
              {
                \keys_set:nv { enumext / level-1 }
                  { g__enumext_series_ \tl_to_str:n {#1} _tl }
              }
            \bool_if:NT \g__enumext_starred_bool
              {
                \keys_set:nv { enumext / enumext* }
                  { g__enumext_series_ \tl_to_str:n {#1} _tl }
              }
          }
          {
            \bool_if:NT \g__enumext_standar_bool
              {
                \msg_error:nnn { enumext } { unknown-series } {#1}
              }
            \bool_if:NT \g__enumext_starred_bool
              {
                \msg_error:nnn { enumext } { unknown-series } {#1}
              }
          }
      }
  }
\cs_new_protected:Npn \__enumext_resume_counter:n #1
  {
    \bool_set_true:N \l__enumext_resume_active_bool
    \tl_set:Nn \l__enumext_resume_name_tl {#1}
    \tl_if_empty:NTF \l__enumext_resume_name_tl
      {
        \__enumext_resume_counter:
      }
      {
        \__enumext_resume_counter_series:
      }
    \__enumext_resume_counter_save_ans:
  }
\cs_new_protected:Nn \__enumext_resume_counter:
  {
    \bool_if:NT \g__enumext_standar_bool
      {
        \int_gincr:N \g__enumext_resume_int
        \int_set_eq:NN \l__enumext_start_i_int \g__enumext_resume_int
      }
    \bool_if:NT \g__enumext_starred_bool
      {
        \int_gincr:N \g__enumext_resume_vii_int
        \int_set_eq:NN \l__enumext_start_vii_int \g__enumext_resume_vii_int
      }
  }
\cs_new_protected:Nn \__enumext_resume_counter_series:
  {
    \bool_if:NT \g__enumext_standar_bool
      {
        \int_set:Nn \l__enumext_start_i_int
          {
            \int_use:c { g__enumext_series_ \l__enumext_resume_name_tl _int } + 1
          }
      }
    \bool_if:NT \g__enumext_starred_bool
      {
        \int_set:Nn \l__enumext_start_vii_int
          {
            \int_use:c { g__enumext_series_ \l__enumext_resume_name_tl _int } + 1
          }
      }
  }
\cs_new_protected:Nn \__enumext_resume_counter_save_ans:
  {
    \bool_lazy_and:nnT
      { \bool_if_p:N \l__enumext_standar_first_bool }
      { \bool_if_p:N \l__enumext_store_active_bool }
      {
        \int_set:Nn \l__enumext_start_i_int
          {
            \int_use:c { g__enumext_resume_ \l__enumext_store_name_tl _int } + 1
          }
      }
    \bool_lazy_and:nnT
      { \bool_if_p:N \l__enumext_starred_first_bool }
      { \bool_if_p:N \l__enumext_store_active_bool }
      {
        \int_set:Nn \l__enumext_start_vii_int
          {
            \int_use:c { g__enumext_resume_ \l__enumext_store_name_tl _int } + 1
          }
      }
  }
%% Internal function for |resume*| key.
\cs_new_protected:Nn \__enumext_resume_starred:
  {
    \bool_if:NT \g__enumext_standar_bool
      {
        \tl_if_empty:NF \g__enumext_standar_series_tl
          {
            \__enumext_resume_counter:n { }
            \keys_set:nV { enumext / level-1 } \g__enumext_standar_series_tl
          }
      }
    \bool_if:NT \g__enumext_starred_bool
      {
        \tl_if_empty:NF \g__enumext_starred_series_tl
          {
            \__enumext_resume_counter:n { }
            \keys_set:nV { enumext / enumext* } \g__enumext_starred_series_tl
          }
      }
  }
%% Add |save-ans| key only on first level off |enumext| and |enumext*|.
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \keys_define:nn { enumext / #1 }
      {
        save-ans .code:n = \__enumext_storing_set:n {##1},
        save-ans .value_required:n = true,
      }
  }
\clist_map_inline:nn { level-1, enumext* } { \__enumext_tmp:n {#1} }
%% Print/write start and stop environment with |save-ans| key active.
\cs_new_protected:Nn \__enumext_start_save_ans_msg:
  {
    \msg_term:nnVV { enumext } { save-ans-log }
      \g__enumext_envir_name_tl \l__enumext_store_name_tl
  }
\cs_new_protected:Nn \__enumext_stop_save_ans_msg:
  {
    \msg_term:nnVV { enumext } { save-ans-log-hook }
      \g__enumext_envir_name_tl \g__enumext_store_name_tl
  }
%% Function to activate ALL "storing" (and |check-ans|, |no-store|, |resume|) used by |save-ans| key.
\cs_new_protected:Npn \__enumext_storing_set:n #1
  {
    \tl_set:Ne \l__enumext_store_name_tl {#1}
    \tl_if_empty:NTF \l__enumext_store_name_tl
      {
        \bool_lazy_or:nnT
          { \l__enumext_standar_first_bool } { \l__enumext_starred_first_bool }
          {
            \msg_error:nnV { enumext } { save-ans-empty } \g__enumext_envir_name_tl
          }
      }
      {
        \bool_lazy_or:nnT
          { \l__enumext_standar_first_bool } { \l__enumext_starred_first_bool }
          {
            \__enumext_start_save_ans_msg:
            \__enumext_storing_exec:
          }
      }
  }
\cs_new_protected:Nn \__enumext_storing_exec:
  {
    \bool_set_true:N \l__enumext_store_active_bool
    \bool_set_true:N \l__enumext_check_answers_bool
    \tl_gset:NV \g__enumext_store_name_tl \l__enumext_store_name_tl
    \__enumext_anskey_env_make:V \l__enumext_store_name_tl
    \prop_if_exist:cF { g__enumext_ \l__enumext_store_name_tl _prop }
      {
        \msg_log:nnV { enumext } { store-prop } \l__enumext_store_name_tl
        \prop_new:c { g__enumext_ \l__enumext_store_name_tl _prop }
      }
    \seq_if_exist:cF { g__enumext_ \l__enumext_store_name_tl _seq }
      {
        \msg_log:nnV { enumext } { store-seq } \l__enumext_store_name_tl
        \seq_new:c { g__enumext_ \l__enumext_store_name_tl _seq }
      }
    \int_if_exist:cF { g__enumext_resume_ \l__enumext_store_name_tl _int }
      {
        \msg_log:nnV { enumext } { store-int } \l__enumext_store_name_tl
        \int_new:c { g__enumext_resume_ \l__enumext_store_name_tl _int }
      }
  }
%% Add |check-ans| and |no-store| keys.
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \keys_define:nn { enumext / #1 }
      {
        check-ans .bool_set:N = \l__enumext_check_ans_key_bool,
        check-ans .initial:n  = false,
        check-ans .value_required:n = true,
        no-store  .code:n = {
                              \bool_set_false:N \l__enumext_check_answers_bool
                              \bool_set_false:N \l__enumext_check_ans_key_bool
                            },
        no-store  .value_forbidden:n = true,
      }
  }
\clist_map_inline:nn
  {
    level-1, level-2, level-3, level-4, enumext*
  }
  { \__enumext_tmp:n {#1} }
%% Internal function for checking answer mechanism in |enumext| and |enumext|.
\cs_new_protected:Nn \__enumext_check_ans_active:
  {
    \tl_if_empty:NF \l__enumext_store_name_tl
      {
        \bool_if:NT \l__enumext_check_answers_bool
          {
            \__enumext_check_ans_level:
          }
      }
  }
%% Decrementing \g_@@_item_number_int for nested level.
\cs_new_protected:Nn \__enumext_check_ans_level:
  {
    \int_case:nn { \l__enumext_level_int }
      {
        { 1 }{
               \bool_lazy_all:nT
                 {
                   { \bool_if_p:N \g__enumext_starred_bool }
                   { \int_compare_p:nNn { \l__enumext_level_h_int } = { 1 } }
                 }
                 {
                   \int_gdecr:N \g__enumext_item_number_int
                   \bool_set_false:N \l__enumext_item_number_bool
                 }
             }
        { 2 }{
               \int_gdecr:N \g__enumext_item_number_int
               \bool_set_false:N \l__enumext_item_number_bool
             }
        { 3 }{
               \int_gdecr:N \g__enumext_item_number_int
               \bool_set_false:N \l__enumext_item_number_bool
             }
        { 4 }{
               \int_gdecr:N \g__enumext_item_number_int
               \bool_set_false:N \l__enumext_item_number_bool
             }
      }
    \int_case:nn { \l__enumext_level_h_int }
      {
        { 1 }{
               \bool_lazy_all:nT
                 {
                   { \bool_if_p:N \g__enumext_standar_bool }
                   { \int_compare_p:nNn { \l__enumext_level_int } = { 1 } }
                 }
                 {
                   \int_gdecr:N \g__enumext_item_number_int
                   \bool_set_false:N \l__enumext_item_number_bool
                 }
             }
      }
  }
%% Function to export \l_@@_check_ans_key_bool for |check-ans| key.
\cs_new_protected:Nn \__enumext_check_ans_key_hook:
  {
    \bool_lazy_and:nnT
      { \bool_if_p:N \l__enumext_check_ans_key_bool }
      { \bool_if_p:N \g__enumext_standar_bool }
      {
        \bool_gset_true:N \g__enumext_check_ans_key_bool
      }
    \bool_lazy_and:nnT
      { \bool_if_p:N \l__enumext_check_ans_key_bool }
      { \bool_if_p:N \g__enumext_starred_bool }
      {
        \bool_gset_true:N \g__enumext_check_ans_key_bool
      }
  }
%% Set \g_@@_item_answer_diff_int for |check-ans| key and internal.
\cs_new_protected:Nn \__enumext_item_answer_diff:
  {
    \int_gset:Nn \g__enumext_item_answer_diff_int
      {
        \int_sign:n { \g__enumext_item_number_int - \g__enumext_item_anskey_int }
      }
  }
%% Function to print |check-ans| key.
\cs_new_protected:Nn \__enumext_check_ans_show:
  {
    \int_case:nn { \g__enumext_item_answer_diff_int }
      {
        { -1 }{ \__enumext_check_ans_msg_less:    }
        {  0 }{ \__enumext_check_ans_msg_same_ok: }
        {  1 }{ \__enumext_check_ans_msg_greater: }
      }
  }
\cs_new_protected:Nn \__enumext_check_ans_msg_less:
  {
    \msg_warning:nneee { enumext } { item-less-answer } { \g__enumext_store_name_tl }
      { \g__enumext_envir_name_tl } { \g__enumext_start_line_tl }
  }
\cs_new_protected:Nn \__enumext_check_ans_msg_same_ok:
  {
    \msg_term:nneee { enumext } { items-same-answer } { \g__enumext_store_name_tl }
      { \g__enumext_envir_name_tl } { \g__enumext_start_line_tl }
  }
\cs_new_protected:Nn \__enumext_check_ans_msg_greater:
  {
    \msg_warning:nneee { enumext } { item-greater-answer } { \g__enumext_store_name_tl }
      { \g__enumext_envir_name_tl } { \g__enumext_start_line_tl }
  }
%% Function to log check-answer mechanisms.
\cs_new_protected:Nn \__enumext_check_ans_log:
  {
    \int_case:nn { \g__enumext_item_answer_diff_int }
      {
        { -1 }{ \__enumext_check_ans_log_msg_less:    }
        {  0 }{ \__enumext_check_ans_log_msg_same_ok: }
        {  1 }{ \__enumext_check_ans_log_msg_greater: }
      }
  }
\cs_new_protected:Nn \__enumext_check_ans_log_msg_less:
  {
    \msg_log:nneee { enumext } { item-less-answer } { \g__enumext_store_name_tl }
      { \g__enumext_envir_name_tl } { \g__enumext_start_line_tl }
  }
\cs_new_protected:Nn \__enumext_check_ans_log_msg_same_ok:
  {
    \msg_log:nneee { enumext } { items-same-answer }  { \g__enumext_store_name_tl }
      { \g__enumext_envir_name_tl } { \g__enumext_start_line_tl }
  }
\cs_new_protected:Nn \__enumext_check_ans_log_msg_greater:
  {
    \msg_log:nneee { enumext } { item-greater-answer } { \g__enumext_store_name_tl }
      { \g__enumext_envir_name_tl } { \g__enumext_start_line_tl }
  }
%% Function for check \item* and \anspic* commands.
\cs_new_protected:Npn \__enumext_check_starred_cmd:n #1
  {
    \int_compare:nNnT
      { \g__enumext_check_starred_cmd_int } = { 0 }
      {
        \msg_warning:nnnV
          { enumext } { missing-starred }{ #1 } \l__enumext_check_start_line_env_tl
      }
    \int_compare:nNnT
      { \g__enumext_check_starred_cmd_int } > { 1 }
      {
        \msg_warning:nnnV
          { enumext } { many-starred }{ #1 } \l__enumext_check_start_line_env_tl
      }
    \int_gzero:N \g__enumext_check_starred_cmd_int
    \tl_clear:N \l__enumext_check_start_line_env_tl
  }
%% Add keys associated with storage on first level of |enumext| and |enumext*|.
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \keys_define:nn { enumext / #1 }
      {
        wrap-ans   .cs_set_protected:Np = \__enumext_anskey_wrapper:n ##1,
        wrap-ans   .initial:n =
                     {
                       \fbox{\parbox[t]{\dimeval{\itemwidth -2\fboxsep -2\fboxrule}}{##1}}
                     },
        wrap-ans   .value_required:n = true,
        wrap-opt   .cs_set_protected:Np = \__enumext_keyans_wrapper_opt:n ##1,
        wrap-opt   .initial:n = [{##1}],
        wrap-opt   .value_required:n = true,
        save-sep   .tl_set:N  = \l__enumext_store_keyans_item_opt_sep_tl,
        save-sep   .initial:n = {, ~ },
        save-sep   .value_required:n = true,
        mark-ans   .tl_set:N  = \l__enumext_mark_answer_sym_tl,
        mark-ans   .initial:n = \textasteriskcentered,
        mark-ans   .value_required:n = true,
        mark-pos   .choice:,
        mark-pos / left    .code:n = \str_set:Nn \l__enumext_mark_position_str { l },
        mark-pos / right   .code:n = \str_set:Nn \l__enumext_mark_position_str { r },
        mark-pos / unknown .code:n =
                           \msg_error:nneee { enumext } { unknown-choice }
                             { mark-pos } { left, ~ right } { \exp_not:n {##1} },
        mark-pos   .initial:n = right,
        mark-pos   .value_required:n = true,
        show-ans   .bool_set:N = \l__enumext_show_answer_bool,
        show-ans   .initial:n  = false,
        show-ans   .value_required:n = true,
        show-pos   .bool_set:N = \l__enumext_show_position_bool,
        show-pos   .initial:n  = false,
        show-pos   .value_required:n = true,
        mark-ref   .tl_set:N   = \l__enumext_mark_ref_sym_tl,
        mark-ref   .initial:n  = \textasteriskcentered,
        mark-ref   .value_required:n = true,
        save-ref   .bool_set:N = \l__enumext_store_ref_key_bool,
        save-ref   .initial:n  = false,
        save-ref   .value_required:n = true,
      }
  }
\clist_map_inline:nn { level-1, enumext* } { \__enumext_tmp:n {#1} }
%% Add keys |mark-pos|, |show-pos| and |show-ans| for |keyans| and |keyans*|.
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \keys_define:nn { enumext / #1 }
      {
        mark-pos .choice:,
        mark-pos / left  .code:n = \str_set:Nn \l__enumext_mark_position_str { l },
        mark-pos / right .code:n = \str_set:Nn \l__enumext_mark_position_str { r },
        mark-pos .initial:n = right,
        mark-pos .value_required:n  = true,
        show-ans .bool_set:N = \l__enumext_show_answer_bool,
        show-ans .initial:n  = false,
        show-ans .value_required:n = true,
        show-pos .bool_set:N = \l__enumext_show_position_bool,
        show-pos .initial:n  = false,
        show-pos .value_required:n = true,
      }
  }
\clist_map_inline:nn { keyans, keyans* } { \__enumext_tmp:n {#1} }
%% Internal function for store optional arguments of the environments in seq.
\cs_new_protected:Npn \__enumext_store_active_keys:n #1
  {
    \bool_if:cF { l__enumext_store_save_key_ \__enumext_level: _bool }
      {
        \tl_clear:c { l__enumext_save_key_ \__enumext_level: _tl }
        \tl_set:ce
          { l__enumext_store_save_key_ \__enumext_level: _tl }
          { \__enumext_filter_save_key:n {#1} }
      }
  }
\cs_new_protected:Npn \__enumext_store_active_keys_vii:n #1
  {
    \bool_if:NF \l__enumext_store_save_key_vii_bool
      {
        \tl_clear:N \l__enumext_store_save_key_vii_tl
        \tl_set:Ne \l__enumext_store_save_key_vii_tl { \__enumext_filter_save_key:n {#1} }
      }
  }
%% Add |save-key| key.
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \keys_define:nn { enumext / enumext* }
      {
        save-key .code:n = \__enumext_parse_save_key_vii:n {##1},
        save-key .value_required:n = true,
      }
    \keys_define:nn { enumext / #1 }
      {
        save-key .code:n = \__enumext_parse_save_key:n {##1},
        save-key .value_required:n = true,
      }
  }
\clist_map_inline:nn { level-1, level-2, level-3, level-4 } { \__enumext_tmp:n {#1} }
%% Internal function for |save-key| key.
\cs_new_protected:Npn \__enumext_parse_save_key:n #1
  {
    \bool_set_true:c { l__enumext_store_save_key_ \__enumext_level: _bool }
    \tl_clear:c { l__enumext_save_key_ \__enumext_level: _tl }
    \tl_set:ce
      { l__enumext_store_save_key_ \__enumext_level: _tl }
      { \__enumext_filter_save_key:n {#1} }
  }
\cs_new_protected:Npn \__enumext_parse_save_key_vii:n #1
  {
    \bool_set_true:N \l__enumext_store_save_key_vii_bool
    \tl_clear:N \l__enumext_store_save_key_vii_tl
    \tl_set:Ne \l__enumext_store_save_key_vii_tl { \__enumext_filter_save_key:n {#1} }
  }
%% Internal function for filter keys for |save-key| key.
\cs_new:Npn \__enumext_filter_save_key:n #1
  {
    \use:e
      {
        \keyval_parse:NNn
          \__enumext_filter_save_key_key:n
          \__enumext_filter_save_key_pair:nn {#1}
      }
  }
\cs_new:Npn \__enumext_filter_save_key_key:n #1
  {
    \str_case:nnF {#1}
      {
        { resume } {} { resume* } {} { no-store } {} { base-fix } {}
      }
      { , { \exp_not:n {#1} } }
  }
\cs_new:Npn \__enumext_filter_save_key_pair:nn #1#2
  {
    \str_case:nnF {#1}
      {
        { series   } {} { resume    } {} { save-ans } {} { save-ref   } {}
        { save-key } {} { check-ans } {} { show-ans } {} { show-pos   } {}
        { wrap-ans } {} { mark-ans  } {} { wrap-opt } {} { save-sep   } {}
        { mark-ref } {} { mini-env  } {} { mini-sep } {} { mini-right } {}
        { mini-right* } {}
      }
      { , { \exp_not:n {#1} } = { \exp_not:n {#2} } }
  }
%% Function for store content to prop list.
\cs_new_protected:Npn \__enumext_store_addto_prop:n #1
  {
    \prop_gput_if_not_in:cen { g__enumext_ \l__enumext_store_name_tl _prop }
      {
        \int_eval:n { \prop_count:c { g__enumext_ \l__enumext_store_name_tl _prop } + 1 }
      }
      { #1 }
  }
\cs_generate_variant:Nn \__enumext_store_addto_prop:n { V, e }
%% Function for store content to sequence.
\cs_new_protected:Npn \__enumext_store_addto_seq:n #1
  {
    \seq_gput_right:cn { g__enumext_ \l__enumext_store_name_tl _seq } { #1 }
  }
\cs_generate_variant:Nn \__enumext_store_addto_seq:n { v, V, e }
%% Function for memorize level execution of |\anskey| on |enumext|.
\cs_new_protected:Nn \__enumext_store_level_open:
  {
    \bool_if:NT \l__enumext_check_answers_bool
      {
        \tl_if_empty:cTF { l__enumext_store_save_key_ \__enumext_level: _tl }
          {
            \__enumext_store_addto_seq:n
              {
                \item \begin{enumext}
              }
          }
          {
            \tl_put_left:cn { l__enumext_store_save_key_ \__enumext_level: _tl }
              {
                \item \begin{enumext} [
              }
            \tl_put_right:cn { l__enumext_store_save_key_ \__enumext_level: _tl }
              {
                ]
              }
            \__enumext_store_addto_seq:v { l__enumext_store_save_key_ \__enumext_level: _tl }
          }
      }
  }
\cs_new_protected:Nn \__enumext_store_level_close:
  {
    \bool_if:NT \l__enumext_check_answers_bool
      {
        \__enumext_store_addto_seq:n { \end{enumext} }
      }
  }
%% Function for memorize level execution of |\anskey| and |anskey*| on |enumext*|.
\cs_new_protected:Nn \__enumext_store_level_open_vii:
  {
    \bool_if:NT \l__enumext_check_answers_bool
      {
        \tl_if_empty:NTF \l__enumext_store_save_key_vii_tl
          {
            \__enumext_store_addto_seq:n
              {
                \item \begin{enumext*}
              }
          }
          {
            \tl_put_left:Nn \l__enumext_store_save_key_vii_tl
              {
                \item \begin{enumext*}[
              }
            \tl_put_right:Nn \l__enumext_store_save_key_vii_tl
              {
                ]
              }
            \__enumext_store_addto_seq:V \l__enumext_store_save_key_vii_tl
          }
      }
  }
\cs_new_protected:Nn \__enumext_store_level_close_vii:
  {
    \bool_if:NT \l__enumext_check_answers_bool
      {
        \__enumext_store_addto_seq:n { \end{enumext*} }
      }
  }
%% Function for put content in box on left margin.
\cs_new_protected:Nn \__enumext_print_keyans_box:NN
  {
    \mode_leave_vertical:
    \skip_horizontal:n { -\dim_use:N #2 }
    \makebox[0pt][ r ]
      {
        \makebox[ \dim_use:N #1 ][ \l__enumext_mark_position_str ]
          {
            \tl_use:N \l__enumext_mark_answer_sym_tl
          }
      }
    \skip_horizontal:n { \dim_use:N #2 }
  }
\cs_generate_variant:Nn \__enumext_print_keyans_box:NN { cc }
%% Internal label and ref function for |\anskey| and |anskey*|.
\cs_new_protected:Nn \__enumext_store_internal_ref:
  {
    \cs_set_protected:Npn \__enumext_tmp:n ##1
      {
        \tl_set_eq:cc { l__enumext_label_copy_##1_tl } { l__enumext_label_##1_tl }
        \tl_reverse:c { l__enumext_label_copy_##1_tl }
        \tl_remove_once:cn { l__enumext_label_copy_##1_tl } { . }
        \tl_reverse:c { l__enumext_label_copy_##1_tl }
      }
    \clist_map_inline:nn { i, ii, iii, iv, vii } { \__enumext_tmp:n {##1} }
    \cs_set:Npn \__enumext_tmp:n ##1
      { . \tl_use:c { l__enumext_label_copy_ \int_to_roman:n {##1} _tl } }
    \bool_lazy_all:nT
      {
        { \bool_if_p:N \g__enumext_starred_bool }
        { \int_compare_p:nNn { \l__enumext_level_int } = { 0 } }
      }
      {
        \tl_put_right:Ne \l__enumext_newlabel_arg_two_tl
          { \tl_use:N \l__enumext_label_copy_vii_tl }
      }
    \bool_lazy_all:nT
      {
        { \bool_not_p:n { \g__enumext_standar_bool } }
        { \bool_if_p:N \l__enumext_standar_bool }
        { \int_compare_p:nNn { \l__enumext_level_int } > { 0 } }
      }
      {
        \tl_put_right:Ne \l__enumext_newlabel_arg_two_tl
          {
            \tl_use:N \l__enumext_label_copy_vii_tl
            \int_step_function:nnN { 1 } { \l__enumext_level_int } \__enumext_tmp:n
          }
      }
    \bool_lazy_all:nT
      {
        { \bool_if_p:N \g__enumext_standar_bool }
        { \int_compare_p:nNn { \l__enumext_level_int } > { 0 } }
        { \int_compare_p:nNn { \l__enumext_level_h_int } = { 0 } }
      }
      {
        \tl_put_right:Ne \l__enumext_newlabel_arg_two_tl
          {
            \tl_use:N \l__enumext_label_copy_i_tl
            \int_step_function:nnN { 2 } { \l__enumext_level_int } \__enumext_tmp:n
          }
      }
    \cs_set:Npn \__enumext_tmp:n ##1
      { \tl_use:c { l__enumext_label_copy_ \int_to_roman:n {##1} _tl } . }
    \bool_lazy_all:nT
      {
        { \bool_if_p:N \g__enumext_standar_bool }
        { \bool_if_p:N \l__enumext_starred_bool }
        { \int_compare_p:nNn { \l__enumext_level_int } > { 0 } }
      }
      {
        \tl_put_right:Ne \l__enumext_newlabel_arg_two_tl
          {
            \int_step_function:nnN { 1 } { \l__enumext_level_int } \__enumext_tmp:n
            \tl_use:N \l__enumext_label_copy_vii_tl
          }
      }
    \tl_put_right:Ne \l__enumext_newlabel_arg_one_tl
      {
        \l__enumext_store_name_tl \c_colon_str
        \int_eval:n { \prop_count:c { g__enumext_ \l__enumext_store_name_tl _prop } }
      }
    \tl_put_right:Ne \l__enumext_write_aux_file_tl
      {
        \__enumext_newlabel:nn
          { \exp_not:V \l__enumext_newlabel_arg_one_tl }
          { \l__enumext_newlabel_arg_two_tl }
      }
    \l__enumext_write_aux_file_tl
  }
%% Internal function of |\anskey| for store content.
\cs_new_protected:Npn \__enumext_store_anskey_code:n #1
  {
    \int_gincr:N \g__enumext_item_anskey_int
    \__enumext_store_addto_prop:n {#1}
    \bool_if:NT \l__enumext_store_ref_key_bool
      {
        \__enumext_store_internal_ref:
      }
    \__enumext_anskey_show_wrap_left:n { #1 }
    \tl_clear:N \l__enumext_store_anskey_arg_tl
    \bool_lazy_and:nnT
      { \bool_if_p:N \l__enumext_store_columns_break_bool }
      { \bool_not_p:n { \l__enumext_starred_bool } }
      {
        \tl_put_left:Nn \l__enumext_store_anskey_arg_tl { \columnbreak }
      }
    \tl_put_right:Nn \l__enumext_store_anskey_arg_tl { \item }
    \bool_lazy_and:nnT
      { \bool_not_p:n { \l__enumext_starred_bool } }
      { \int_compare_p:nNn { \l__enumext_store_item_join_int } > { 1 } }
      {
        \tl_put_right:Ne \l__enumext_store_anskey_arg_tl
          {
            ( \exp_not:V \l__enumext_store_item_join_int )
          }
       }
     \bool_if:NTF \l__enumext_store_item_star_bool
      {
        \tl_put_right:Nn \l__enumext_store_anskey_arg_tl { * }
        \tl_if_empty:NF \l__enumext_store_item_symbol_tl
          {
            \tl_put_right:Ne \l__enumext_store_anskey_arg_tl
              {
                [ \exp_not:V \l__enumext_store_item_symbol_tl ]
              }
          }
        \dim_compare:nT
          {
            \l__enumext_store_item_symbol_sep_dim != \c_zero_dim
          }
          {
            \tl_put_right:Ne \l__enumext_store_anskey_arg_tl
              {
                [ \exp_not:V \l__enumext_store_item_symbol_sep_dim ]
              }
          }
        \tl_put_right:Nn \l__enumext_store_anskey_arg_tl {#1}
      }
      {
        \tl_put_right:Nn \l__enumext_store_anskey_arg_tl {#1}
      }
    \bool_lazy_and:nnT
      { \bool_if_p:N \l__enumext_store_ref_key_bool }
      { \bool_if_p:N \l__enumext_hyperref_bool }
      {
        \tl_put_right:Ne \l__enumext_store_anskey_arg_tl
          {
            \hfill \exp_not:N \hyperlink { \exp_not:V \l__enumext_newlabel_arg_one_tl }
                 { \exp_not:V \l__enumext_mark_ref_sym_tl }
          }
      }
    \__enumext_store_addto_seq:V \l__enumext_store_anskey_arg_tl
  }
%% Internal |wrap-ans| implementation for |\anskey| and |anskey*|.
\cs_new_protected:Npn \__enumext_anskey_show_wrap_arg:n #1
  {
    \par
    \bool_if:NTF \l__enumext_starred_bool
      {
        \__enumext_print_keyans_box:NN \l__enumext_labelwidth_vii_dim  \l__enumext_labelsep_vii_dim
      }
      {
        \__enumext_print_keyans_box:cc
          { l__enumext_labelwidth_ \__enumext_level: _dim }
          { l__enumext_labelsep_ \__enumext_level: _dim }
      }
    \__enumext_anskey_wrapper:n { #1 }
  }
%% Internal |show-ans| and |show-pos| implementation for |\anskey| and |anskey*|.
\cs_new_protected:Npn \__enumext_anskey_show_wrap_left:n #1
  {
    \bool_if:NT \l__enumext_show_answer_bool
      {
        \__enumext_anskey_show_wrap_arg:n { #1 }
      }
    \bool_if:NT \l__enumext_show_position_bool
      {
        \tl_set:Ne \l__enumext_mark_answer_sym_tl
          {
            \group_begin:
            \exp_not:N \normalfont
            \exp_not:N \footnotesize [ \int_eval:n
              {
                \prop_count:c { g__enumext_ \l__enumext_store_name_tl _prop }
              }
              ]
            \group_end:
          }
        \__enumext_anskey_show_wrap_arg:n { #1 }
      }
  }
%% Add |key=val| for |\anskey|.
\keys_define:nn { enumext / anskey }
  {
    break-col .bool_set:N = \l__enumext_store_columns_break_bool,
    break-col .default:n  = true,
    break-col .value_forbidden:n = true,
    item-join .int_set:N  = \l__enumext_store_item_join_int,
    item-join .value_required:n = true,
    item-star .bool_set:N = \l__enumext_store_item_star_bool,
    item-star .default:n  = true,
    item-star .value_forbidden:n = true,
    item-sym* .tl_set:N   = \l__enumext_store_item_symbol_tl,
    item-sym* .value_required:n = true,
    item-pos* .dim_set:N  = \l__enumext_store_item_symbol_sep_dim,
    item-pos* .value_required:n = true,
    unknown   .code:n     = { \__enumext_anskey_unknown:n {#1} },
  }
\cs_new_protected:Npn \__enumext_anskey_unknown:n #1
  {
    \exp_args:NV \__enumext_anskey_unknown:nn \l_keys_key_str {#1}
  }
\cs_new_protected:Npn \__enumext_anskey_unknown:nn #1 #2
  {
    \tl_if_blank:nTF {#2}
      {
        \msg_error:nnn { enumext } { anskey-cmd-key-unknown } {#1}
      }
      {
        \msg_error:nnnn { enumext } { anskey-cmd-key-value-unknown } {#1} {#2}
      }
  }
%% Define the user command |\anskey|.
\NewDocumentCommand \anskey { o +m }
  {
    \__enumext_anskey_safe_outer:
    \group_begin:
      \bool_if:NT \l__enumext_check_answers_bool
        {
          \tl_if_novalue:nF {#1}
            {
              \keys_set:nn { enumext / anskey } {#1}
            }
          \tl_if_blank:nTF {#2}
            {
              \msg_error:nn { enumext } { anskey-empty-arg }
            }
            {
              \__enumext_anskey_safe_inner:
              \__enumext_store_anskey_code:n {#2}
            }
        }
    \group_end:
  }
%% Internal function for msg when |\anskey| is outer.
\cs_new_protected:Nn \__enumext_anskey_safe_outer:
  {
    \bool_if:NF \l__enumext_store_active_bool
      {
        \msg_error:nnnn { enumext } { anskey-wrong-place }{ anskey }{ enumext }
      }
    \int_compare:nNnT { \l__enumext_keyans_level_int } = { 1 }
      {
        \msg_error:nnnn { enumext } { command-wrong-place }{ anskey }{ keyans }
      }
    \int_compare:nNnT { \l__enumext_keyans_level_h_int } = { 1 }
      {
        \msg_error:nnnn { enumext } { command-wrong-place }{ anskey }{ keyans* }
      }
    \int_compare:nNnT { \l__enumext_keyans_pic_level_int } = { 1 }
      {
        \msg_error:nnnn { enumext } { command-wrong-place }{ anskey }{ keyanspic }
      }
  }
%% Internal function for msg when |\anskey| is inner and arg is empty.
\cs_new_protected:Nn \__enumext_anskey_safe_inner:
  {
    \int_incr:N \l__enumext_anskey_level_int
    \int_compare:nNnT { \l__enumext_anskey_level_int } > { 1 }
      {
        \msg_error:nn { enumext } { anskey-nested }
      }
    \bool_if:NF \l__enumext_item_number_bool
      {
        \msg_error:nn { enumext } { anskey-unnumber-item }
      }
    \mode_if_math:T
      {
        \msg_error:nne { enumext } { anskey-math-mode } { \c_backslash_str anskey }
      }
  }
\cs_new_protected:Nn \__enumext_undefine_anskey_env:
  {
    \cs_undefine:c { anskey* }
    \cs_undefine:c { endanskey* }
    \cs_undefine:c { __scontents_anskey*_env_begin: }
    \cs_undefine:c { __scontents_anskey*_env_end: }
  }
%% Hooks for |anskey*| environment out off |enumext| and |enumext*|.
\__enumext_before_env:nn { enumext }
  {
    \bool_lazy_and:nnT
      { \int_compare_p:nNn { \l__enumext_level_int } = { 0 } }
      { \int_compare_p:nNn { \l__enumext_level_h_int } = { 0 } }
      {
        \cs_if_free:cF { __scontents_anskey*_env_begin: }
          {
            \msg_error:nnn { enumext } { anskey-env-error } { anskey* }
          }
      }
  }
\__enumext_before_env:nn { enumext* }
  {
    \bool_lazy_and:nnT
      { \int_compare_p:nNn { \l__enumext_level_int } = { 0 } }
      { \int_compare_p:nNn { \l__enumext_level_h_int } = { 0 } }
      {
        \cs_if_free:cF { __scontents_anskey*_env_begin: }
          {
            \msg_error:nnn { enumext } { anskey-env-error } { anskey* }
          }
      }
  }
%% Hooks for |anskey*| inside the keyans, keyans* and keyanspic, math-mode ans not number |\item|.
\__enumext_before_env:nn { anskey* }
  {
    \int_compare:nNnT { \l__enumext_keyans_level_int } = { 1 }
      {
        \msg_error:nnn { enumext } { anskey-env-wrong }{ keyans }
      }
    \int_compare:nNnT { \l__enumext_keyans_level_h_int } = { 1 }
      {
        \msg_error:nnn { enumext } { anskey-env-wrong } { keyans* }
      }
    \int_compare:nNnT { \l__enumext_keyans_pic_level_int } = { 1 }
      {
        \msg_error:nnn { enumext } { anskey-env-wrong } { keyanspic }
      }
    \bool_if:NF \l__enumext_item_number_bool
      {
        \msg_error:nn { enumext } { anskey-unnumber-item }
      }
    \mode_if_math:T
      {
        \msg_error:nnn { enumext } { anskey-math-mode } { anskey* }
      }
  }
%% Function for define |anskey*| environment using scontents.
\cs_new_protected:Npn \__enumext_anskey_env_make:n #1
  {
    \bool_if:NT \l__enumext_anskey_env_bool
      {
        \newenvsc{anskey*}[store-env=#1,print-env=false]
        \__enumext_anskey_env_exec:
      }
  }
\cs_generate_variant:Nn \__enumext_anskey_env_make:n { V }
%% Define keys for |anskey*| environment using scontents PATH.
\cs_new_protected:Nn \__enumext_anskey_env_define_keys:
  {
    \keys_define:nn { scontents / scontents }
      {
        break-col .bool_gset:N = \g__enumext_store_columns_break_bool,
        break-col .default:n   = true,
        break-col .value_forbidden:n = true,
        item-join .int_gset:N  = \g__enumext_store_item_join_int,
        item-join .value_required:n = true,
        item-star .bool_gset:N = \g__enumext_store_item_star_bool,
        item-star .default:n   = true,
        item-star .value_forbidden:n = true,
        item-sym* .tl_gset:N   = \g__enumext_store_item_symbol_tl,
        item-sym* .value_required:n = true,
        item-pos* .dim_gset:N  = \g__enumext_store_item_symbol_sep_dim,
        item-pos* .value_required:n = true,
        print-env .undefine:,
        store-env .undefine:,
        write-out .undefine:,
        unknown   .code:n      = { \__enumext_anskey_env_unknown:n {##1} },
      }
  }
\cs_new_protected:Npn \__enumext_anskey_env_unknown:n #1
  {
    \exp_args:NV \__enumext_anskey_env_unknown:nn \l_keys_key_str {#1}
  }
\cs_new_protected:Npn \__enumext_anskey_env_unknown:nn #1#2
  {
    \tl_if_blank:nTF {#2}
      {
        \msg_error:nnn { enumext } { anskey-env-key-unknown } {#1}
      }
      {
        \msg_error:nnnn { enumext } { anskey-env-key-value-unknown } {#1} {#2}
      }
  }
%% Restore keys for |scontents| environment.
\cs_new_protected:Nn \__enumext_anskey_env_reset_keys:
  {
    \keys_define:nn { scontents / scontents }
      {
        break-col .undefine:,
        item-join .undefine:,
        item-star .undefine:,
        item-sym* .undefine:,
        item-pos* .undefine:,
        write-out .code:n    = {
                                 \bool_set_false:N \l__scontents_storing_bool
                                 \bool_set_true:N  \l__scontents_writing_bool
                                 \tl_set:Nn \l__scontents_fname_out_tl {##1}
                               },
        write-out .value_required:n = true,
        print-env .meta:nn   = { scontents } { print-env = ##1 },
        print-env .default:n = true,
        store-env .meta:nn   = { scontents } { store-env = ##1 },
        unknown   .code:n    = { \__scontents_parse_environment_keys:n {##1} },
      }
  }
\cs_new_protected:Npn \__enumext_rescan_anskey_env:n #1
  {
    \group_begin:
      \int_set:Nn \tex_newlinechar:D { `\^^J }
      \__scontents_rescan_tokens:x
        {
          \endgroup % This assumes \catcode`\\=0... Things might go off otherwise.
         #1
        }
  }
%% Function for exec all code for |anskey*| environment.
\cs_new_protected:Nn \__enumext_anskey_env_exec:
  {
    \__enumext_before_env:nn { anskey* }
      {
        \__enumext_anskey_env_define_keys:
      }
    \hook_if_empty:nF {env/anskey*/after}
      {
        \hook_gremove_code:nn {env/anskey*/after} { * }
      }
    \__enumext_after_env:nn { anskey* }
      {
        \__enumext_anskey_env_save_keys:
        \tl_clear:N \l__enumext_store_anskey_env_tl
        \tl_clear:N \l__enumext_store_anskey_opt_tl
        \bool_if:NT \l__enumext_check_answers_bool
          {
            \tl_gset:Ne \l__enumext_store_anskey_env_tl
              {
                \seq_item:ce { g__scontents_name_ \l__enumext_store_name_tl _seq } { -1 }
              }
            \regex_match:nVTF
              { ^\s* \z | ^\s* \u{c__scontents_hidden_space_str} \z }
              \l__enumext_store_anskey_env_tl
              {
                \msg_error:nn { enumext } { anskey-empty-arg }
              }
              {
                \__enumext_anskey_env_store:
              }
          }
        \__enumext_anskey_env_clean_vars:
        \__enumext_anskey_env_reset_keys:
      }
  }
\cs_new_protected:Nn \__enumext_anskey_env_save_keys:
  {
    \bool_lazy_and:nnT
      { \bool_if_p:N \g__enumext_store_columns_break_bool }
      { \bool_not_p:n { \l__enumext_starred_bool } }
      {
        \tl_put_left:Ne \l__enumext_store_anskey_opt_tl { ,break-col, }
      }
    \bool_lazy_and:nnT
      { \bool_not_p:n { \l__enumext_starred_bool } }
      { \int_compare_p:nNn { \g__enumext_store_item_join_int } > { 1 } }
      {
        \tl_put_left::Ne \l__enumext_store_anskey_opt_tl
          {
            ,item-join = \exp_not:V \g__enumext_store_item_join_int,
          }
       }
    \bool_if:NT \g__enumext_store_item_star_bool
      {
        \tl_put_left:Ne \l__enumext_store_anskey_opt_tl
          {
            ,item-star,
          }
        \tl_if_empty:NF \g__enumext_store_item_symbol_tl
          {
            \tl_put_left:Ne \l__enumext_store_anskey_opt_tl
              {
                ,item-sym* = \exp_not:V \g__enumext_store_item_symbol_tl,
              }
          }
        \dim_compare:nT
          {
            \g__enumext_store_item_symbol_sep_dim != \c_zero_dim
          }
          {
            \tl_put_left:Ne \l__enumext_store_anskey_opt_tl
              {
                ,item-pos* = \exp_not:V \g__enumext_store_item_symbol_sep_dim,
              }
          }
       }
  }
\cs_new_protected:Nn \__enumext_anskey_env_store:
  {
    \group_begin:
      \tl_if_empty:NTF \l__enumext_store_anskey_opt_tl
        {
          \exp_args:Ne
            \__enumext_store_anskey_code:n
              {
                \__enumext_rescan_anskey_env:n { \l__enumext_store_anskey_env_tl }
              }
        }
        {
          \keys_set_known:nV { enumext / anskey } \l__enumext_store_anskey_opt_tl
          \exp_args:Ne
            \__enumext_store_anskey_code:n
              {
                \__enumext_rescan_anskey_env:n { \l__enumext_store_anskey_env_tl }
              }
        }
    \group_end:
  }
\cs_new_protected:Nn \__enumext_anskey_env_clean_vars:
  {
    \bool_gset_false:N \g__enumext_store_columns_break_bool
    \int_gzero:N       \g__enumext_store_item_join_int
    \bool_gset_false:N \g__enumext_store_item_star_bool
    \tl_gclear:N       \g__enumext_store_item_symbol_tl
    \dim_gzero:N       \g__enumext_store_item_symbol_sep_dim
  }
%% Function internal checking answer mechanism, clean vars and undefine |anskey*| environment.
\cs_new_protected:Nn \__enumext_execute_after_env:
  {
    \int_compare:nNnT { \l__enumext_level_int } = { 0 }
      {
        \tl_if_empty:NF \g__enumext_store_name_tl
          {
            \__enumext_stop_save_ans_msg:
            \__enumext_item_answer_diff:
            \__enumext_log_global_vars:
            \__enumext_log_answer_vars:
            \bool_if:NTF \g__enumext_check_ans_key_bool
              {
                \__enumext_check_ans_show:
              }
              { \__enumext_check_ans_log: }
            \__enumext_undefine_anskey_env:
          }
        \__enumext_reset_global_vars:
      }
  }
%% Function for storing in prop list for |keyans| and |keyanspic|.
\cs_new_protected:Npn \__enumext_keyans_addto_prop:n #1
  {
    \tl_clear:N \l__enumext_store_current_label_tl
    \int_compare:nNnTF { \l__enumext_keyans_pic_level_int } = { 1 }
      {
        \tl_put_right:Ne \l__enumext_store_current_label_tl { \l__enumext_label_vi_tl }
      }
      {
        \tl_put_right:Ne \l__enumext_store_current_label_tl { \l__enumext_label_v_tl }
      }
    \tl_if_novalue:nF { #1 }
      {
        % Set save-sep
        \tl_if_empty:NF \l__enumext_store_keyans_item_opt_sep_tl
          {
            \tl_put_right:Ne \l__enumext_store_current_label_tl { \l__enumext_store_keyans_item_opt_sep_tl }
          }
        \tl_put_right:Ne \l__enumext_store_current_label_tl { #1 }
      }
    \__enumext_store_addto_prop:V \l__enumext_store_current_label_tl
  }
%% Internal label and ref function for |keyans|, |keyans*| and |keyanspic|.
\cs_new_protected:Nn \__enumext_keyans_store_ref:
  {
    \bool_if:NT \l__enumext_store_ref_key_bool
      {
        \cs_set_protected:Npn \__enumext_tmp:n ##1
          {
            \tl_set_eq:cc { l__enumext_label_copy_##1_tl } { l__enumext_label_##1_tl }
            \tl_reverse:c { l__enumext_label_copy_##1_tl }
            \tl_remove_once:cn { l__enumext_label_copy_##1_tl } { . }
            \tl_reverse:c { l__enumext_label_copy_##1_tl }
          }
        \clist_map_inline:nn { i, v, vi, vii, viii } { \__enumext_tmp:n {##1} }
        \__enumext_keyans_store_ref_aux_i:
      }
   }
\cs_new_protected:Nn \__enumext_keyans_store_ref_aux_i:
  {
    \bool_if:NT \g__enumext_starred_bool
      {
        \tl_set_eq:NN \l__enumext_label_copy_i_tl \l__enumext_label_copy_vii_tl
      }
    \int_compare:nNnT { \l__enumext_keyans_pic_level_int } = { 1 }
      {
        \tl_put_right:Ne \l__enumext_newlabel_arg_two_tl
          { \l__enumext_label_copy_i_tl . \l__enumext_label_copy_vi_tl }
      }
    \int_compare:nNnT { \l__enumext_keyans_level_int } = { 1 }
      {
        \tl_put_right:Ne \l__enumext_newlabel_arg_two_tl
          { \l__enumext_label_copy_i_tl . \l__enumext_label_copy_v_tl }
      }
    \int_compare:nNnT { \l__enumext_keyans_level_h_int } = { 1 }
      {
        \tl_put_right:Ne \l__enumext_newlabel_arg_two_tl
          { \l__enumext_label_copy_i_tl . \l__enumext_label_copy_viii_tl }
      }
    \tl_put_right:Ne \l__enumext_newlabel_arg_one_tl
      {
        \l__enumext_store_name_tl \c_colon_str
        \int_eval:n { \prop_count:c { g__enumext_ \l__enumext_store_name_tl _prop } }
      }
    \__enumext_keyans_store_ref_aux_ii:
  }
\cs_new_protected:Nn \__enumext_keyans_store_ref_aux_ii:
  {
    \tl_put_right:Ne \l__enumext_write_aux_file_tl
      {
        \__enumext_newlabel:nn
          { \exp_not:V \l__enumext_newlabel_arg_one_tl }
          { \l__enumext_newlabel_arg_two_tl }
      }
    \l__enumext_write_aux_file_tl
  }
%% Function for storing in sequence for |keyans| and |keyanspic|.
\cs_new_protected:Npn \__enumext_keyans_addto_seq:n #1
  {
    \tl_clear:N \l__enumext_store_current_label_tl
    \int_compare:nNnTF { \l__enumext_keyans_pic_level_int } = { 1 }
      {
        \tl_put_right:Ne \l__enumext_store_current_label_tl { \item \l__enumext_label_vi_tl }
      }
      {
        \tl_put_right:Ne \l__enumext_store_current_label_tl { \item \l__enumext_label_v_tl }
      }
    \tl_if_novalue:nF { #1 }
      {
        \tl_if_empty:NF \l__enumext_store_keyans_item_opt_sep_tl
          {
            \tl_put_right:Ne \l__enumext_store_current_label_tl
              {
                \l__enumext_store_keyans_item_opt_sep_tl
              }
          }
        \tl_put_right:Ne \l__enumext_store_current_label_tl { #1 }
      }
    \__enumext_keyans_addto_seq_link:
  }
\cs_new_protected:Nn \__enumext_keyans_addto_seq_link:
  {
    \bool_lazy_and:nnT
      { \bool_if_p:N \l__enumext_store_ref_key_bool }
      { \bool_if_p:N \l__enumext_hyperref_bool }
      {
        \tl_put_right:Ne \l__enumext_store_current_label_tl
          {
            \hfill \exp_not:N \hyperlink
              {
                \exp_not:V \l__enumext_newlabel_arg_one_tl
              }
              { \exp_not:V \l__enumext_mark_ref_sym_tl }
          }
      }
    \__enumext_store_addto_seq:V \l__enumext_store_current_label_tl
    \bool_if:NT \l__enumext_check_answers_bool
      {
        \int_gincr:N \g__enumext_item_anskey_int
      }
  }
%% Function for |show-ans| and |show-pos| keys for |keyans| and |keyanspic|.
\cs_new_protected:Npn \__enumext_keyans_show_left:n #1
  {
    \tl_if_novalue:nF { #1 }
      {
        \tl_set:Ne \l__enumext_store_current_opt_arg_tl { #1 }
      }
    \bool_if:NT \l__enumext_show_answer_bool
      {
        \__enumext_keyans_show_ans:
      }
    \bool_if:NT \l__enumext_show_position_bool
      {
        \__enumext_keyans_show_pos:
      }
  }
\cs_new_protected:Nn \__enumext_keyans_show_item_opt:
  {
    \tl_if_empty:NF \l__enumext_store_current_opt_arg_tl
      {
        \bool_lazy_or:nnT
          { \bool_if_p:N \l__enumext_show_answer_bool }
          { \bool_if_p:N \l__enumext_show_position_bool }
          {
            \__enumext_keyans_wrapper_opt:n { \l__enumext_store_current_opt_arg_tl } \c_space_tl
          }
      }
  }
\cs_new_protected:Nn \__enumext_keyans_show_ans:
  {
    \bool_if:NT \l__enumext_starred_bool
      {
        \dim_set_eq:NN \l__enumext_labelwidth_i_dim \l__enumext_labelwidth_vii_dim
        \dim_set_eq:NN \l__enumext_labelsep_i_dim \l__enumext_labelsep_vii_dim
      }
    \tl_put_left:Nn \l__enumext_label_v_tl
      {
        \__enumext_print_keyans_box:NN
          \l__enumext_labelwidth_i_dim \l__enumext_labelsep_i_dim
      }
  }
\cs_new_protected:Nn \__enumext_keyans_show_pos:
  {
    \bool_if:NT \l__enumext_starred_bool
      {
        \dim_set_eq:NN \l__enumext_labelwidth_i_dim \l__enumext_labelwidth_vii_dim
        \dim_set_eq:NN \l__enumext_labelsep_i_dim \l__enumext_labelsep_vii_dim
      }
    \int_compare:nNnTF { \l__enumext_keyans_pic_level_int } = { 1 }
      {
        \tl_set:Ne \l__enumext_mark_answer_sym_tl
          {
            \group_begin:
            \exp_not:N \normalfont
            \exp_not:N \footnotesize [ \int_eval:n
              {
                \prop_count:c { g__enumext_ \l__enumext_store_name_tl _prop }
              }
              ]
            \group_end:
          }
      }
      {
        \tl_set:Ne \l__enumext_mark_answer_sym_tl
          {
            \group_begin:
            \exp_not:N \normalfont
            \exp_not:N \footnotesize [ \int_eval:n
              {
                \prop_count:c { g__enumext_ \l__enumext_store_name_tl _prop } + 1
              }
              ]
            \group_end:
          }
      }
    \tl_put_left:Nn \l__enumext_label_v_tl
      {
        \__enumext_print_keyans_box:NN
          \l__enumext_labelwidth_i_dim \l__enumext_labelsep_i_dim
      }
  }
%% Internal function for |\item| whit check-answer mechanism in |enumext|.
\cs_new_protected:Npn \__enumext_default_item:n #1
  {
    \tl_if_novalue:nTF {#1}
      {
        \bool_if:NT \l__enumext_check_answers_bool
          {
            \int_gincr:N \g__enumext_item_number_int
            \bool_set_true:N \l__enumext_item_number_bool
          }
        \bool_set_true:c { l__enumext_wrap_label_ \__enumext_level: _bool }
        \__enumext_item_std:w \tl_use:c { l__enumext_fake_item_indent_ \__enumext_level: _tl }
      }
      {
        \bool_set_eq:cc
          { l__enumext_wrap_label_ \__enumext_level: _bool }
          { l__enumext_wrap_label_opt_ \__enumext_level: _bool }
        \__enumext_item_std:w [#1] \tl_use:c { l__enumext_fake_item_indent_ \__enumext_level: _tl }
      }
  }
%% Internal function for |\item*[symb][sep]| whit check-answer mechanism in |enumext|.
\cs_new_protected:Npn \__enumext_starred_item:nn #1 #2
  {
    \tl_if_novalue:nTF {#1}
      {
        \tl_gset_eq:Nc
          \g__enumext_item_symbol_aux_tl { l__enumext_item_symbol_ \__enumext_level: _tl }
      }
      {
        \tl_gset:Nn \g__enumext_item_symbol_aux_tl {#1}
      }
    \tl_if_novalue:nTF {#2}
      {
        \dim_set_eq:cc
          { l__enumext_item_symbol_sep_ \__enumext_level: _dim }
          { l__enumext_labelsep_ \__enumext_level: _dim }
      }
      {
        \dim_set:cn { l__enumext_item_symbol_sep_ \__enumext_level: _dim } {#2}
      }
    \bool_if:NT \l__enumext_check_answers_bool
      {
        \int_gincr:N \g__enumext_item_number_int
        \bool_set_true:N \l__enumext_item_number_bool
      }
    \bool_set_true:c { l__enumext_wrap_label_ \__enumext_level: _bool }
    \__enumext_item_std:w \tl_use:c { l__enumext_fake_item_indent_ \__enumext_level: _tl }
  }
%% Function for |\item*[sym][sep]| in |\makelabel| for enumext.
\cs_new_protected:Nn \__enumext_item_star_exec:
  {
    \tl_if_empty:cF { l__enumext_item_symbol_ \__enumext_level: _tl }
      {
        \mode_leave_vertical:
        \skip_horizontal:n { -\dim_use:c { l__enumext_item_symbol_sep_ \__enumext_level: _dim } }
        \hbox_overlap_left:n { \g__enumext_item_symbol_aux_tl }
        \skip_horizontal:n { \dim_use:c { l__enumext_item_symbol_sep_ \__enumext_level: _dim } }
      }
  }
%% Redefinition of |\item| for |\item*[sym][sep]| in |enumext|.
\cs_new_protected:Nn \__enumext_redefine_item:
  {
    \RenewDocumentCommand \item { s o o }
      {
        \bool_if:nTF {##1}
          {
            \__enumext_starred_item:nn {##2} {##3}
          }
          { \__enumext_default_item:n {##2} }
      }
  }
%% Redefinition of |\makelabel| for |\item| and |\item*[sym][sep]| in |enumext|.
\cs_new_protected:Nn \__enumext_make_label:
  {
    \RenewDocumentCommand \makelabel { m }
      {
        \tl_use:c { l__enumext_label_fill_left_ \__enumext_level: _tl }
        \tl_use:c { l__enumext_label_font_style_ \__enumext_level: _tl }
        \bool_if:cTF { l__enumext_wrap_label_ \__enumext_level: _bool }
          {
            \__enumext_item_star_exec:
            \use:c { __enumext_wrapper_label_ \__enumext_level: :n } { ##1 }
          }
          { ##1 }
        \tl_use:c { l__enumext_label_fill_right_ \__enumext_level: _tl }
        \tl_gclear:N \g__enumext_item_symbol_aux_tl
      }
  }
%% Add |item-sym*| and |item-sep*| keys.
\cs_set_protected:Npn \__enumext_tmp:nn #1 #2
  {
    \keys_define:nn { enumext / #1 }
      {
        item-sym* .tl_set:c  = { l__enumext_item_symbol_#2_tl },
        item-sym* .value_required:n = true,
        item-sym* .initial:n  = {$\star$},
        item-pos* .dim_set:c  = { l__enumext_item_symbol_sep_#2_dim },
        item-pos* .value_required:n = true,
      }
  }
\clist_map_inline:nn
  {
    {level-1}{i}, {level-2}{ii}, {level-3}{iii}, {level-4}{iv}, {enumext*}{vii}
  }
  { \__enumext_tmp:nn #1 }
%% Add keys |unknown| for |keyans| and |keyans*|.
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \keys_define:nn { enumext / #1 }
      {
        unknown .code:n = { \__enumext_keyans_unknown_keys:n {##1} }
      }
  }
\clist_map_inline:nn { keyans, keyans* } { \__enumext_tmp:n {#1} }
\cs_new_protected:Npn \__enumext_keyans_unknown_keys:n #1
  {
    \exp_args:NV \__enumext_keyans_unknown_keys:nn \l_keys_key_str {#1}
  }
\cs_new_protected:Npn \__enumext_keyans_unknown_keys:nn #1#2
  {
    \tl_if_blank:nTF {#2}
      {
        \msg_error:nnn { enumext } { keyans-unknown-key } {#1}
      }
      {
        \msg_error:nnnn { enumext } { keyans-unknown-key-value } {#1} {#2}
      }
  }
%% Add keys |unknown| for |enumext*|.
\keys_define:nn { enumext / enumext* }
  {
    unknown .code:n = { \__enumext_starred_unknown_keys:n {#1} }
  }
\cs_new_protected:Npn \__enumext_starred_unknown_keys:n #1
  {
    \exp_args:NV \__enumext_starred_unknown_keys:nn \l_keys_key_str {#1}
  }
\cs_new_protected:Npn \__enumext_starred_unknown_keys:nn #1#2
  {
    \tl_if_blank:nTF {#2}
      {
        \msg_error:nnn { enumext } { starred-unknown-key } {#1}
      }
      {
        \msg_error:nnnn { enumext } { starred-unknown-key-value } {#1} {#2}
      }
  }
%% Add keys |unknown| for |enumext|.
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \keys_define:nn { enumext / #1 }
      {
        unknown .code:n = { \__enumext_standar_unknown_keys:n {##1} }
      }
  }
\clist_map_inline:nn { level-1,level-2,level-3,level-4 } { \__enumext_tmp:n {#1} }
\cs_new_protected:Npn \__enumext_standar_unknown_keys:n #1
  {
    \exp_args:NV \__enumext_standar_unknown_keys:nn \l_keys_key_str {#1}
  }
\cs_new_protected:Npn \__enumext_standar_unknown_keys:nn #1#2
  {
    \tl_if_blank:nTF {#2}
      {
        \msg_error:nnn { enumext } { standar-unknown-key } {#1}
      }
      {
        \msg_error:nnnn { enumext } { standar-unknown-key-value } {#1} {#2}
      }
  }
\cs_new_protected:Npn \__enumext_keyans_default_item:n #1
  {
    \tl_if_novalue:nTF { #1 }
      {
        \bool_set_true:N \l__enumext_wrap_label_v_bool
        \__enumext_item_std:w \tl_use:N \l__enumext_fake_item_indent_v_tl
      }
      {
        \bool_set_eq:NN \l__enumext_wrap_label_v_bool \l__enumext_wrap_label_opt_v_bool
        \__enumext_item_std:w [#1] \tl_use:N \l__enumext_fake_item_indent_v_tl
      }
  }
\cs_new_protected:Npn \__enumext_keyans_starred_item:n #1
  {
    \tl_set_eq:NN \l__enumext_store_current_label_tmp_tl \l__enumext_label_v_tl
    \__enumext_keyans_show_left:n { #1 }
    \bool_set_true:N \l__enumext_wrap_label_v_bool
    \__enumext_item_std:w \tl_use:N \l__enumext_fake_item_indent_v_tl \__enumext_keyans_show_item_opt:
    \tl_set_eq:NN \l__enumext_label_v_tl \l__enumext_store_current_label_tmp_tl
    \__enumext_keyans_addto_prop:n { #1 }
    \__enumext_keyans_store_ref:
    \__enumext_keyans_addto_seq:n { #1 }
    \int_gincr:N \g__enumext_check_starred_cmd_int
  }
%% Redefine |\item| for |keyans|.
\cs_new_protected:Nn \__enumext_keyans_redefine_item:
  {
    \RenewDocumentCommand \item { s o }
      {
        \bool_if:nTF {##1}
          {
            \peek_remove_spaces:n
              {
                \__enumext_keyans_starred_item:n {##2}
              }
          }
          {
            \__enumext_keyans_default_item:n {##2}
          }
      }
  }
%% Redefine |\makelabel| for |keyans|.
\cs_new_protected:Nn \__enumext_keyans_make_label:
  {
    \RenewDocumentCommand \makelabel { m }
      {
        \tl_use:N \l__enumext_label_fill_left_v_tl
        \tl_use:N \l__enumext_label_font_style_v_tl
        \bool_if:NTF \l__enumext_wrap_label_v_bool
          {
            \__enumext_wrapper_label_v:n { ##1 }
          }
          { ##1 }
        \tl_use:N \l__enumext_label_fill_right_v_tl
      }
  }
%% Function to calc of horizontal length for all list environment.
%% #1: \l__enumext_labelwidth_X_dim     #2: \l__enumext_labelsep_X_dim
%% #3: \l__enumext_listoffset_X_dim     #4: \l__enumext_leftmargin_tmp_X_dim
%% #5: \l__enumext_leftmargin_X_dim     #6: \l__enumext_itemindent_X_dim
%% #7: \l__enumext_leftmargin_tmp_X_bool
\cs_new_protected:Npn \__enumext_calc_hspace:NNNNNNN #1 #2 #3 #4 #5 #6 #7
  {
    \dim_compare:nNnT { #1 } < { \c_zero_dim }
      {
        \msg_warning:nnnV { enumext } { width-non-positive }{ labelwidth }{ #1 }
        \dim_set:Nn #1 { \dim_abs:n { #1 } }
      }
    \dim_compare:nNnT { #2 } < { \c_zero_dim }
      {
        \msg_warning:nnnV { enumext } { width-negative }{ labelsep }{ #2 }
        \dim_set:Nn #2 { \dim_abs:n { #2 } }
      }
    \bool_if:nF #7 { \dim_set:Nn #4 { #1 + #2} }
    \dim_compare:nNnTF { #4 } < { \c_zero_dim }
      {
        \dim_set:Nn #6 { #1 + #2 - #4}
        \dim_set:Nn #5 { #1 + #2 + #3 - #6 }
      }
      {
        \dim_compare:nNnT { #4 } = { #1 + #2 }
          { \dim_set:Nn #6 { \c_zero_dim } }
        \dim_compare:nNnT { #4 } < { #1 + #2 }
          { \dim_set:Nn #6 { #1 + #2 - #4} }
        \dim_compare:nNnT { #4 } > { #1 + #2 }
          {
            \dim_set:Nn #6 { -#1 - #2 + #4}
            \dim_set:Nn #6 { #6*-1}
          }
        \dim_set:Nn #5 { #1 + #2 + #3 - #6 }
      }
  }
\cs_generate_variant:Nn \__enumext_calc_hspace:NNNNNNN { ccccccc }
%% Define "second arg" of list for |enumext| and |keyans|.
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \cs_new_protected:cpn { __enumext_list_arg_two_#1: }
      {
        \__enumext_calc_hspace:ccccccc
          { l__enumext_labelwidth_#1_dim } { l__enumext_labelsep_#1_dim }
          { l__enumext_listoffset_#1_dim } { l__enumext_leftmargin_tmp_#1_dim }
          { l__enumext_leftmargin_#1_dim } { l__enumext_itemindent_#1_dim }
          { l__enumext_leftmargin_tmp_#1_bool }
        \clist_map_inline:nn
          { labelsep, labelwidth, itemindent, leftmargin, rightmargin, listparindent }
          { \dim_set_eq:cc {####1} { l__enumext_####1_#1_dim } }
        \clist_map_inline:nn { topsep, parsep, partopsep, itemsep }
          { \skip_set_eq:cc {####1} { l__enumext_####1_#1_skip } }
        \usecounter { enumX#1 }
        \setcounter { enumX#1 } { \int_eval:n { \int_use:c { l__enumext_start_#1_int } - 1 } }
        \str_if_eq:nnTF {#1} { v }
          {
            \__enumext_keyans_redefine_item:
            \__enumext_keyans_make_label:
            \__enumext_keyans_ref:
            \__enumext_keyans_fake_item:
            \bool_if:cT { l__enumext_show_length_#1_bool }
              {
                \msg_term:nnnn { enumext } { list-lengths-not-nested } { v } { keyans }
              }
          }
          {
            \__enumext_redefine_item:
            \__enumext_make_label:
            \__enumext_standar_ref:
            \__enumext_fake_item:
            \bool_if:cT { l__enumext_show_length_#1_bool }
              {
                \msg_term:nnne { enumext } { list-lengths } {#1} { \int_use:N \l__enumext_level_int }
              }
          }
      }
  }
\clist_map_inline:nn { i, ii, iii, iv, v } { \__enumext_tmp:n {#1} }
%% Define "second arg" of list for |enumext*| and |keyans*|.
\cs_set_protected:Npn \__enumext_tmp:n #1
  {
    \cs_new_protected:cpn { __enumext_list_arg_two_#1: }
      {
        \bool_set_true:c { l__enumext_leftmargin_tmp_#1_bool }
        \dim_zero:c { l__enumext_leftmargin_tmp_#1_dim }
        \__enumext_calc_hspace:ccccccc
          { l__enumext_labelwidth_#1_dim } { l__enumext_labelsep_#1_dim }
          { l__enumext_listoffset_#1_dim } { l__enumext_leftmargin_tmp_#1_dim }
          { l__enumext_leftmargin_#1_dim } { l__enumext_itemindent_#1_dim }
          { l__enumext_leftmargin_tmp_#1_bool }
        \clist_map_inline:nn
          { labelsep, labelwidth, itemindent, leftmargin, rightmargin, listparindent }
          { \dim_set_eq:cc {####1} { l__enumext_####1_#1_dim } }
        \clist_map_inline:nn { topsep, parsep, partopsep, itemsep }
          { \skip_set_eq:cc {####1} { l__enumext_####1_#1_skip } }
        \skip_set_eq:Nc \parsep  { l__enumext_itemsep_#1_skip }
        \skip_zero:N \partopsep
        \usecounter { enumX#1 }
        \setcounter { enumX#1 } { \int_eval:n { \int_use:c { l__enumext_start_#1_int } - 1 } }
        \__enumext_starred_ref:
        \str_if_eq:nnTF {#1} { vii }
          {
            \__enumext_fake_item_vii:
            \bool_if:cT { l__enumext_show_length_vii_bool }
              { \msg_term:nnnn { enumext } { list-lengths-not-nested } { vii } { enumext* } }
          }
          {
            \__enumext_fake_item_viii:
            \bool_if:cT { l__enumext_show_length_#1_bool }
              { \msg_term:nnnn { enumext } { list-lengths-not-nested } { #1 } { keyans* } }
          }
      }
  }
\clist_map_inline:nn { vii, viii } { \__enumext_tmp:n {#1} }
%% Definition of |enumext| environment.
\NewDocumentEnvironment{enumext}{ O{} }
  {
    \__enumext_safe_exec:
    \__enumext_parse_keys:n {#1}
    \__enumext_before_list:
    \__enumext_start_store_level:
    \__enumext_start_list:nn
      { \tl_use:c { l__enumext_label_ \__enumext_level: _tl } }
      {
        \use:c { __enumext_list_arg_two_ \__enumext_level: : }
        \__enumext_before_keys_exec:
      }
    \__enumext_set_item_width:
    \__enumext_after_args_exec:
  }
  {
    \__enumext_stop_list:
    \__enumext_stop_store_level:
    \__enumext_after_list:
  }
%% Set |\itemwidth| for |enumext|.
\cs_new_protected:Nn \__enumext_set_item_width:
  {
    \dim_set:Nn \itemwidth
      {
        \linewidth
      }
    \dim_compare:nT
      {
        \dim_use:c { l__enumext_listoffset_ \__enumext_level: _dim } != \c_zero_dim
      }
      {
        \dim_sub:Nn \itemwidth
          {
            \dim_use:c { l__enumext_listoffset_ \__enumext_level: _dim }
          }
      }
  }
%% Safe exec for |enumext|.
\cs_new_protected:Nn \__enumext_safe_exec:
  {
    \__enumext_internal_mini_page:
    \__enumext_is_not_nested:
    \int_incr:N \l__enumext_level_int
    \int_compare:nNnT { \l__enumext_level_int } > { 4 }
      { \msg_fatal:nn { enumext } { list-too-deep } }
    \bool_set_true:N \l__enumext_standar_bool
    \bool_set_false:N \l__enumext_starred_bool
    \__enumext_is_on_first_level:
  }
%% Parse |key=val| for enumext: Set default series and store keys in seq-name for \printkeyans.
\cs_new_protected:Npn \__enumext_parse_keys:n #1
  {
    \tl_if_novalue:nF {#1}
      {
        \str_clear:N \l__enumext_series_str
        \int_compare:nNnTF { \l__enumext_level_int } = { 1 }
          {
            \keys_set:nn { enumext / level-1 } {#1}
            \__enumext_parse_series:n {#1}
            \__enumext_nested_base_line_fix:
          }
          {
            \exp_args:Ne \keys_set:nn
              { enumext / level-\int_use:N \l__enumext_level_int } {#1}
          }
        \__enumext_store_active_keys:n {#1}
      }
  }
%% Save level-structure in sequence for |save-ans| key in enumext.
\cs_new_protected:Nn \__enumext_start_store_level:
  {
    \bool_lazy_all:nT
      {
        { \bool_if_p:N \l__enumext_store_active_bool }
        { \bool_not_p:n { \l__enumext_keyans_env_bool } }
        { \bool_if_p:N \g__enumext_standar_bool }
      }
      {
        \int_compare:nNnT { \l__enumext_level_int } > { 1 }
          {
            \bool_set_true:c { l__enumext_store_upper_level_ \__enumext_level: _bool }
            \__enumext_store_level_open:
          }
      }
    \bool_lazy_all:nT
      {
        { \bool_if_p:N \l__enumext_store_active_bool }
        { \bool_not_p:n { \l__enumext_keyans_env_bool } }
        { \int_compare_p:nNn { \l__enumext_level_h_int } = { 1 } }
      }
      {
        \int_compare:nNnT { \l__enumext_level_int } > { 0 }
          {
            \bool_set_true:c { l__enumext_store_upper_level_ \__enumext_level: _bool }
            \__enumext_store_level_open:
          }
      }
  }
\cs_new_protected:Nn \__enumext_stop_store_level:
  {
    \bool_if:cT { l__enumext_store_upper_level_ \__enumext_level: _bool }
      {
        \__enumext_store_level_close:
      }
  }
\cs_new_protected:Nn \__enumext_before_list:
  {
    \__enumext_vspace_above:
    \__enumext_before_args_exec:
    \__enumext_check_ans_active:
%% Set |mini-env| width value.
    \dim_compare:nNnT
      { \dim_use:c { l__enumext_minipage_right_ \__enumext_level: _dim } } > { \c_zero_dim }
      {
        \dim_set:cn { l__enumext_minipage_left_ \__enumext_level: _dim }
          {
            \linewidth
            - \dim_use:c { l__enumext_minipage_right_ \__enumext_level: _dim }
            - \dim_use:c { l__enumext_minipage_hsep_ \__enumext_level: _dim }
          }
%% Use internal minipage with |\nointerlineskip| and |\addvspace| here
        \bool_set_true:c { l__enumext_minipage_active_ \__enumext_level: _bool }
        \int_gincr:N \g__enumext_minipage_stat_int
        \__enumext_minipage_add_space:
        \__enumext_mini_page{ \dim_use:c { l__enumext_minipage_left_ \__enumext_level: _dim } }
      }
    \__enumext_multicols_start:
  }
\cs_new_protected:Nn \__enumext_multicols_start:
  {
    \int_compare:nNnT
      { \int_use:c { l__enumext_columns_ \__enumext_level: _int } } > { 1 }
      {
        \dim_compare:nNnT
          { \dim_use:c { l__enumext_columns_sep_ \__enumext_level: _dim } } = { \c_zero_dim }
          {
            \dim_set:cn { l__enumext_columns_sep_ \__enumext_level: _dim }
              {
                ( \dim_use:c { l__enumext_labelwidth_ \__enumext_level: _dim }
                  + \dim_use:c { l__enumext_labelsep_ \__enumext_level: _dim }
                ) / \int_use:c { l__enumext_columns_ \__enumext_level: _int }
                - \dim_use:c { l__enumext_listoffset_ \__enumext_level: _dim }
              }
          }
        \dim_set_eq:Nc \columnsep { l__enumext_columns_sep_ \__enumext_level: _dim  }
        \int_compare:nNnT { \l__enumext_level_int } > { 1 }
          {
            \dim_zero:N \columnseprule
          }
        \bool_if:cF { l__enumext_minipage_active_ \__enumext_level: _bool }
          {
            \skip_zero:N \multicolsep
            \__enumext_multi_addvspace:
          }
        \raggedcolumns
        \begin{multicols}{ \int_use:c { l__enumext_columns_ \__enumext_level: _int } }
      }
  }
\cs_new_protected:Nn \__enumext_multicols_stop:
  {
    \int_compare:nNnT
      { \int_use:c { l__enumext_columns_ \__enumext_level: _int } } > { 1 }
      {
        \end{multicols}
        \__enumext_unskip_unkern:
        \__enumext_unskip_unkern:
        \par\addvspace{ \skip_use:c { l__enumext_multicols_below_ \__enumext_level: _skip } }
      }
  }
\cs_new_protected:Nn \__enumext_after_list:
  {
    \bool_if:cTF { l__enumext_minipage_active_ \__enumext_level: _bool }
      {
        \int_compare:nNnT { \g__enumext_minipage_stat_int } = { 1 }
          {
            \msg_warning:nn { enumext } { missing-miniright }
            \miniright
          }
        \int_gzero:N \g__enumext_minipage_stat_int
        \__enumext_unskip_unkern: % remove topsep + [partopsep]
        \end__enumext_mini_page
      }
      {
        \__enumext_multicols_stop:
      }
    \__enumext_after_stop_list:
    \__enumext_check_ans_key_hook:
    \__enumext_vspace_below:
    \bool_set_false:N \l__enumext_standar_bool
    \__enumext_resume_save_counter:
  }
%% Execute |check-ans| key out of |enumext|.
\__enumext_after_env:nn {enumext} { \__enumext_execute_after_env: }
%% Definition of |keyans| environment.
\NewDocumentEnvironment{keyans}{ O{} }
  {
    \__enumext_keyans_safe_exec:
    \__enumext_keyans_parse_keys:n {#1}
    \__enumext_before_list_v:
    \__enumext_start_list:nn
      { \tl_use:N \l__enumext_label_v_tl }
      {
        \__enumext_list_arg_two_v:
        \__enumext_before_keys_exec_v:
      }
    \__enumext_keyans_set_item_width:
    \__enumext_after_args_exec_v:
  }
  {
    \__enumext_check_starred_cmd:n { item }
    \__enumext_stop_list:
    \__enumext_after_list_v:
  }
\cs_new_protected:Nn \__enumext_keyans_set_item_width:
  {
    \dim_set:Nn \itemwidth
      {
        \linewidth
      }
    \dim_compare:nT
      {
        \l__enumext_listoffset_v_dim != \c_zero_dim
      }
      {
        \dim_sub:Nn \itemwidth
          {
            \l__enumext_listoffset_v_dim
          }
      }
  }
%% Function for check nested level in |keyans|.
\cs_new_protected:Nn \__enumext_keyans_safe_exec:
  {
    \bool_if:NF \l__enumext_store_active_bool
      {
        \msg_error:nnnn { enumext } { wrong-place }{ keyans }{ save-ans }
      }
    \int_incr:N \l__enumext_keyans_level_int
    \bool_set_true:N \l__enumext_keyans_env_bool
    \__enumext_keyans_name_and_start:
    % Set false for interfering with enumext nested in keyans (yes, its possible and crayze)
    \bool_set_false:N \l__enumext_store_active_bool
    \int_compare:nNnT { \l__enumext_keyans_level_int } > { 1 }
      {
        \msg_error:nn { enumext } { keyans-nested }
      }
    \int_compare:nNnT { \l__enumext_level_int } > { 1 }
      {
        \msg_error:nn { enumext } { keyans-wrong-level }
      }
  }
%% Function for parse |key=val| in |keyans|.
\cs_new_protected:Npn \__enumext_keyans_parse_keys:n #1
  {
    \keys_set:nn { enumext / keyans } {#1}
  }
%% Iternal functions for |keyans| environment.
\cs_new_protected:Nn \__enumext_before_list_v:
  {
    \__enumext_vspace_above_v:
    \__enumext_before_args_exec_v:
    \dim_compare:nNnT { \l__enumext_minipage_right_v_dim } > { \c_zero_dim }
      {
        \dim_set:Nn \l__enumext_minipage_left_v_dim
          {
            \linewidth - \l__enumext_minipage_right_v_dim - \l__enumext_minipage_hsep_v_dim
          }
        \bool_set_true:N \l__enumext_minipage_active_v_bool
        \int_gincr:N \g__enumext_minipage_stat_int
        \__enumext_keyans_minipage_add_space:
        \__enumext_mini_page{ \l__enumext_minipage_left_v_dim }
      }
    \__enumext_keyans_multicols_start:
  }
\cs_new_protected:Nn \__enumext_keyans_multicols_start:
  {
    \int_compare:nNnT { \l__enumext_columns_v_int } > { 1 }
      {
        \dim_compare:nNnT { \l__enumext_columns_sep_v_dim } = { \c_zero_dim }
          {
            \dim_set:Nn \l__enumext_columns_sep_v_dim
              {
                (
                  \l__enumext_labelwidth_v_dim + \l__enumext_labelsep_v_dim
                ) / \l__enumext_columns_v_int
               - \l__enumext_listoffset_v_dim
              }
          }
        \dim_set_eq:NN \columnsep \l__enumext_columns_sep_v_dim
        \dim_zero:N \columnseprule % no rule here
        \bool_if:NF \l__enumext_minipage_active_v_bool
          {
            \skip_zero:N \multicolsep
            \__enumext_keyans_multi_addvspace:
          }
        \raggedcolumns
        \begin{multicols}{ \l__enumext_columns_v_int }
      }
  }
\cs_new_protected:Nn \__enumext_keyans_multicols_stop:
  {
    \int_compare:nNnT { \l__enumext_columns_v_int } > { 1 }
      {
        \end{multicols}
        \__enumext_unskip_unkern:
        \__enumext_unskip_unkern:
        \par\addvspace{ \l__enumext_multicols_below_v_skip }
      }
  }
\cs_new_protected:Nn \__enumext_after_list_v:
  {
    \bool_if:NTF \l__enumext_minipage_active_v_bool
      {
        \int_compare:nNnT { \g__enumext_minipage_stat_int } = { 1 }
          {
            \msg_warning:nn { enumext } { missing-miniright }
            \miniright
          }
        \int_gzero:N \g__enumext_minipage_stat_int
        \__enumext_unskip_unkern: % remove topsep + [partopsep]
        \end__enumext_mini_page
        \par\addvspace{ \l__enumext_minipage_after_skip }
      }
      {
        \__enumext_keyans_multicols_stop:
      }
    \bool_set_false:N \l__enumext_keyans_env_bool
    \__enumext_after_stop_list_v:
    \__enumext_vspace_below_v:
  }
%% Implement socket for tagging support in |enumext*| and |keyans*|.
\socket_new:nn {tagsupport/enumext/starred}{ 1 }
\socket_new_plug:nnn {tagsupport/enumext/starred} {start-list-tags}
  {
    \ResumeTagging{#1}
    \tag_struct_begin:n {tag=LI}
    \tag_struct_begin:n {tag=Lbl}
    \tag_mc_begin:n {tag=Lbl}
  }
\socket_new_plug:nnn {tagsupport/enumext/starred} {stop-start-tags}
  {
    \tag_mc_end:% close {tag=Lbl}
    \tag_struct_end:% close {tag=Lbl}
    \tag_struct_begin:n {tag=LBody}
    \tag_struct_begin:n {tag=text-unit}
    \tag_struct_begin:n {tag=text}
  }
\socket_new_plug:nnn {tagsupport/enumext/starred} {stop-list-tags}
  {
    \tag_struct_end:% close {tag=text}
    \tag_struct_end:% close {tag=text-unit}
    \tag_struct_end:% close {tag=LBody}
    \tag_struct_end:% close {tag=LI}
    \SuspendTagging{#1}
  }
%% Wrap socket in conditional functions for tagging |enumext*| and |keyans*|.
\cs_new_protected_nopar:Npn \__enumext_start_list_tag:n #1
  {
    \IfDocumentMetadataTF
      {
        \socket_assign_plug:nn {tagsupport/enumext/starred} {start-list-tags}
        \socket_use:n {tagsupport/enumext/starred} {#1}
      }
      {}
   }
\cs_new_protected_nopar:Nn \__enumext_stop_start_list_tag:
  {
    \IfDocumentMetadataTF
      {
        \socket_assign_plug:nn {tagsupport/enumext/starred} {stop-start-tags}
        \socket_use:nn {tagsupport/enumext/starred} { }
      }
      {}
   }
\cs_new_protected_nopar:Npn \__enumext_stop_list_tag:n #1
  {
    \IfDocumentMetadataTF
      {
        \socket_assign_plug:nn {tagsupport/enumext/starred} {stop-list-tags}
        \socket_use:nn {tagsupport/enumext/starred} {#1}
      }
      {}
   }
%% Implement socket for tagging support in |keyanspic|.
\socket_new:nn {tagsupport/enumext/keyanspic}{ 1 }
\socket_new_plug:nnn {tagsupport/enumext/keyanspic} {start-list-tags}
  {
    \ResumeTagging{#1}
    \tag_start:n {#1}
    \tag_struct_begin:n {tag=LI}
    \tag_struct_begin:n {tag=Lbl}
    \tag_mc_begin:n {tag=Lbl}
  }
\socket_new_plug:nnn {tagsupport/enumext/keyanspic} {stop-start-tags}
  {
    \tag_mc_end:
    \tag_struct_end:n {tag=Lbl}
    \tag_struct_begin:n {tag=LBody}
    \tag_struct_begin:n {tag=text-unit}
    \tag_struct_begin:n {tag=text}
    \tag_mc_begin:n {tag=text}
  }
\socket_new_plug:nnn {tagsupport/enumext/keyanspic} {stop-list-tags}
  {
    \tag_mc_end:
    \tag_struct_end:n {tag=text-unit}
    \tag_struct_end:n {tag=text}
    \tag_struct_end:n {tag=LBody}
    \tag_struct_end:n {tag=LI}
    \tag_stop:n {#1}
    \SuspendTagging{#1}
  }
%% Wrap socket in conditional functions for tagging |keyanspic|.
\cs_new_protected_nopar:Npn \__enumext_anspic_start_list_tag:n #1
  {
    \IfDocumentMetadataTF
      {
        \socket_assign_plug:nn {tagsupport/enumext/keyanspic} {start-list-tags}
        \socket_use:n {tagsupport/enumext/keyanspic} {#1}
      }
      {}
   }
\cs_new_protected_nopar:Nn \__enumext_anspic_stop_start_list_tag:
  {
    \IfDocumentMetadataTF
      {
        \socket_assign_plug:nn {tagsupport/enumext/keyanspic} {stop-start-tags}
        \socket_use:nn {tagsupport/enumext/keyanspic} { }
      }
      {}
   }
\cs_new_protected_nopar:Npn \__enumext_anspic_stop_list_tag:n #1
  {
    \IfDocumentMetadataTF
      {
        \socket_assign_plug:nn {tagsupport/enumext/keyanspic} {stop-list-tags}
        \socket_use:nn {tagsupport/enumext/keyanspic} {#1}
      }
      {}
   }
%% Define |\anspic| for |keyanspic|.
\NewDocumentCommand \anspic { s o +m }
  {
    \bool_if:NF \l__enumext_store_active_bool
      {
        \msg_error:nnnn { enumext } { wrong-place }{ keyanspic }{ save-ans }
      }
    \int_compare:nNnT { \l__enumext_level_int } > { 1 }
      {
        \msg_error:nn { enumext } { keyanspic-wrong-level }
      }
    \int_compare:nNnT { \l__enumext_keyans_level_int } = { 1 }
      {
        \msg_error:nnnn { enumext } { command-wrong-place }{ anspic }{ keyans }
      }
    \seq_put_right:Nn \l__enumext_keyans_pic_body_seq
      {
        \__enumext_keyans_anspic_code:nnn { #1 } { #2 } { #3 }
      }
  }
%% Internal code for |\anspic|.
\str_new:N \l__enumext_keyans_pic_label_pos_str
\tl_new:N \l__enumext_anspic_body_arg_tl
\bool_new:N \l__enumext_keyans_pic_star_bool
\cs_new_protected:Npn \__enumext_keyans_anspic_label:nnn #1 #2 #3
  {
    \tl_set:Nn \l__enumext_anspic_body_arg_tl { #3 }
    \stepcounter { enumXvi }
    \bool_if:nT { #1 }
      {
        \__enumext_keyans_addto_prop:n { #2 }
        \__enumext_keyans_store_ref:
        \__enumext_keyans_addto_seq:n { #2 }
        \int_gincr:N \g__enumext_check_starred_cmd_int
        \bool_lazy_or:nnT
          { \bool_if_p:N \l__enumext_show_answer_bool }
          { \bool_if_p:N \l__enumext_show_position_bool }
          {
            \tl_set_eq:NN \l__enumext_label_v_tl \l__enumext_label_vi_tl
            \__enumext_keyans_show_left:n { #2 }
            \tl_set_eq:NN \l__enumext_label_vi_tl \l__enumext_label_v_tl
          }
      }
    % Using minipage width here
    \makebox[ \l__enumext_keyans_pic_width_dim ][ c ]
      {
        \tl_use:N \l__enumext_label_font_style_v_tl
        \__enumext_wrapper_label_v:n { \l__enumext_label_vi_tl } \__enumext_keyans_show_item_opt:
      }
  }
\cs_new_protected:Nn \__enumext_keyans_anspic_code:nnn
  {
    \__enumext_anspic_start_list_tag:n {keyanspic}
    \__enumext_keyans_anspic_label:nnn { #1 } { #2 } { #3 }
    \__enumext_anspic_stop_start_list_tag:
    \\ #3
    \__enumext_anspic_stop_list_tag:n {keyanspic}
  }
%% Define |keyanspic| environment.
\NewDocumentEnvironment{keyanspic}{ s o }
  {
    \__enumext_keyans_pic_safe_exec:
    \begin{list} { } { \__enumext_keyans_pic_arg_two: }
    \SuspendTagging{list} % non op in LaTeX2e
    \item[] \scan_stop:
    % paranoia
    \RenewDocumentCommand \item {}
      {
        \msg_error:nn { enumext } { keyanspic-item-cmd }
      }
    \IfDocumentMetadataTF
      {
        \tagpdfparaOff
        \SuspendTagging{keyanspic} % non op in LaTeX2e
      } { }
    \vspace { \l__enumext_keyans_pic_above_skip }
  }
  {
    \IfDocumentMetadataTF
      {
        \tag_start:n {keyanspic}
        \tag_struct_begin:n {tag=L,attribute=enumerate}
      }{ }
    \bool_if:nTF { #1 }
      {
        \bool_set_true:N \l__enumext_keyans_pic_star_bool
        \str_set:Nn \l__enumext_keyans_pic_label_pos_str { t }
      }
      {
        \str_set:Nn \l__enumext_keyans_pic_label_pos_str { b }
      }
    \tl_if_novalue:nTF { #2 }
      {
        \__enumext_keyans_pic_do:e { \seq_count:N \l__enumext_keyans_pic_body_seq }
      }
      { \__enumext_keyans_pic_do:n { #2 } }
    \IfDocumentMetadataTF { \tag_stop:n {keyanspic} } { }
    \end{list}
    \IfDocumentMetadataTF { \tag_struct_end: } { }
    \__enumext_check_starred_cmd:n { anspic }
    \setcounter { enumXvi } { 0 }
    \vspace { \l__enumext_topsep_v_skip }
    %\bool_set_false:N \l__enumext_store_active_bool
  }
%% Internal code for |keyanspic| environment.
\cs_new_protected:Nn \__enumext_keyans_pic_safe_exec:
  {
    \int_incr:N \l__enumext_keyans_pic_level_int
    \int_compare:nNnT { \l__enumext_keyans_pic_level_int } > { 1 }
      {
        \msg_error:nn { enumext } { keyanspic-nested }
      }
    \__enumext_keyans_name_and_start:
  }
\cs_new_protected:Npn \__enumext_keyans_pic_skip_abs:N #1
  {
    \dim_compare:nNnT { #1 } < { 0pt }
      { \skip_set:Nn #1 { -#1 } }
  }
\cs_new_protected:Nn \__enumext_keyans_pic_arg_two:
  {
    \bool_set_false:N \l__enumext_leftmargin_tmp_v_bool
    \__enumext_list_arg_two_v:
    \skip_add:Nn \parsep { \itemsep }
    \dim_add:Nn  \leftmargin { -\labelwidth - \labelsep }
    \dim_zero:N  \labelwidth
    \dim_zero:N  \listparindent
    \dim_zero:N  \labelsep
    \skip_zero:N \partopsep
    \skip_zero:N \itemsep
    \__enumext_keyans_pic_skip_abs:N \parsep
    \skip_set:Nn \l__enumext_keyans_pic_above_skip
      {
        \box_dp:N \strutbox
        + \l__enumext_topsep_v_skip
        - \parsep
      }
  }
\cs_new_protected:Nn \__enumext_keyans_pic_do:n
  {
    \clist_map_function:nN { #1 } \__enumext_keyans_pic_row:n
  }
\cs_generate_variant:Nn \__enumext_keyans_pic_do:n { e }
\cs_new_protected:Nn \__enumext_keyans_pic_row:n
  {
    \dim_set:Nn \l__enumext_keyans_pic_width_dim { \linewidth / #1 }
    \int_set:Nn \l__enumext_keyans_pic_above_int { \l__enumext_keyans_pic_below_int }
    \int_set:Nn \l__enumext_keyans_pic_below_int { \l__enumext_keyans_pic_above_int + #1 }
    \int_step_inline:nnn
      { \l__enumext_keyans_pic_above_int + 1 }
      { \l__enumext_keyans_pic_below_int }
      {
        \IfDocumentMetadataTF { \tag_stop:n {minipage} } { }
        \begin{minipage}[ \l__enumext_keyans_pic_label_pos_str ]{ \l__enumext_keyans_pic_width_dim }
          \centering
          \seq_item:Nn \l__enumext_keyans_pic_body_seq { ##1 }
        \end{minipage}
        \IfDocumentMetadataTF { \tag_start:n {minipage} } { }
      }
    \par
  }
%% Redefining \footnote.
\cs_new_protected:Nn \__enumext_footnotetext:nn
  {
    \footnotetext[#1]{#2}
  }
\cs_new_protected:Nn \__enumext_renew_footnote:
  {
    \seq_gclear:N \g__enumext_footnote_arg_seq
    \seq_gclear:N \g__enumext_footnote_int_seq
    \RenewDocumentCommand \footnote { o +m }
      {
        \tl_if_novalue:nTF {##1}
          {
            \stepcounter{footnote}
            \int_gset_eq:Nc \g__enumext_footnote_int { c@footnote }
          }
          {
            \int_gset:Nn \g__enumext_footnote_int { ##1 }
          }
        \footnotemark [ \g__enumext_footnote_int ]
        \seq_gput_right:Nn \g__enumext_footnote_arg_seq { ##2 }
        \seq_gput_right:NV \g__enumext_footnote_int_seq \g__enumext_footnote_int
     }
  }
\cs_new_protected:Nn \__enumext_print_footnote:
  {
    \seq_if_empty:NF \g__enumext_footnote_int_seq
      {
        \seq_map_pairwise_function:NNN
          \g__enumext_footnote_int_seq
          \g__enumext_footnote_arg_seq
          \__enumext_footnotetext:nn
      }
  }
%% Define default item width (columns width) for |enumext*| and |keyans*|.
\cs_new_protected:Nn \__enumext_starred_columns_set_vii:
  {
    \dim_compare:nNnT { \l__enumext_columns_sep_vii_dim } = { \c_zero_dim }
      {
        \dim_set:Nn \l__enumext_columns_sep_vii_dim
          {
            ( \l__enumext_labelwidth_vii_dim + \l__enumext_labelsep_vii_dim )
            / \l__enumext_columns_vii_int
          }
      }
    \int_set:Nn \l__enumext_tmpa_vii_int { \l__enumext_columns_vii_int - 1 }
    \dim_set:Nn \l__enumext_item_width_vii_dim
      {
        ( \linewidth - \l__enumext_columns_sep_vii_dim * \l__enumext_tmpa_vii_int )
        / \l__enumext_columns_vii_int
        - \l__enumext_labelwidth_vii_dim
        - \l__enumext_labelsep_vii_dim
      }
    \dim_compare:nNnT { \l__enumext_rightmargin_vii_dim } > { \c_zero_dim }
      {
        \dim_sub:Nn \l__enumext_item_width_vii_dim
          {
            ( \l__enumext_rightmargin_vii_dim * \l__enumext_tmpa_vii_int )
            / \l__enumext_columns_vii_int
          }
        \dim_add:Nn \l__enumext_columns_sep_vii_dim
          {
            \l__enumext_rightmargin_vii_dim
          }
      }
  }
\cs_new_protected:Nn \__enumext_starred_columns_set_viii:
  {
    \dim_compare:nNnT { \l__enumext_columns_sep_viii_dim } = { \c_zero_dim }
      {
        \dim_set:Nn \l__enumext_columns_sep_viii_dim
          {
            ( \l__enumext_labelwidth_viii_dim + \l__enumext_labelsep_viii_dim )
            / \l__enumext_columns_viii_int
          }
      }
    \int_set:Nn \l__enumext_tmpa_viii_int { \l__enumext_columns_viii_int - 1 }
    \dim_set:Nn \l__enumext_item_width_viii_dim
      {
        ( \linewidth - \l__enumext_columns_sep_viii_dim * \l__enumext_tmpa_viii_int )
        / \l__enumext_columns_viii_int
        - \l__enumext_labelwidth_viii_dim
        - \l__enumext_labelsep_viii_dim
      }
    \dim_compare:nNnT { \l__enumext_rightmargin_viii_dim } > { \c_zero_dim }
      {
        \dim_sub:Nn \l__enumext_item_width_viii_dim
          {
            ( \l__enumext_rightmargin_viii_dim * \l__enumext_tmpa_vii_int )
            / \l__enumext_columns_viii_int
          }
        \dim_add:Nn \l__enumext_columns_sep_viii_dim
          {
            \l__enumext_rightmargin_viii_dim
          }
      }
  }
%% Set width for joined item's for |enumext*| and |keyans*|.
\cs_new_protected:Npn \__enumext_starred_joined_item_vii:n #1
  {
    \int_set:Nn \l__enumext_joined_item_vii_int {#1}
    \int_compare:nNnT { \l__enumext_joined_item_vii_int } > { \l__enumext_columns_vii_int }
      {
        \msg_warning:nnee { enumext } { item-joined }
          { \int_use:N \l__enumext_joined_item_vii_int }
          { \int_use:N \l__enumext_columns_vii_int }
        \int_set:Nn \l__enumext_joined_item_vii_int
          {
            \l__enumext_columns_vii_int - \l__enumext_item_column_pos_vii_int + 1
          }
      }
    \int_compare:nNnT
      { \l__enumext_joined_item_vii_int }
        >
      { \l__enumext_columns_vii_int - \l__enumext_item_column_pos_vii_int + 1 }
      {
        \msg_warning:nnee { enumext } { item-joined-columns }
          { \int_use:N \l__enumext_joined_item_vii_int }
          {
            \int_eval:n
              { \l__enumext_columns_vii_int - \l__enumext_item_column_pos_vii_int + 1 }
          }
        \int_set:Nn \l__enumext_joined_item_vii_int
          {
            \l__enumext_columns_vii_int - \l__enumext_item_column_pos_vii_int + 1
          }
      }
    \int_compare:nNnTF { \l__enumext_joined_item_vii_int } > { 1 }
      {
        \int_set_eq:NN \l__enumext_joined_item_aux_vii_int \l__enumext_joined_item_vii_int
        \int_decr:N \l__enumext_joined_item_aux_vii_int
        \int_add:Nn \l__enumext_item_column_pos_vii_int { \l__enumext_joined_item_aux_vii_int }
        \int_gadd:Nn \g__enumext_item_count_all_vii_int { \l__enumext_joined_item_aux_vii_int }
        \dim_set:Nn \l__enumext_joined_width_vii_dim
          {
            \l__enumext_item_width_vii_dim * \l__enumext_joined_item_vii_int
            + (  \l__enumext_labelwidth_vii_dim + \l__enumext_labelsep_vii_dim
               + \l__enumext_columns_sep_vii_dim
              )*\l__enumext_joined_item_aux_vii_int
          }
        \dim_set_eq:NN \itemwidth \l__enumext_joined_width_vii_dim
      }
      {
        \dim_set_eq:NN \l__enumext_joined_width_vii_dim \l__enumext_item_width_vii_dim
        \dim_set_eq:NN \itemwidth \l__enumext_item_width_vii_dim
      }
  }
\cs_new_protected:Npn \__enumext_starred_joined_item_viii:n #1
  {
    \int_set:Nn \l__enumext_joined_item_viii_int {#1}
    \int_compare:nNnT { \l__enumext_joined_item_viii_int } > { \l__enumext_columns_viii_int }
      {
        \msg_warning:nnee { enumext } { item-joined }
          { \int_use:N \l__enumext_joined_item_viii_int }
          { \int_use:N \l__enumext_columns_viii_int }
        \int_set:Nn \l__enumext_joined_item_viii_int
          {
            \l__enumext_columns_viii_int - \l__enumext_item_column_pos_viii_int + 1
          }
      }
    \int_compare:nNnT
      { \l__enumext_joined_item_viii_int }
        >
      { \l__enumext_columns_viii_int - \l__enumext_item_column_pos_viii_int + 1 }
      {
        \msg_warning:nnee { enumext } { item-joined-columns }
          { \int_use:N \l__enumext_joined_item_viii_int }
          {
            \int_eval:n
              { \l__enumext_columns_viii_int - \l__enumext_item_column_pos_viii_int + 1 }
          }
        \int_set:Nn \l__enumext_joined_item_viii_int
          {
            \l__enumext_columns_viii_int - \l__enumext_item_column_pos_viii_int + 1
          }
      }
    \int_compare:nNnTF { \l__enumext_joined_item_viii_int } > { 1 }
      {
        \int_set_eq:NN \l__enumext_joined_item_aux_viii_int \l__enumext_joined_item_viii_int
        \int_decr:N \l__enumext_joined_item_aux_viii_int
        \int_add:Nn \l__enumext_item_column_pos_viii_int { \l__enumext_joined_item_aux_viii_int }
        \int_gadd:Nn \g__enumext_item_count_all_viii_int { \l__enumext_joined_item_aux_viii_int }
        \dim_set:Nn \l__enumext_joined_width_viii_dim
          {
            \l__enumext_item_width_viii_dim * \l__enumext_joined_item_viii_int
            + ( \l__enumext_labelwidth_viii_dim + \l__enumext_labelsep_viii_dim
                + \l__enumext_columns_sep_viii_dim
              )*\l__enumext_joined_item_aux_viii_int
          }
        \dim_set_eq:NN \itemwidth \l__enumext_joined_width_viii_dim
      }
      {
        \dim_set_eq:NN \l__enumext_joined_width_viii_dim \l__enumext_item_width_viii_dim
        \dim_set_eq:NN \itemwidth \l__enumext_item_width_viii_dim
      }
  }
%% Start support for |mini-env| key in |enumext*| environment
\cs_new_protected:Nn \__enumext_start_mini_vii:
  {
    \dim_compare:nNnT { \l__enumext_minipage_right_vii_dim } > { \c_zero_dim }
      {
        \dim_set:Nn \l__enumext_minipage_left_vii_dim
          {
            \linewidth
            - \l__enumext_minipage_right_vii_dim
            - \l__enumext_minipage_hsep_vii_dim
          }
        \bool_set_true:N \l__enumext_minipage_active_vii_bool
        \dim_gset_eq:NN
          \g__enumext_minipage_right_vii_dim
          \l__enumext_minipage_right_vii_dim
        \__enumext_mini_addvspace_vii:
        \nointerlineskip\noindent
        \__enumext_mini_page{ \l__enumext_minipage_left_vii_dim }
      }
   }
%% Stop support for |mini-env| key in |enumext*| environment
\cs_new_protected:Nn \__enumext_stop_mini_vii:
  {
    \bool_if:NT \l__enumext_minipage_active_vii_bool
      {
        \end__enumext_mini_page
        \hfill
        \bool_gset_true:N \g__enumext_minipage_active_vii_bool
      }
   }
%% Exec |mini-right|, |mini-right*| keys in |enumext*| environment.
\__enumext_after_env:nn {enumext*}
  {
    \bool_if:NT \g__enumext_minipage_active_vii_bool
      {
        \__enumext_mini_page{ \g__enumext_minipage_right_vii_dim }
          \par\addvspace { \g__enumext_minipage_right_skip }
          \bool_if:NF \g__enumext_minipage_center_vii_bool
            {
              \tl_put_left:Nn \g__enumext_miniright_code_vii_tl
                {
                  \centering
                }
            }
          \vbox_set_top:Nn \l__enumext_miniright_code_vii_box
            {
              \tl_use:N \g__enumext_miniright_code_vii_tl
            }
          \box_use_drop:N \l__enumext_miniright_code_vii_box
        \end__enumext_mini_page
        \par\addvspace{ \g__enumext_minipage_after_skip }
      }
    \bool_gset_false:N \g__enumext_minipage_active_vii_bool
    \bool_gset_true:N \g__enumext_minipage_center_vii_bool
    \tl_gclear:N \g__enumext_miniright_code_vii_tl
    \dim_gzero:N \g__enumext_minipage_right_vii_dim
    \bool_gset_false:N \g__enumext_starred_bool
  }
%% Start support for |mini-env|, |mini-right| and |mini-right*| key in |keyans*| environment.
\cs_new_protected:Nn \__enumext_start_mini_viii:
  {
    \dim_compare:nNnT { \l__enumext_minipage_right_viii_dim } > { \c_zero_dim }
      {
        \dim_set:Nn \l__enumext_minipage_left_viii_dim
          {
            \linewidth
            - \l__enumext_minipage_right_viii_dim
            - \l__enumext_minipage_hsep_viii_dim
          }
        \bool_set_true:N \l__enumext_minipage_active_viii_bool
        \dim_gset_eq:NN
          \g__enumext_minipage_right_viii_dim
          \l__enumext_minipage_right_viii_dim
        \__enumext_mini_addvspace_viii:
        \nointerlineskip\noindent
        \__enumext_mini_page{ \l__enumext_minipage_left_viii_dim }
      }
   }
\cs_new_protected:Nn \__enumext_stop_mini_viii:
  {
    \bool_if:NT \l__enumext_minipage_active_viii_bool
      {
        \end__enumext_mini_page
        \hfill
        \bool_gset_true:N \g__enumext_minipage_active_viii_bool
      }
   }
\__enumext_after_env:nn {keyans*}
  {
    \bool_if:NT \g__enumext_minipage_active_viii_bool
      {
        \__enumext_mini_page{ \g__enumext_minipage_right_viii_dim }
          \par\addvspace { \g__enumext_minipage_right_skip }
          \bool_if:NF \g__enumext_minipage_center_viii_bool
            {
              \tl_put_left:Nn \g__enumext_miniright_code_viii_tl
                {
                  \centering
                }
            }
          \vbox_set_top:Nn \l__enumext_miniright_code_viii_box
            {
              \tl_use:N \g__enumext_miniright_code_viii_tl
            }
          \box_use_drop:N \l__enumext_miniright_code_viii_box
        \end__enumext_mini_page
        \par\addvspace{ \g__enumext_minipage_after_skip }
      }
    \bool_gset_false:N \g__enumext_minipage_active_viii_bool
    \bool_gset_true:N \g__enumext_minipage_center_viii_bool
    \tl_gclear:N \g__enumext_miniright_code_viii_tl
    \dim_gzero:N \g__enumext_minipage_right_viii_dim
  }
%% Define |enumext*|
\NewDocumentEnvironment{enumext*}{ o }
  {
    \__enumext_safe_exec_vii:
    \__enumext_parse_keys_vii:n {#1}
    \__enumext_before_list_vii:
    \__enumext_start_store_level_vii:
    \__enumext_start_list:nn { }
      {
        \__enumext_list_arg_two_vii:
        \__enumext_before_keys_exec_vii:
      }
    % Stop tagging
    \SuspendTagging{enumext*}
    \__enumext_starred_columns_set_vii:
    \item[] \scan_stop:
    \cs_set_eq:NN \__enumext_stop_item_tmp_vii: \__enumext_first_item_tmp_vii:
    \cs_set_eq:NN \item \__enumext_start_item_tmp_vii:
    \ignorespaces
  }
  {
    % Close for first \item
    \IfDocumentMetadataTF { \tag_struct_end: } { }
    \__enumext_stop_item_tmp_vii:
    \__enumext_remove_extra_parsep_vii:
    \__enumext_stop_list:
    \__enumext_stop_store_level_vii:
    \__enumext_after_list_vii:
  }
%% Safe exec for |enumext*| (set bool vars for storage system).
\cs_new_protected:Nn \__enumext_safe_exec_vii:
  {
    \__enumext_internal_mini_page:
    \__enumext_is_not_nested:
    \int_incr:N \l__enumext_level_h_int
    \int_compare:nNnT { \l__enumext_level_h_int } > { 1 }
      {
        \msg_error:nn { enumext } { nested }
      }
    \int_compare:nNnT { \l__enumext_keyans_level_h_int } = { 1 }
      {
        \msg_error:nnn { enumext } { nested-horizontal } { keyans*}
      }
    \bool_set_true:N \l__enumext_starred_bool
    \bool_set_false:N \l__enumext_standar_bool
    \__enumext_is_on_first_level:
  }
%% Parse |key=val| and store keys for |enumext*|.
\cs_new_protected:Npn \__enumext_parse_keys_vii:n #1
  {
    \tl_if_novalue:nF {#1}
      {
        \str_clear:N \l__enumext_series_str
        \keys_set:nn { enumext / enumext* } {#1}
        \__enumext_parse_series:n {#1}
        \__enumext_store_active_keys_vii:n {#1}
        \__enumext_nested_base_line_fix:
      }
  }
\cs_new_protected:Nn \__enumext_before_list_vii:
  {
    \__enumext_vspace_above_vii:
    \__enumext_check_ans_active:
    \__enumext_before_args_exec_vii:
    \__enumext_start_mini_vii:
  }
\cs_new_protected:Nn \__enumext_after_list_vii:
  {
    \__enumext_stop_mini_vii:
    \__enumext_after_stop_list_vii:
    \__enumext_check_ans_key_hook:
    \__enumext_vspace_below_vii:
    \bool_set_false:N \l__enumext_starred_bool
    \__enumext_resume_save_counter:
  }
\cs_new_protected:Nn \__enumext_start_store_level_vii:
  {
    \bool_if:NT \l__enumext_store_active_bool
      {
        \int_compare:nNnT { \l__enumext_level_int } > { 0 }
          {
            \__enumext_store_level_open_vii:
          }
      }
  }
\cs_new_protected:Nn \__enumext_stop_store_level_vii:
  {
    \bool_if:NT \l__enumext_store_active_bool
      {
        \int_compare:nNnT { \l__enumext_level_int } > { 0 }
          {
            \__enumext_store_level_close_vii:
          }
      }
  }
%% Remove |\labelwidth+\labelsep| on left in first |\item| for |enumext*|
\cs_new_protected_nopar:Nn \__enumext_first_item_tmp_vii:
  {
    \skip_horizontal:n { -\l__enumext_labelwidth_vii_dim - \l__enumext_labelsep_vii_dim }
  }
%% Start boxed item's for |enumext*|
\cs_new_protected_nopar:Nn \__enumext_start_item_tmp_vii:
  {
    \__enumext_stop_item_tmp_vii:
    \int_incr:N \l__enumext_item_column_pos_vii_int
    \int_gincr:N \g__enumext_item_count_all_vii_int
    \__enumext_item_peek_args_vii:
  }
%% Peek argument for \item()*[][] for |enumext*|
\cs_new_protected:Nn \__enumext_item_peek_args_vii:
  {
    \peek_meaning:NTF (
      { \__enumext_joined_item_vii:w }
      { \__enumext_joined_item_vii:w (1) }
  }
%% Joined item's for |enumext*|
\cs_new_protected:Npn \__enumext_joined_item_vii:w (#1)
  {
    \__enumext_starred_joined_item_vii:n {#1}
    \peek_meaning_remove:NTF *
      { \__enumext_starred_item_vii:w  }
      { \__enumext_standar_item_vii:w }
  }
%% Set \item[opt] for |enumext*|
\cs_new_protected:Npn \__enumext_standar_item_vii:w
  {
    \bool_set_false:N \l__enumext_item_starred_vii_bool
    \peek_meaning:NTF [
      {
        \bool_set_eq:NN \l__enumext_wrap_label_vii_bool \l__enumext_wrap_label_opt_vii_bool
        \__enumext_start_item_vii:w
      }
      {
        \bool_set_true:N \l__enumext_wrap_label_vii_bool
        \legacy_if_set_true:n { @noitemarg }
        \__enumext_start_item_vii:w [ \l__enumext_label_vii_tl ]
      }
  }
%% Set \item*[sym][sep] for |enumext*| environment.
\cs_new_protected:Npn \__enumext_starred_item_vii:w
  {
    \bool_set_true:N \l__enumext_item_starred_vii_bool
    \bool_set_true:N \l__enumext_wrap_label_vii_bool
    \peek_meaning:NTF [
      { \__enumext_starred_item_vii_aux_i:w }
      { \__enumext_starred_item_vii_aux_ii:w }
  }
\cs_new_protected:Npn \__enumext_starred_item_vii_aux_i:w [#1]
  {
    \tl_gset:Nn \g__enumext_item_symbol_aux_vii_tl {#1}
    \__enumext_starred_item_vii_aux_ii:w
  }
\cs_new_protected:Npn \__enumext_starred_item_vii_aux_ii:w
  {
    \peek_meaning:NTF [
      { \__enumext_starred_item_vii_aux_iii:w }
      {
        \dim_set_eq:NN \l__enumext_item_symbol_sep_vii_dim \l__enumext_labelsep_vii_dim
        \legacy_if_set_true:n { @noitemarg }
        \__enumext_start_item_vii:w [ \l__enumext_label_vii_tl ]
      }
  }
\cs_new_protected:Npn \__enumext_starred_item_vii_aux_iii:w [#1]
  {
    \dim_set:Nn \l__enumext_item_symbol_sep_vii_dim {#1}
    \legacy_if_set_true:n { @noitemarg }
    \__enumext_start_item_vii:w [ \l__enumext_label_vii_tl ]
  }
%% Fake \makelabel definition for |enumext*|
\cs_new_protected_nopar:Npn \__enumext_fake_make_label_vii:n #1
  {
    \legacy_if:nT { @noitemarg }
      {
        \legacy_if_set_false:n { @noitemarg }
        \legacy_if:nT { @nmbrlist }
          {
            \refstepcounter{enumXvii}
            \bool_if:NT \l__enumext_check_answers_bool
              {
                \int_gincr:N \g__enumext_item_number_int
                \bool_set_true:N \l__enumext_item_number_bool
              }
          }
      }
    \bool_if:NT \l__enumext_item_starred_vii_bool
      {
        \tl_if_blank:VT \g__enumext_item_symbol_aux_vii_tl
          {
            \tl_gset_eq:NN
              \g__enumext_item_symbol_aux_vii_tl \l__enumext_item_symbol_vii_tl
          }
        \mode_leave_vertical:
        \skip_horizontal:n { -\l__enumext_item_symbol_sep_vii_dim }
        \hbox_overlap_left:n { \g__enumext_item_symbol_aux_vii_tl }
        \skip_horizontal:N \l__enumext_item_symbol_sep_vii_dim
        \tl_gclear:N \g__enumext_item_symbol_aux_vii_tl
      }
    \bool_if:NTF \l__enumext_wrap_label_vii_bool
      {
        \makebox[ \l__enumext_labelwidth_vii_dim ][ \l__enumext_align_label_vii_str ]
          {
            \tl_use:N \l__enumext_label_font_style_vii_tl
                \__enumext_wrapper_label_vii:n {#1}
          }
      }
      {
         \makebox[ \l__enumext_labelwidth_vii_dim ][ \l__enumext_align_label_vii_str ]
           {
             \tl_use:N \l__enumext_label_font_style_vii_tl #1
           }
      }
    \skip_horizontal:N \l__enumext_labelsep_vii_dim
  }
\cs_new_protected_nopar:Npn \__enumext_start_item_vii:w [#1]
  {
    \cs_set_eq:NN \__enumext_stop_item_tmp_vii: \__enumext_stop_item_vii:
    \hbox_set_to_wd:Nnw \l__enumext_item_text_vii_box
      {
        \l__enumext_joined_width_vii_dim
        + \l__enumext_labelwidth_vii_dim
        + \l__enumext_labelsep_vii_dim
      }
     \IfDocumentMetadataTF { }
       {
         \bool_if:NF \l__enumext_footnotes_key_bool
           {
             \__enumext_renew_footnote:
           }
       }
      \__enumext_start_list_tag:n {enumext*}
      \__enumext_fake_make_label_vii:n {#1}
      \__enumext_stop_start_list_tag:
      \__enumext_minipage:w [ t ]{ \l__enumext_joined_width_vii_dim  }
        \tl_use:N \l__enumext_after_list_args_vii_tl
        \dim_set_eq:NN \parindent \l__enumext_listparindent_vii_dim
        \skip_set_eq:NN \parskip \l__enumext_parsep_vii_skip
        \tl_use:N \l__enumext_fake_item_indent_vii_tl
   }
\cs_new_protected_nopar:Nn \__enumext_stop_item_vii:
  {
      \__enumext_endminipage:
    \__enumext_stop_list_tag:n {enumext*}
    \hbox_set_end:
    \int_set:Nn \hbadness { 10000 }
    \box_use_drop:N \l__enumext_item_text_vii_box
    \IfDocumentMetadataTF { }
      {
        \bool_if:NF \l__enumext_footnotes_key_bool
          {
            \__enumext_print_footnote:
          }
      }
    \int_compare:nNnTF
      { \l__enumext_item_column_pos_vii_int } = { \l__enumext_columns_vii_int }
      {
        \par\noindent
        \int_zero:N \l__enumext_item_column_pos_vii_int
      }
      {
        \skip_horizontal:N \l__enumext_columns_sep_vii_dim
      }
  }
%% Remove extra \parsep in |enumext*|
\cs_new_protected:Nn \__enumext_remove_extra_parsep_vii:
  {
    \int_compare:nNnT
      {
        \int_mod:nn
          {  \g__enumext_item_count_all_vii_int } { \l__enumext_columns_vii_int }
      }
      =
      { 0 }
      {
        \para_end:
        \skip_vertical:n { -\l__enumext_itemsep_vii_skip }
        \skip_vertical:N \c_zero_skip
        \int_gzero:N \g__enumext_item_count_all_vii_int
      }
  }
%% Execute |check-ans| key out of |enumext*|.
\__enumext_after_env:nn {enumext*} { \__enumext_execute_after_env: }
%% Define |keyans*| environment.
\NewDocumentEnvironment{keyans*}{ o }
  {
    \__enumext_safe_exec_viii:
    \__enumext_parse_keys_viii:n {#1}
    \__enumext_before_list_viii:
    \__enumext_start_list:nn { }
      {
        \__enumext_list_arg_two_viii:
        \__enumext_before_keys_exec_viii:
      }
    \__enumext_starred_columns_set_viii:
    \item[] \scan_stop:
    \cs_set_eq:NN \__enumext_stop_item_tmp_viii: \__enumext_first_item_tmp_viii:
    \cs_set_eq:NN \item \__enumext_start_item_tmp_viii:
    \ignorespaces
  }
  {
    \__enumext_stop_item_tmp_viii:
    \__enumext_remove_extra_parsep_viii:
    \__enumext_check_starred_cmd:n { item }
    \__enumext_stop_list:
    \__enumext_after_list_viii:
  }
%% Test deep-level for |keyans*| and set bool vars.
\cs_new_protected:Nn \__enumext_safe_exec_viii:
  {
    \bool_if:NF \l__enumext_store_active_bool
      {
        \msg_error:nnnn { enumext } { wrong-place }{ keyans* }{ save-ans }
      }
    \int_incr:N \l__enumext_keyans_level_h_int
    \int_compare:nNnT { \l__enumext_keyans_level_h_int } > { 1 }
      {
        \msg_error:nn { enumext } { nested }
      }
    \__enumext_keyans_name_and_start:
    \bool_if:NT \l__enumext_starred_bool
      {
        \msg_error:nnn { enumext } { nested-horizontal } { enumext* }
      }
    \bool_set_true:N \l__enumext_starred_bool
    % Set false for interfering with enumext nested in keyans* (yes, its possible and crayze)
    \bool_set_false:N \l__enumext_store_active_bool
    \int_compare:nNnT { \l__enumext_level_int } > { 1 }
      {
        \msg_error:nn { enumext } { keyans-wrong-level }
      }
  }
%% Parse |key=val| and store keys for |keyans*|.
\cs_new_protected:Npn \__enumext_parse_keys_viii:n #1
  {
    \tl_if_novalue:nF {#1}
      {
        \keys_set:nn { enumext / keyans* } {#1}
      }
  }
\cs_new_protected:Nn \__enumext_before_list_viii:
  {
    \__enumext_vspace_above_viii:
    \__enumext_before_args_exec_viii:
    \__enumext_start_mini_viii:
  }
\cs_new_protected:Nn \__enumext_after_list_viii:
  {
    \__enumext_stop_mini_viii:
    \__enumext_after_stop_list_viii:
    \__enumext_vspace_below_viii:
  }
%% Remove |\labelwidth+\labelsep| on left in first |\item| for |keyans*|
\cs_new_protected_nopar:Nn \__enumext_first_item_tmp_viii:
  {
    \skip_horizontal:n { -\l__enumext_labelwidth_viii_dim - \l__enumext_labelsep_viii_dim }
  }
%% Start boxed item's for |keyans*|
\cs_new_protected_nopar:Nn \__enumext_start_item_tmp_viii:
  {
    \__enumext_stop_item_tmp_viii:
    \int_incr:N \l__enumext_item_column_pos_viii_int
    \int_gincr:N \g__enumext_item_count_all_viii_int
    \__enumext_item_peek_args_viii:
  }
%% Peek argument for \item(number)*[opt] for |keyans*| environment.
\cs_new_protected:Nn \__enumext_item_peek_args_viii:
  {
    \peek_meaning:NTF (
      { \__enumext_joined_item_viii:w }
      { \__enumext_joined_item_viii:w (1) }
  }
%% Joined item's for |keyans*|
\cs_new_protected:Npn \__enumext_joined_item_viii:w (#1)
  {
    \__enumext_starred_joined_item_viii:n {#1}
    \peek_meaning_remove:NTF *
      { \__enumext_starred_item_viii:w  }
      { \__enumext_standar_item_viii:w }
  }
%% Set standard \item[opt] for |keyans*| environment.
\cs_new_protected:Npn \__enumext_standar_item_viii:w
  {
    \bool_set_false:N \l__enumext_item_starred_viii_bool
    \peek_meaning:NTF [
      {
        \bool_set_eq:NN \l__enumext_wrap_label_viii_bool \l__enumext_wrap_label_opt_viii_bool
        \__enumext_start_item_viii:w
      }
      {
        \bool_set_true:N \l__enumext_wrap_label_viii_bool
        \legacy_if_set_true:n { @noitemarg }
        \__enumext_start_item_viii:w [ \l__enumext_label_viii_tl ]
      }
  }
%% Set \item*[content] for |keyans*| environment.
\cs_new_protected:Npn \__enumext_starred_item_viii:w
  {
    \bool_set_true:N \l__enumext_item_starred_viii_bool
    \bool_set_true:N \l__enumext_wrap_label_viii_bool
    \peek_meaning:NTF [
      { \__enumext_starred_item_viii_aux_i:w }
      { \__enumext_starred_item_viii_aux_ii:w }
  }
\cs_new_protected:Npn \__enumext_starred_item_viii_aux_i:w [#1]
  {
    \tl_clear:N \l__enumext_store_current_label_tl
    \tl_if_novalue:nF { #1 }
      {
        \tl_if_empty:NF \l__enumext_store_keyans_item_opt_sep_tl
          {
            \tl_put_right:Ne \l__enumext_store_current_label_tl
              {
                \l__enumext_store_keyans_item_opt_sep_tl
              }
            \tl_put_right:Ne \l__enumext_store_current_label_tl { #1 }
          }
        \tl_set:Ne \l__enumext_store_current_opt_arg_tl { #1 }
      }
    \__enumext_starred_item_viii_aux_ii:w
  }
\cs_new_protected:Npn \__enumext_starred_item_viii_aux_ii:w
  {
    \legacy_if_set_true:n { @noitemarg }
    \__enumext_start_item_viii:w [ \l__enumext_label_viii_tl ]
  }
%% Set \item*[content] for |keyans*| environment.
\cs_new_protected:Nn \__enumext_starred_item_exec:
  {
    \tl_put_left:Ne \l__enumext_store_current_label_tl { \l__enumext_label_viii_tl }
    \__enumext_store_addto_prop:V \l__enumext_store_current_label_tl
    \__enumext_keyans_store_ref:
    \tl_put_left:Ne \l__enumext_store_current_label_tl { \item }
    \__enumext_keyans_addto_seq_link:
    \int_gincr:N \g__enumext_check_starred_cmd_int
    \bool_if:NT \l__enumext_show_answer_bool
      {
        \__enumext_print_keyans_box:NN \l__enumext_labelwidth_i_dim \l__enumext_labelsep_i_dim
      }
    \bool_if:NT \l__enumext_show_position_bool
      {
        \tl_set:Ne \l__enumext_mark_answer_sym_tl
          {
            \group_begin:
              \exp_not:N \normalfont
              \exp_not:N \footnotesize [ \int_eval:n
                {
                  \prop_count:c { g__enumext_ \l__enumext_store_name_tl _prop }
                }
               ]
            \group_end:
          }
        \__enumext_print_keyans_box:NN \l__enumext_labelwidth_i_dim \l__enumext_labelsep_i_dim
      }
  }
%% Real |\item| definition for |keyans*| environment.
\cs_new_protected_nopar:Npn \__enumext_start_item_viii:w [#1]
  {
    \cs_set_eq:NN \__enumext_stop_item_tmp_viii: \__enumext_stop_item_viii:
    \legacy_if:nT { @noitemarg }
      {
        \legacy_if_set_false:n { @noitemarg }
        \legacy_if:nT { @nmbrlist }
          {
            \bool_if:NT \l__enumext_hyperref_bool
              {
                \legacy_if_set_true:n { @hyper@item }
              }
            \refstepcounter{enumXviii}
          }
      }
    \hbox_set_to_wd:Nnw \l__enumext_item_text_viii_box
      {
        \l__enumext_joined_width_viii_dim
        + \l__enumext_labelwidth_viii_dim
        + \l__enumext_labelsep_viii_dim
      }
        \bool_if:NF \l__enumext_footnotes_key_bool
          {
            \__enumext_renew_footnote:
          }
        \bool_if:NT \l__enumext_item_starred_viii_bool
          {
            \__enumext_starred_item_exec:
          }
        \bool_if:NTF \l__enumext_wrap_label_viii_bool
          {
            \makebox[ \l__enumext_labelwidth_viii_dim ][ \l__enumext_align_label_viii_str ]
              {
                \tl_use:N \l__enumext_label_font_style_viii_tl
                \__enumext_wrapper_label_viii:n {#1}
              }
           }
           {
             \makebox[ \l__enumext_labelwidth_viii_dim ][ \l__enumext_align_label_viii_str ]
               {
                \tl_use:N \l__enumext_label_font_style_viii_tl #1

               }
           }
        \skip_horizontal:N \l__enumext_labelsep_viii_dim
        \tl_use:N \l__enumext_after_list_args_viii_tl
        \__enumext_minipage:w [ t ]{ \l__enumext_joined_width_viii_dim  }
          \dim_set_eq:NN \parindent \l__enumext_listparindent_viii_dim
          \skip_set_eq:NN \parskip \l__enumext_parsep_viii_skip
          \bool_if:NT \l__enumext_item_starred_viii_bool
            {
              \tl_use:N \l__enumext_fake_item_indent_viii_tl
              \__enumext_keyans_show_item_opt:
              \skip_horizontal:n { -\l__enumext_fake_item_indent_viii_dim - \l__enumext_labelsep_viii_dim }
            }
            {
              \tl_use:N \l__enumext_fake_item_indent_viii_tl
            }
   }
\cs_new_protected_nopar:Nn \__enumext_stop_item_viii:
  {
        \__enumext_endminipage:
    \hbox_set_end:
    \int_set:Nn \hbadness { 10000 }
    \box_use_drop:N \l__enumext_item_text_viii_box
    \bool_if:NF \l__enumext_footnotes_key_bool
      {
        \__enumext_print_footnote:
      }
    \int_compare:nNnTF
      { \l__enumext_item_column_pos_viii_int } = { \l__enumext_columns_viii_int }
      {
        \par\noindent
        \int_zero:N \l__enumext_item_column_pos_viii_int
      }
      {
        \skip_horizontal:N \l__enumext_columns_sep_viii_dim
      }
  }
%% Remove extra \parsep in |keyans*|
\cs_new_protected:Nn \__enumext_remove_extra_parsep_viii:
  {
    \int_compare:nNnT
      {
        \int_mod:nn
          { \g__enumext_item_count_all_viii_int }
          { \l__enumext_columns_viii_int }
      }
      =
      { 0 }
      {
        \para_end:
        \skip_vertical:n { -\l__enumext_itemsep_viii_skip }
        \skip_vertical:N \c_zero_skip
        \int_gzero:N \g__enumext_item_count_all_viii_int
      }
  }
%% Define |\getkeyans|, need \exp_args:Ne \tl_to_str:e
\NewDocumentCommand \getkeyans { m }
  {
    \exp_args:Ne \__enumext_getkeyans_aux:n
      { \tl_to_str:e { \text_expand:n {#1} } }
  }
\cs_new_protected:Npn \__enumext_getkeyans_aux:n #1
  {
    \str_if_in:nnTF {#1} { : }
      {
        \use:e
          {
            \cs_set:Npn \exp_not:N \__enumext_tmp:w ##1 \c_colon_str ##2 \scan_stop:
              { {##1} {##2} }
          }
        \exp_after:wN \__enumext_getkeyans:nn \__enumext_tmp:w #1 \scan_stop:
      }
      { \msg_error:nnn { enumext } { missing-colon } {#1} }
  }
\cs_new_protected:Npn \__enumext_getkeyans:nn #1 #2
  {
    \prop_if_exist:cTF { g__enumext_#1_prop }
      {
        \prop_item:cn { g__enumext_#1_prop }{#2}
      }
      {
        \msg_error:nnn { enumext } { undefined-storage-anskey } {#1}
      }
  }
%% Add keys for |\printkeyans|.
\keys_define:nn  { enumext / print }
  {
    print*  .code:n     = \keys_precompile:neN { enumext / enumext* }
                            { \__enumext_filter_save_key:n {#1} }
                            \l__enumext_print_keyans_starred_tl, % starred cmd
    print*  .initial:n  = { nosep, label=\arabic*., columns=2, first=\small, font=\small },
    print-1 .code:n     = \keys_precompile:neN { enumext / level-1 }
                            { \__enumext_filter_save_key:n {#1} }
                            \l__enumext_print_keyans_i_tl,
    print-1 .initial:n  = { nosep, label=\arabic*., columns=2, first=\small, font=\small },
    print-2 .code:n     = \keys_precompile:neN { enumext / level-2 }
                            { \__enumext_filter_save_key:n {#1} }
                            \l__enumext_print_keyans_ii_tl,
    print-2 .initial:n  = { nosep, label=(\alph*), first=\small, font=\small },
    print-3 .code:n     = \keys_precompile:neN { enumext / level-3 }
                            { \__enumext_filter_save_key:n {#1} }
                            \l__enumext_print_keyans_iii_tl,
    print-3 .initial:n  = { nosep, label=\roman*., first=\small, font=\small },
    print-4 .code:n     = \keys_precompile:neN { enumext / level-4 }
                            { \__enumext_filter_save_key:n {#1} }
                            \l__enumext_print_keyans_iv_tl,
    print-4 .initial:n  = { nosep, label=\Alph*., first=\small, font=\small },
    print-* .code:n     = \keys_precompile:neN { enumext / enumext* }
                            { \__enumext_filter_save_key:n {#1} }
                            \l__enumext_print_keyans_vii_tl, % starred nested
    print-* .initial:n  = { nosep, label=\arabic*., first=\small, font=\small },
  }
%% Define |\printkeyans|.
\NewDocumentCommand \printkeyans { s O{} m }
  {
    \group_begin:
      \tl_use:N \l__enumext_print_keyans_i_tl
      \tl_use:N \l__enumext_print_keyans_ii_tl
      \tl_use:N \l__enumext_print_keyans_iii_tl
      \tl_use:N \l__enumext_print_keyans_iv_tl
      \tl_use:N \l__enumext_print_keyans_vii_tl
      \__enumext_printkeyans:nnn { #1 } { #2 } { #3 }
    \group_end:
  }
%% Internal function for |\printkeyans|.
\cs_new_protected:Npn \__enumext_printkeyans:nnn #1 #2 #3
  {
    \seq_if_exist:cTF { g__enumext_#3_seq }
      {
        \seq_if_empty:cF { g__enumext_#3_seq }
          {
            %%\seq_show:c { g__enumext_#3_seq }
            \bool_if:nTF {#1}
              {
                \seq_if_in:cnTF { g__enumext_#3_seq } { \end{enumext*} }
                  {
                    \msg_error:nnnn { enumext } { print-starred } {#3} { enumext* }
                  }
                  {
                    \tl_use:N \l__enumext_print_keyans_starred_tl
                    \begin{enumext*}[#2]
                      \keys_set:nn { enumext / level-1 }{ base-fix }
                      \seq_map_inline:cn { g__enumext_#3_seq } { ##1 }
                    \end{enumext*}
                  }
              }
              {
                \begin{enumext}[#2]
                  \keys_set:nn { enumext / enumext* }{ base-fix }
                  \seq_map_inline:cn { g__enumext_#3_seq } { ##1 }
                \end{enumext}
              }
          }
      }
      {
        \msg_error:nnn { enumext } { undefined-storage-anskey } {#3}
      }
  }
%% Internal function for filter keys in |\setenumext| for first level.
\cs_new:Npn \__enumext_filter_first_level:n #1
  {
    \use:e
      {
        \keyval_parse:NNn
          \__enumext_filter_first_level_key:n
          \__enumext_filter_first_level_pair:nn {#1}
      }
  }
\cs_new:Npn \__enumext_filter_first_level_key:n #1
  {
    \str_case:nnF {#1}
      {
        { resume   } {}
        { resume*  } {}
      }
      { , { \exp_not:n {#1} } }
  }
\cs_new:Npn \__enumext_filter_first_level_pair:nn #1#2
  {
    \str_case:nnF {#1}
      {
        { series } {}
        { resume } {}
        { save-ans } {}
      }
      { , { \exp_not:n {#1} } = { \exp_not:n {#2} } }
  }
%% Add keys for |\setenumext|.
\keys_define:nn { enumext / meta-families }
  {
    enumext-1 .code:n =
                {
                  \keys_set:ne { enumext / level-1 }
                    {
                      \__enumext_filter_first_level:n {#1}
                    }
                } ,
    enumext-2 .code:n = { \keys_set:nn { enumext / level-2 } {#1} } ,
    enumext-3 .code:n = { \keys_set:nn { enumext / level-3 } {#1} } ,
    enumext-4 .code:n = { \keys_set:nn { enumext / level-4 } {#1} } ,
    keyans    .code:n = { \keys_set:nn { enumext / keyans  } {#1} } ,
    enumext*  .code:n =
                {
                  \keys_set:ne { enumext / enumext* }
                    {
                      \__enumext_filter_first_level:n {#1}
                    }
                } ,
    keyans*   .code:n = { \keys_set:nn { enumext / keyans* } {#1} } ,
    print*    .code:n = { \keys_set:nn { enumext / print   } { print*  = {#1} } } ,
    print-1   .code:n = { \keys_set:nn { enumext / print   } { print-1 = {#1} } } ,
    print-2   .code:n = { \keys_set:nn { enumext / print   } { print-2 = {#1} } } ,
    print-3   .code:n = { \keys_set:nn { enumext / print   } { print-3 = {#1} } } ,
    print-4   .code:n = { \keys_set:nn { enumext / print   } { print-4 = {#1} } } ,
    print-*   .code:n = { \keys_set:nn { enumext / print   } { print-* = {#1} } } ,
    unknown   .code:n = { \msg_error:nn { enumext } { unknown-key-family } } ,
  }
\seq_const_from_clist:Nn \c__enumext_all_families_seq
  {
    enumext-1, enumext-2, enumext-3, enumext-4, keyans, enumext*,
    keyans*, print-1, print-2, print-3, print-4, print-*, print*,
  }
%% Define |\setenumext|.
\NewDocumentCommand \setenumext { O{enumext,1} +m }
  {
    \seq_clear:N \l__enumext_setkey_tmpa_seq
    \seq_set_from_clist:Nn \l__enumext_setkey_tmpb_seq {#1}
    \int_set:Nn \l__enumext_setkey_tmpa_int
      {
        \seq_count:N \l__enumext_setkey_tmpb_seq
      }
    \int_compare:nNnTF { \l__enumext_setkey_tmpa_int } > { 1 }
      {
        \seq_pop_left:NN \l__enumext_setkey_tmpb_seq \l__enumext_setkey_tmpa_tl
        \seq_map_function:NN \l__enumext_setkey_tmpb_seq \__enumext_set_parse:n
        \seq_set_map_e:NNn \l__enumext_setkey_tmpa_seq \l__enumext_setkey_tmpa_seq
          {
            \tl_use:N \l__enumext_setkey_tmpa_tl - ##1
          }
      }
      {
        \seq_put_right:Ne \l__enumext_setkey_tmpa_seq { \tl_trim_spaces:n {#1} }
      }
    \seq_if_empty:NTF \l__enumext_setkey_tmpa_seq
      { \seq_map_inline:Nn \c__enumext_all_families_seq }
      { \seq_map_inline:Nn \l__enumext_setkey_tmpa_seq }
      {
        \keys_set:nn { enumext / meta-families } { ##1 = {#2} }
      }
  }
\cs_new_protected:Npn \__enumext_set_parse:n #1
  {
    \tl_set:Ne \l__enumext_setkey_tmpb_tl { \tl_trim_spaces:n {#1} }
    \clist_map_inline:nn { 0, 1, 2, 3, 4, * } % <- max level
      { \tl_remove_all:Nn \l__enumext_setkey_tmpb_tl {##1} }
    \tl_if_empty:NTF \l__enumext_setkey_tmpb_tl
      {
        \seq_put_right:Ne \l__enumext_setkey_tmpa_seq
          { \tl_trim_spaces:n {#1} }
      }
      { \__enumext_set_error:nn {#1} { } }
  }
\cs_new_protected:Npn \__enumext_set_error:nn #1 #2
  { \msg_error:nnn { enumext } { invalid-key } {#1} {#2} }
%% Define |\setenumextmeta|.
\prop_const_from_keyval:Nn \c__enumext_meta_paths_prop
  {
    {enumext,1} = level-1,
    {enumext,2} = level-2,
    {enumext,3} = level-3,
    {enumext,4} = level-4,
    {enumext*}  = enumext*
  }
\NewDocumentCommand \setenumextmeta { s O{enumext,1} m +m }
  {
    \str_if_eq:eeTF { \tl_trim_spaces:n {#3} } { unknown }
      { \msg_error:nn { enumext } { prohibited-unknown } }
      {
        \bool_if:nTF {#1}
          {
            \int_step_inline:nn { 4 }
              { \__enumext_add_meta_key:nnn { enumext, ##1 } {#3} {#4} }
            \__enumext_add_meta_key:nnn { enumext* } {#3} {#4}
          }
          { \__enumext_add_meta_key:nnn {#2} {#3} {#4} }
      }
  }
\cs_new_protected:Npn \__enumext_add_meta_key:nnn #1
  {
    \tl_set:Nn \l__enumext_meta_path_tl {#1}
    \tl_replace_all:Nnn \l__enumext_meta_path_tl { ~ } {}
    \prop_get:NVNTF
      \c__enumext_meta_paths_prop \l__enumext_meta_path_tl \l__enumext_meta_path_tl
      { \__enumext_def_meta_key:Vnn \l__enumext_meta_path_tl }
      {
        \msg_error:nnn { enumext } { unknown-set } {#1}
        \use_none:nn
      }
  }
\cs_new_protected:Npn \__enumext_def_meta_key:nnn #1#2#3
  {
    \bool_lazy_or:nnTF
      { \keys_if_exist_p:nn { enumext / #1 } {#2} }
      { \keys_if_exist_p:nn { enumext / enumext* } {#2} }
      { \msg_error:nnn { enumext } { already-defined } {#2} }
      {
        \keys_define:nn { enumext / #1 }
          {
            #2 .meta:n = {#3},
            #2 .value_forbidden:n = true
          }
      }
  }
\cs_generate_variant:Nn \__enumext_def_meta_key:nnn { V }
%% Define |\foreachkeyans|.
\keys_define:nn { enumext / foreach }
  {
    before  .tl_set:N  = \l__enumext_foreach_before_tl,
    before  .value_required:n = true,
    after   .tl_set:N  = \l__enumext_foreach_after_tl,
    after   .value_required:n = true,
    start   .int_set:N = \l__enumext_foreach_start_int,
    start   .value_required:n = true,
    stop    .int_set:N = \l__enumext_foreach_stop_int,
    stop    .value_required:n = true,
    step    .int_set:N = \l__enumext_foreach_step_int,
    step    .value_required:n = true,
    wrapper .cs_set_protected:Np = \__enumext_foreach_wrapper:n #1,
    wrapper .value_required:n = true,
    sep     .tl_set:N  = \l__enumext_foreach_sep_tl,
    sep     .value_required:n = true,
    unknown .code:n    = { \__enumext_parse_foreach_keys:n {#1} }
  }
\keys_precompile:nnN { enumext / foreach }
  {
    before={},after={},start=1,step=1,stop=0,wrapper=#1,sep=
  }
  \g__enumext_foreach_default_keys_tl
\cs_new_protected:Npn \__enumext_parse_foreach_keys:nn #1#2
  {
    \tl_if_blank:nTF {#2}
      {
        \msg_error:nnn { enumext } { for-key-unknown } {#1}
      }
      {
        \msg_error:nnnn { enumext } { for-key-value-unknown } {#1} {#2}
      }
  }
\cs_new_protected:Npn \__enumext_parse_foreach_keys:n #1
  {
    \exp_args:NV \__enumext_parse_foreach_keys:nn \l_keys_key_str {#1}
  }
\NewDocumentCommand \foreachkeyans { +O{} m }
  {
    \__enumext_foreach_keyans:nn {#1} {#2}
  }
\cs_new_protected:Npn \__enumext_foreach_keyans:nn #1 #2
  {
    \tl_use:N \g__enumext_foreach_default_keys_tl
    \keys_set:nn { enumext / foreach } {#1}
    \tl_set:Nn \l__enumext_foreach_name_prop_tl {#2}
    \prop_if_exist:cF { g__enumext_#2_prop }
      {
        \msg_error:nnn { enumext } { undefined-storage-anskey } {#2}
      }
    \int_compare:nNnT { \l__enumext_foreach_stop_int } = { 0 }
      {
        \int_set:Nn \l__enumext_foreach_stop_int
          { \prop_count:c { g__enumext_#2_prop } }
      }
    \seq_clear:N \l__enumext_foreach_print_seq
    \int_step_function:nnnN
      { \l__enumext_foreach_start_int }
      { \l__enumext_foreach_step_int }
      { \l__enumext_foreach_stop_int }
      \__enumext_foreach_add_body:n
      \seq_use:NV \l__enumext_foreach_print_seq \l__enumext_foreach_sep_tl
  }
\cs_new_protected:Npn \__enumext_foreach_add_body:n #1
  {
    \seq_put_right:Ne \l__enumext_foreach_print_seq
      {
        \exp_not:V \l__enumext_foreach_before_tl
        \__enumext_foreach_wrapper:n
          {
            \prop_item:cn { g__enumext_ \l__enumext_foreach_name_prop_tl _prop }{#1}
          }
        \exp_not:V \l__enumext_foreach_after_tl
      }
  }
%% Messages.
\msg_new:nnn { enumext } { package-load }
  {
    The ~ '#1' ~ package ~ is ~ already ~ loaded.
  }
\msg_new:nnn { enumext } { package-not-load }
  {
    The ~ '#1' ~ package ~ will ~ be ~ loaded ~ as ~ a ~ dependency.
  }
\msg_new:nnn { enumext } { package-load-foot }
  {
    The ~ '#1' ~ package ~ is ~ loaded ~ with ~ the ~ option ~ '#2'.
  }
\msg_new:nnn { enumext } { counters }
  {
    The ~ counter ~ '#1' ~ is ~ already ~ defined ~ by ~ some ~ \\
    package ~ or ~ macro, ~ it ~ cannot ~ be ~ continued.
  }
\msg_new:nnn { enumext } { unknown-choice }
  {
    The ~ value ~ '#3' ~ for ~ '#1' ~ key ~ is ~ invalid ~ use ~ ('#2').
  }
\msg_new:nnnn { enumext } { anskey-env-error }
  {
    The ~ '#1' ~ environment ~is ~ reserved ~ by ~\\
    'enumext' ~ package, ~ It~ is~ already~ defined.
  }
  {
    The ~ anskey* ~ environment ~ is ~ defined ~ internally ~
    for ~ the ~ 'save-ans' ~ key.\\
  }
\msg_new:nnn { enumext } { store-prop }
  {
    * ~ Package ~ enumext: ~ Creating ~
     \c_backslash_str g__enumext_#1_prop ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { store-seq }
  {
    * ~ Package ~ enumext: ~ Creating ~
    \c_backslash_str g__enumext_#1_seq ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { store-int }
  {
    * ~ Package ~ enumext: ~ Creating ~
    \c_backslash_str g__enumext_resume_#1_int ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { prop-seq-int-hook }
  {
    * ~ Package ~ enumext: ~ Elements ~ in ~
    \c_backslash_str g__enumext_#1_prop ~ = ~ #2.\\
    * ~ Package ~ enumext: ~ Elements ~ in ~
    \c_backslash_str g__enumext_#1_seq ~ = ~ #3.\\
    * ~ Package ~ enumext: ~ Value ~ off ~
    \c_backslash_str g__enumext_resume_#1_int ~ = ~ #4.
  }
\msg_new:nnn { enumext } { item-answer-hook }
  {
    * ~ Package ~ enumext: ~ Value ~ off ~
    \c_backslash_str g__enumext_item_number_int ~ = ~ #1.\\
    * ~ Package ~ enumext: ~ Value ~ off ~
    \c_backslash_str g__enumext_item_anskey_int ~ = ~ #2.\\
    * ~ Package ~ enumext: ~ Difference ~ item_number_int ~ - ~ item_anskey_int ~ = ~ #3.
  }
\msg_new:nnn { enumext } { invalid-key }
  {
    The ~ key ~ '#1' ~ is ~ not ~ know ~ the ~ level ~ #2.
  }
\msg_new:nnn { enumext } { unknown-key-family }
  {
    Unknown~key~family~`\l_keys_key_str'~for~enumext.
  }
\msg_new:nnn { enumext } { width-negative }
  {
    Ignoring ~ negative ~ value ~ '#1=#2' ~ \msg_line_context:.\\
    The ~ key ~ '#1'~ accepts ~ values  ~ >= ~ 0pt.
  }
\msg_new:nnn { enumext } { width-zero }
  {
    Invalid ~ '#1=#2' ~ \msg_line_context:.\\
    The ~ key ~ '#1'~ accepts ~ values  ~ > ~ 0pt.
  }
\msg_new:nnn { enumext } { list-lengths }
  {
    **** ~ Lengths ~ used ~ by ~ 'enumext' ~ level ~ '#2' ~ \msg_line_context:~\c_space_tl ****\\
    \__enumext_show_length:nnn { dim  } { labelsep      } {#1}
    \__enumext_show_length:nnn { dim  } { labelwidth    } {#1}
    \__enumext_show_length:nnn { dim  } { itemindent    } {#1}
    \__enumext_show_length:nnn { dim  } { leftmargin    } {#1}
    \__enumext_show_length:nnn { dim  } { rightmargin   } {#1}
    \__enumext_show_length:nnn { dim  } { listparindent } {#1}
    \__enumext_show_length:nnn { skip } { topsep    } {#1}
    \__enumext_show_length:nnn { skip } { parsep    } {#1}
    \__enumext_show_length:nnn { skip } { partopsep } {#1}
    \__enumext_show_length:nnn { skip } { itemsep   } {#1}
    ****************************************************
  }
\msg_new:nnn { enumext } { list-lengths-not-nested }
  {
    **** ~ Lengths ~ used ~ by ~ '#2' ~ environment ~ \msg_line_context:~\c_space_tl ****\\
    \__enumext_show_length:nnn { dim  } { labelsep      } {#1}
    \__enumext_show_length:nnn { dim  } { labelwidth    } {#1}
    \__enumext_show_length:nnn { dim  } { itemindent    } {#1}
    \__enumext_show_length:nnn { dim  } { leftmargin    } {#1}
    \__enumext_show_length:nnn { dim  } { rightmargin   } {#1}
    \__enumext_show_length:nnn { dim  } { listparindent } {#1}
    \__enumext_show_length:nnn { skip } { topsep    } {#1}
    \__enumext_show_length:nnn { skip } { parsep    } {#1}
    \__enumext_show_length:nnn { skip } { partopsep } {#1}
    \__enumext_show_length:nnn { skip } { itemsep   } {#1}
    ****************************************************
  }
\msg_new:nnn { enumext } { key-ref-empty }
  {
    Key ~ 'ref' ~ need ~ a ~ value ~ in ~ '#1'~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { save-ans-empty }
  {
    Key ~ 'save-ans' ~ need ~ a ~ value ~ in ~ '#1'~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { save-ans-log }
  {
    * ~ Package ~ enumext: ~ Start ~ #1\c_space_tl with ~ save-ans=#2 ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { save-ans-log-hook }
  {
    * ~ Package ~ enumext: ~ Stop ~ #1\c_space_tl with ~ save-ans=#2 ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { save-ans-hook }
  {
    Stop ~ storing ~ for ~ 'save-ans=#1' ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { need-save-ans }
  {
    Key ~ '#1'~ works ~ only ~ with ~ the ~ 'save-ans' ~ key ~ in ~ '#2'~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { items-same-answer }
  {
    ****************************************\\
    * ~ Package ~ enumext: ~ Checking ~ answers ~ in ~ '#1' ~
    for ~ \c_left_brace_str #2 \c_right_brace_str\\
    * ~ started ~ #3 ~ and ~ close ~ \msg_line_context: : ~
    'OK', ~ all ~ items ~ with ~ answer.\\
    ****************************************
  }
\msg_new:nnn { enumext } { item-greater-answer }
  {
    Checking ~ answers ~ in ~ '#1' ~ for ~ \c_left_brace_str #2 \c_right_brace_str\\
    started ~ #3 ~ and ~ close ~ \msg_line_context: : ~'NOT ~ OK'\\
    Items ~ > ~ Answers.
  }
\msg_new:nnn { enumext } { item-less-answer }
  {
    Checking ~ answers ~ in ~ '#1' ~ for ~ \c_left_brace_str #2 \c_right_brace_str\\
    started ~ #3 ~ and ~ close ~ \msg_line_context: : ~'NOT ~ OK'\\
    Items ~ < ~ Answers.
  }
\msg_new:nnn { enumext } { missing-starred }
  {
    Missing ~ '\c_backslash_str #1*' ~ #2.
  }
\msg_new:nnn { enumext } { many-starred }
  {
    Many ~ '\c_backslash_str #1*' ~ #2.
  }
\msg_new:nnn { enumext } { print-starred }
  {
    \c_backslash_str printkeyans*:~ The ~ sequence ~ '#1' ~ already ~ contains ~
    #2 ~ environment ~  \msg_line_context:.
  }
\msg_new:nnn { enumext } { list-too-deep }
  {
    Too ~ deep ~ nesting  ~ for ~ 'enumext' ~ \msg_line_context:.~ \\
    The ~ maximum  ~ level  ~ of  ~ nesting  ~ is ~ 4.
  }
\msg_new:nnn { enumext } { anskey-unnumber-item }
  {
    Can't ~ store ~ with ~ a ~ unnumbered ~ \c_backslash_str item ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { anskey-already-stored }
  {
    Content ~ already ~ stored ~ for ~ this ~ \c_backslash_str item ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { anskey-empty-arg }
  {
    Can't ~ store ~ empty ~ content ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { anskey-wrong-place }
  {
    Wrong ~ place ~ for ~ command ~ '\c_backslash_str #1' ~ \msg_line_context:.~ \\
    '\c_backslash_str #1' ~ works ~ in ~ the ~ environment ~ '#2'.
  }
\msg_new:nnn { enumext } { anskey-nested }
  {
    The ~ command ~ \c_backslash_str anskey~ can't ~ be ~ nested ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { anskey-math-mode }
  {
    #1 ~ can't ~ work ~ in ~ math ~ mode ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { anskey-env-wrong }
  {
    The ~ environment ~ anskey* ~ cannot ~ use ~ in ~ '#1' ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { anspic-wrong-place }
  {
    Wrong ~ place ~ for ~ command ~ '\c_backslash_str #1' ~ \msg_line_context:.~ \\
    '\c_backslash_str #1' ~ works ~ in ~ the ~ environment ~ '#2'.
  }
\msg_new:nnn { enumext } { command-wrong-place }
  {
    Wrong ~ place ~ for ~ command ~ '\c_backslash_str #1' ~ \msg_line_context:.~ \\
    '\c_backslash_str #1' ~ works ~ outside ~ the ~ environment ~ '#2'.
  }
\msg_new:nnnn { enumext } { anskey-env-key-unknown }
  {
    The ~ key ~ '#1' ~ is ~ unknown ~ by ~ environment~
    'anskey*' ~ and ~ is ~ being ~ ignored.
  }
  {
    The ~ environment ~ 'anskey*' ~ does ~ not ~ have ~ a ~ key ~ called ~'#1'.\\
    Check ~ that ~ you ~ have ~ spelled ~ the ~ key ~ name ~ correctly.
  }
\msg_new:nnnn { enumext } { anskey-env-key-value-unknown }
  {
    The ~ key ~ '#1=#2' ~ is ~ unknown ~ by ~ environment ~
    'anskey*' ~ and ~ is ~ being ~ ignored.
  }
  {
    The ~ environment ~ 'anskey*' ~ does ~ not ~ have ~ a ~ key ~ called ~'#1'.\\
    Check ~ that ~ you ~ have ~ spelled ~ the ~ key ~ name ~ correctly.
  }
\msg_new:nnnn { enumext } { anskey-cmd-key-unknown }
  { The ~ key ~'#1'~ is ~ unknown ~ by ~ '\c_backslash_str anskey' ~ and ~ is ~ being ~ ignored.}
  {
    The ~ command ~'\c_backslash_str anskey' ~ does ~ not ~ have ~ a ~ key ~ called ~'#1'.\\
    Check ~ that ~ you ~ have ~ spelled ~ the ~ key ~ name ~ correctly.
  }
\msg_new:nnnn { enumext } { anskey-cmd-key-value-unknown }
  { The ~ key ~ '#1=#2' ~ is ~ unknown ~ by ~ '\c_backslash_str anskey' ~ and ~ is ~ being ~ ignored. }
  {
    The ~ command ~ '\c_backslash_str anskey' ~ does ~ not ~ have ~ a ~ key ~ called ~'#1'.\\
    Check ~ that ~ you ~ have ~ spelled ~ the ~ key ~ name ~ correctly.
  }
\msg_new:nnn { enumext } { keyans-nested }
  {
    The ~ environment ~ 'keyans' ~ can't ~ be  ~ nested  ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { keyans-wrong-level }
  {
    Wrong ~ level ~ position ~ for ~ 'keyans' ~ \msg_line_context:.~ \\
    The ~ environment ~ 'keyans' ~ can ~ only ~ be ~ in ~ the ~ first ~ level.
  }
\msg_new:nnn { enumext } { wrong-place }
  {
    Wrong ~ place ~ for ~ '#1' ~ environment ~\msg_line_context:.~ \\
    '#1' ~ is ~ only ~ found ~ with ~ '#2' ~  in  ~  'enumext.
  }
\msg_new:nnn { enumext } { keyanspic-nested }
  {
    The ~ environment ~ 'keyanspic' ~ can't ~ be  ~ nested~ \msg_line_context:.~.
  }
\msg_new:nnn { enumext } { keyanspic-wrong-level }
  {
    Wrong ~ level ~ position ~ for ~ 'keyanspic' ~ \msg_line_context:.~ \\
    The ~ environment ~ 'keyans' ~ can ~ only ~ be ~ in ~ the ~ first ~ level.
  }
\msg_new:nnn { enumext } { keyanspic-item-cmd }
  {
    Can't ~ use  ~ \c_backslash_str item ~ in ~ keyanspic ~ \msg_line_context:.
  }
\msg_new:nnnn { enumext } { keyans-unknown-key }
  {
    The ~ key ~ '#1' ~ is ~ unknown ~ by ~ environment~
    '\l__enumext_envir_name_tl' ~ and ~ is ~ being ~ ignored.
  }
  {
    The ~ environment ~ '\l__enumext_envir_name_tl' ~ does ~ not
    ~ have ~ a ~ key ~ called ~'#1'.\\
    Check ~ that ~ you ~ have ~ spelled ~ the ~ key ~ name ~ correctly.
  }
\msg_new:nnnn { enumext } { keyans-unknown-key-value }
  {
    The ~ key ~ '#1=#2' ~ is ~ unknown ~ by ~ environment ~
    '\l__enumext_envir_name_tl' ~ and ~ is ~ being ~ ignored.
  }
  {
    The ~ environment ~ '\l__enumext_envir_name_tl' ~ does ~ not
    ~ have ~ a ~ key ~ called ~'#1'.\\
    Check ~ that ~ you ~ have ~ spelled ~ the ~ key ~ name ~ correctly.
  }
\msg_new:nnnn { enumext } { starred-unknown-key }
  {
    The ~ key ~ '#1' ~ is ~ unknown ~ by ~ environment~
    '\l__enumext_envir_name_tl' ~ and ~ is ~ being ~ ignored.
  }
  {
    The ~ environment ~ '\l__enumext_envir_name_tl' ~ does ~ not
    ~ have ~ a ~ key ~ called ~'#1'.\\
    Check ~ that ~ you ~ have ~ spelled ~ the ~ key ~ name ~ correctly.
  }
\msg_new:nnnn { enumext } { starred-unknown-key-value }
  {
    The ~ key ~ '#1=#2' ~ is ~ unknown ~ by ~ environment ~
    '\l__enumext_envir_name_tl' ~ and ~ is ~ being ~ ignored.
  }
  {
    The ~ environment ~ '\l__enumext_envir_name_tl' ~ does ~ not
    ~ have ~ a ~ key ~ called ~'#1'.\\
    Check ~ that ~ you ~ have ~ spelled ~ the ~ key ~ name ~ correctly.
  }
\msg_new:nnnn { enumext } { standar-unknown-key }
  {
    The ~ key ~ '#1' ~ is ~ unknown ~ by ~ environment ~ '\l__enumext_envir_name_tl' \c_space_tl
    ~ on ~ level ~ \int_use:N \l__enumext_level_int \c_space_tl and ~ is ~ being ~ ignored.
  }
  {
    The ~ environment ~ '\l__enumext_envir_name_tl' ~ does ~ not
    ~ have ~ a ~ key ~ called ~'#1' ~ on ~ level ~ \int_use:N \l__enumext_level_int.\\
    Check ~ that ~ you ~ have ~ spelled ~ the ~ key ~ name ~ correctly.
  }
\msg_new:nnnn { enumext } { standar-unknown-key-value }
  {
    The ~ key ~ '#1=#2' ~ is ~ unknown ~ by ~ environment ~ '\l__enumext_envir_name_tl' \c_space_tl
    ~ on ~ level ~ \int_use:N \l__enumext_level_int \c_space_tl and ~ is ~ being ~ ignored.
  }
  {
    The ~ environment ~ '\l__enumext_envir_name_tl' ~ does ~ not
    ~ have ~ a ~ key ~ called ~'#1' ~ on ~ level ~ \int_use:N \l__enumext_level_int.\\
    Check ~ that ~ you ~ have ~ spelled ~ the ~ key ~ name ~ correctly.
  }
\msg_new:nnnn { enumext } { for-key-unknown }
  { The~key~'#1'~is~unknown~by~'\c_backslash_str foreachkeyans'~and~is~being~ignored.}
  {
    The~command~'\c_backslash_str foreachkeyans'~does~not~have~a~key~called~'#1'.\\
    Check~that~you~have~spelled~the~key~name~correctly.
  }
\msg_new:nnnn { enumext } { for-key-value-unknown }
  { The~key~'#1=#2'~is~unknown~by~'\c_backslash_str foreachkeyans'~and~is~being~ignored. }
  {
    The~command~'\c_backslash_str foreachkeyans'~does~not~have~a~key~called~'#1'.\\
    Check~that~you~have~spelled~the~key~name~correctly.
  }
\msg_new:nnn { enumext } { undefined-storage-anskey }
  {
    Storage ~ named ~ '#1' ~ is ~ not ~ defined ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { missing-miniright }
  {
    Missing ~ '\c_backslash_str miniright' ~ in ~ \msg_line_context:.\\
    The ~ key ~ 'mini-env' ~ need ~ '\c_backslash_str miniright'.
  }
\msg_new:nnn { enumext } { wrong-miniright-place }
  {
    Wrong ~ place ~ for ~ '\c_backslash_str miniright' ~ \msg_line_context:.~ \\
    Works ~ in ~ 'enumext' ~ and ~ 'keyans' ~ with ~ key ~ 'mini-env'.
  }
\msg_new:nnn { enumext } { wrong-miniright-use }
  {
    Wrong ~ use ~ for ~ '\c_backslash_str miniright' ~ \msg_line_context:.~ \\
    '\c_backslash_str miniright' ~ need ~ a ~ key ~ 'mini-env'.
  }
\msg_new:nnn { enumext } { wrong-miniright-starred }
  {
    Can't ~ use  ~ \c_backslash_str miniright ~ in ~ starred ~ environments ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { many-miniright-used }
  {
    Can't ~ use  ~ \c_backslash_str miniright ~ more ~ than ~ once ~  \msg_line_context:.
  }
\msg_new:nnn { enumext } { unknown-set }
  {
    Argument ~ [#1] ~ is ~ unknown ~ by ~  \c_backslash_str setenumextmeta ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { already-defined }
  {
    The ~ key ~ '#1' ~ is ~ already ~ defined ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { prohibited-unknown }
  {
    The ~ name ~ 'unknown' ~ can't ~ be ~ chosen~ for ~ a ~ meta ~ key ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { nested }
  {
    The ~ environment ~ \l__enumext_envir_name_tl \c_space_tl can't ~ be ~ nested ~ \msg_line_context:.
  }
\msg_new:nnn { enumext } { nested-horizontal }
  {
    The ~ environment ~ \l__enumext_envir_name_tl \c_space_tl can't ~ be ~ nested ~ in ~ '#1' ~  \msg_line_context:.
  }
\msg_new:nnn { enumext } { item-joined }
  {
    Items ~ joined ~ (#1) ~ > ~ #2  ~ columns ~\msg_line_context:.
  }
\msg_new:nnn { enumext } { item-joined-columns }
  {
    Not ~ space ~ to ~ join ~ items ~ (#1) ~ > ~ #2 ~\msg_line_context:.
  }
\file_input_stop:
%% 
%%
%% End of file `enumext.sty'.
